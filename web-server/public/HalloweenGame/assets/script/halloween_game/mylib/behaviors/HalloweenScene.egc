<Entity>
	<_States>
	    <_State id="name"><Value>Halloween Scene</Value></_State>
		<State visibleOnEditor="false"><Id>requestObj</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State visibleOnEditor="false"><Id>itemLoaded</Id><Type>Dynamic</Type><Value>new StringMap()</Value></State>
		<State visibleOnEditor="false"><Id>LoaderState</Id><Type>Text</Type><Value>Idle</Value></State>
		<State visibleOnEditor="false"><Id>ItemsToFind</Id><Type>Integer</Type><Value>5</Value></State>
		<State visibleOnEditor="false"><Id>ItemsToIgnore</Id><Type>Integer</Type><Value>3</Value></State>
		<State><Id>scorePoints</Id><Type>Integer</Type><Value>5</Value></State>
		<State><Id>LevelId</Id><Type>Integer</Type><Value>1</Value></State>
		<State><Id>timeOut</Id><Type>Integer</Type><Value>18</Value></State>
	</_States>
	
	<_Triggers>

	</_Triggers>

	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					if (window.level=='easy')
					{
						me.set('LevelId', 1);
						me.set('ItemsToFind', 3);
						me.set('ItemsToIgnore', 1);
					}
					else if (window.level=='medium')
					{
						me.set('LevelId', 2);
						me.set('ItemsToFind', 5);
						me.set('ItemsToIgnore', 3);
					}
					else if (window.level=='hard')
					{
						me.set('LevelId', 3);
						me.set('ItemsToFind', 7);
						me.set('ItemsToIgnore', 4);
					}
				
				    //Initiate
					if (me.s('LoaderState')=="Idle")
						me.fa('Load JSON');
						
						
					//Play Music
					e('Audio Button').fa('Play Music', { name:"sound:halloween_game.music" } );
					
					me.sa('WaitFor5',{delay:1.5,cbEntity:me,cbAction:"Play Laugh"});
					
				</Script>
			</_Scripts>
		</_Action>

		<Action>
			<Id>Play Laugh</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					e('Audio Button').fa('Play FX', { name:"sound:halloween_game.witchLaugh", weak:true, volume:0.5  } );
					me.sa('WaitFor5',{delay:Logic.random(7,12),cbEntity:me,cbAction:"Play Random"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Play Random</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					e('Audio Button').fa('Play FX', { name:"sound:halloween_game.random" + Std.string(Logic.random(1,9)), weak:true, volume:0.5  } );
					me.sa('WaitFor5',{delay:Logic.random(7,12),cbEntity:me,cbAction:"Play Random"});
				</Script>
			</Scripts>
		</Action>
			
		<Action>
			<Id>Get Next Match</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Initiate
					if (me.s('LoaderState')=="Idle")
						me.fa('Load JSON');
					
					//Start when you're done
					me.sa('Start When Loaded');
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Load JSON</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.set('LoaderState',"Loading");
					
					Display.de("Hi! Requesting...");
					
					function httpGetAsync(theUrl, callback)
					{
						var xmlHttp = new XMLHttpRequest();
						//xmlHttp.responseType='json';
						xmlHttp.onreadystatechange = function() { 
							if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
								callback(xmlHttp, xmlHttp.response);
						}
						xmlHttp.open("GET", theUrl, true); // true for asynchronous 
						xmlHttp.send(null);
					}
					
					
					var l_urlRequest='https://64-dot-ellinopoula1.appspot.com/api/memory/?items=';
					
					
					l_urlRequest+=Std.string(me.s('ItemsToIgnore')+1);
					
					Display.dw("l_urlRequest: "+l_urlRequest);
						
					httpGetAsync(l_urlRequest, function (xmlHttp, response) {
						var items = JSON.parse(response);
						Display.de("I GOT:");
						console.log(items);
						me.setState('requestObj',items);
						me.forceAction('Load Assets');
					});
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Start When Loaded</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.s('LoaderState')=="Loaded")
					{
						it.stop();
						me.set('LoaderState',"Idle");
						me.fa('Create Match',{matchObj: me.s('requestObj')});
					}
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Load Assets</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var items = me.s('requestObj');
					var itemLoaded = me.s('itemLoaded');
					var itemsToBeLoaded=0;
					
					//Initiate Load
					var loader = Assets.initiateBatch();
					
					for (item of items)
					{
						if (itemLoaded.get(item.text)==null)
						{
							//Add file to Flambe Loader
							loader.addFile(item.image_url, "image_" + item.text, AssetFormat.PNG);
							loader.addFile(item.narration, "audio_" + item.text);
							
							itemLoaded.set(item.text,item); //true could have worked here as well
							itemsToBeLoaded+=1;
							
							Display.de("Found item, loading it: " + item.text);
						}
						else 
							Display.de("Found item, already loaded: " + item.text);
					}
					
					
					if (itemsToBeLoaded>0)
					{
						//Load
						loader.start();
					}
					else
					{
						Display.de("Done loading22! [nothing loaded]");
						me.set('LoaderState',"Loaded");
						return;
					}
					
					var errorSignal;
					var successSignal;
					
					//Error Event Listener
					errorSignal=loader.errorSignal.connect(function () {
						Display.de("EERrRRRooooorrr Loading stuff.. but whatever..");
						me.set('LoaderState',"Loaded");
						errorSignal.dispose();
						successSignal.dispose();
					});
					
					//Success Event Listener
					successSignal=loader.successSignal.connect(function () {
						Display.de("Done loading22!");
						me.set('LoaderState',"Loaded");
						errorSignal.dispose();
						successSignal.dispose();
						
						//alert('loaded!');
					});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor5</Id>
			<Concurrency>Transient</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>