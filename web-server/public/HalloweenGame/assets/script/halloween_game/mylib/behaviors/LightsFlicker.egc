<Entity>
	<_States>
		<State visibleOnEditor="false"><Id>lightsOn</Id><Type>Boolean</Type><Value>true</Value></State>
		<State><Id>light_easing</Id><Type>Dynamic</Type><Value>Ease.bounceInOut</Value></State>
		<State><Id>light_waitMin</Id><Type>Dynamic</Type><Value>3</Value></State>
		<State><Id>light_waitMax</Id><Type>Dynamic</Type><Value>10</Value></State>
		<State><Id>light_onChance</Id><Type>Integer</Type><Value>1</Value></State>
	</_States>
	
	<_Triggers>

	</_Triggers>

	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					if (Logic.random(0,me.s('light_onChance'))==0)
					{
					    me.set('lightsOn', false);
					    me.set('opacity', 0);
					}
					
					me.sa('WaitFor_LightFlicker',{delay:Logic.random(me.s('light_waitMin'),me.s('light_waitMax')), cbEntity:me, cbAction:"Toggle Lights"});
				</Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Lights On</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.setState('animate_opacity',{type:"to", to:1, seconds:1, easing:me.s('light_easing')});
					me.set('lightsOn', true);
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Lights Off</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.setState('animate_opacity',{type:"to", to:0, seconds:1, easing:me.s('light_easing')});
					me.set('lightsOn', false);
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Toggle Lights</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.s('lightsOn'))
					    me.fa('Lights Off');
					else
					    me.fa('Lights On');
					    
				    me.sa('WaitFor_LightFlicker',{delay:Logic.random(me.s('light_waitMin'),me.s('light_waitMax')), cbEntity:me, cbAction:"Toggle Lights"});
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>WaitFor_LightFlicker</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>