<Entity>
	<_States>
		<State visibleOnEditor="false"><Id>matchStarted</Id><Type>Boolean</Type><Value>false</Value></State>
		<State visibleOnEditor="false"><Id>analytics</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State visibleOnEditor="false"><Id>timeStamp</Id><Type>Integer</Type><Value>0</Value></State>
		
	
		<State visibleOnEditor="false"><Id>selectedItem</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State visibleOnEditor="false"><Id>otherItems</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State visibleOnEditor="false"><Id>thumbFirstX</Id><Type>Integer</Type><Value>266</Value></State>
		<State visibleOnEditor="false"><Id>thumbFirstY</Id><Type>Integer</Type><Value>1280</Value></State>
		<State visibleOnEditor="false"><Id>thumbSpace</Id><Type>Integer</Type><Value>120</Value></State>
		<State visibleOnEditor="false"><Id>itemsFound</Id><Type>Integer</Type><Value>0</Value></State>
		<State visibleOnEditor="false"><Id>sceneThings</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State visibleOnEditor="false"><Id>itemRange</Id><Type>Dynamic</Type><Value>{minX:240, minY:433, maxX:2034, maxY:1083 }</Value></State>
		<State visibleOnEditor="false"><Id>sceneItems</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State visibleOnEditor="false"><Id>score</Id><Type>Integer</Type><Value>0</Value></State>
	</_States>
	
	<_Actions>
		<Action>
			<Id>Create Match</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					function shuffle(array) {
					  var currentIndex = array.length, temporaryValue, randomIndex;
					  
					  // While there remain elements to shuffle...
					  while (0 !== currentIndex) {
					  
						// Pick a remaining element...
						randomIndex = Math.floor(Math.random() * currentIndex);
						currentIndex -= 1;
						
						// And swap it with the current element.
						temporaryValue = array[currentIndex];
						array[currentIndex] = array[randomIndex];
						array[randomIndex] = temporaryValue;
					  }
					  
					  return array;
					}
					
					
					//STARTS HERE
					me.setState('matchStarted',false);
					me.setState('itemsFound',0);
					me.setState('score',0);
					me.setState('sceneThings',[]);
					me.setState('sceneItems',[]);
					
					
					console.log('matchObj',it.s('matchObj'));
					var items = it.s('matchObj');
					items = shuffle(items);
					
					//Choose selected Item
					var selectedItem = items.pop();
					me.set('selectedItem', selectedItem);
					
					//The rest are non-collectables
					me.setState('otherItems',items);
					
					//Analytics
					//console.log('analytics',window.analytics);
					/*
					var l_analytics = {totalCards:items.length+1, mistakes:0, duration:0};
					window.analytics.push(l_analytics);
					me.set('analytics',l_analytics);
					*/
					
					//Reset Time
					me.set('timeStamp',Logic.getTime());
					
					//Show Banner
					e('Banner').fa('Show');
					
					//Set Thumbnails
					me.fa('Set Up Thumbnails');
					
					//Show All Items
					me.fa('Set Up All Items');
					
					//Not Yet Timer
					me.sa('WaitFor_Timer',{delay:e('Halloween Scene').s('timeOut'), delayCurrent:0, cbEntity:me, cbAction:"Not Yet Voice"});
					
					e('Voice Button').setState('touchable', true);
					e('Voice Button').setState('animate_opacity',{type:"to", to:1, seconds:1, easing:Ease.quadInOut});
					/*
					//Store Cards
					me.setState('allCards',arrayOfCards);
					
					//Add Cards
					e('Cards Area').fa('Add Cards To Tile',{cards:shuffle(arrayOfCards)});
					
					me.sa('WaitFor',{delay:1, delayCurrent:0, cbEntity:me,cbAction:"Show All Cards"});
					*/
				]]></Script>
			</Scripts>
			<States>
				<State><Id>matchObj</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	
		<Action>
			<Id>Not Yet Voice</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					e('Audio Button').fa('Play Voice', { name:"sound:halloween_game.den_exeis_vrei", important:false } );
					e('The Witch').fa('Speak', { duration:5 } );
					me.sa('WaitFor_Timer',{delay:e('Halloween Scene').s('timeOut'), delayCurrent:0, cbEntity:me, cbAction:"Not Yet Voice"});
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Show All Cards</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					Display.de('----------------SHOWING ALL CARDS--------------');
					
					
					for (card of me.s('allCards'))
						card.fa('Show',{playSound:false});
						
						
					me.sa('WaitFor',{delay:me.s('allCards').length, cbEntity:me, cbAction:"Hide All Cards"});
					me.setState('showingCards',true);
				</Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Hide All Cards</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					if (me.s('showingCards')==true)
					{
						Display.de("HIDING CAARDS!!!!");
					
						for (card of me.s('allCards'))
							card.fa('Hide');
							
						me.setState('matchStarted',true);
						me.setState('showingCards',false);
					}
				</Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Card Clicked</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					if (me.s('matchStarted'))
					{
						var selectedCards = me.s('selectedCards');
						var card = it.s('card');
						Display.de('Card Clicked: ' + it.s('card').s('cardName'));
						
						if (selectedCards.length<2)
						{
							selectedCards.push(card);
							card.fa('Show',{playSound:true});
						}
						
						if (selectedCards.length==2)
						{
							me.fa("Compare Cards Effe");
							me.sa('WaitFor',{delay:1,cbEntity:me,cbAction:"Compare Cards"});
						}
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>card</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<Action>
			<Id>Compare Cards Effe</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var selectedCards = me.s('selectedCards');
					var l_cardA = selectedCards[0];
					var l_cardB = selectedCards[1];
					
					if (l_cardA.s('cardName')==l_cardB.s('cardName'))
					{
						var scale=1.3*l_cardA.s('scaleX');
						
						//Card A
						e('particle_c1').setState('emitX',(l_cardA.s('spaceX')+e('Cards Area').s('spaceX'))/scale);
						e('particle_c1').setState('emitY',(l_cardA.s('spaceY')+e('Cards Area').s('spaceY'))/scale);
						e('particle_c1').setState('scaleX',scale);
						e('particle_c1').setState('scaleY',scale);
						e('particle_c1').setState('action_fire',true);
						
						//Card B
						e('particle_c2').setState('emitX',(l_cardB.s('spaceX')+e('Cards Area').s('spaceX'))/scale);
						e('particle_c2').setState('emitY',(l_cardB.s('spaceY')+e('Cards Area').s('spaceY'))/scale);
						e('particle_c2').setState('scaleX',scale);
						e('particle_c2').setState('scaleY',scale);
						e('particle_c2').setState('action_fire',true);
						
						e('Blue Bird').fa('Jump Up');
						e('Red Bird').fa('Jump Up');
						Sound.playSound("m:Birds Match",e('Audio Control').s('VolumeFX'));
					}
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Compare Cards</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var selectedCards = me.s('selectedCards');
					var l_cardA = selectedCards[0];
					var l_cardB = selectedCards[1];
					
					if (l_cardA.s('cardName')==l_cardB.s('cardName'))
					{
						l_cardA.fa('Found');
						l_cardB.fa('Found');
						me.addToState('cardsFound',2);
						me.fa('Check For Victory');
					}
					else
					{
						l_cardA.fa('Hide');
						l_cardB.fa('Hide');
						Sound.playSound("m:Wrong Answer",e('Audio Control').s('VolumeFX'));
						e('Blue Bird').sa('WaitFor',{delay:0.1, cbEntity:e('Blue Bird'), cbAction:"Nod Up"});
						e('Red Bird').fa('Nod Up');
						
						//Analytics
						me.s('analytics').mistakes+=1;
					}
					
					me.setState('selectedCards',[]);
				</Script>
			</Scripts>
		</Action>
		
		
		
		<!-- New Stuff -->
		
		<Action>
			<Id>Set Up Thumbnails</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					var l_ItemsToFind = me.s('ItemsToFind');
					var l_selectedItem = me.s('selectedItem');
					
					for (var i=0;i<l_ItemsToFind;i++)
					{
						//Create an thumbnail
						var thumbnail = Logic.create('halloween_game.levels.level1.redSquare');
						
						thumbnail.setState('2DMeshImageForm','image_'+l_selectedItem.text);
						thumbnail.setState('spaceX',me.s('thumbFirstX')+i*me.s('thumbSpace'));
						thumbnail.setState('spaceY',me.s('thumbFirstY'));
						thumbnail.setState('scaleX',0.3);
						thumbnail.setState('scaleY',0.3);
						thumbnail.setState('opacity',0);
						thumbnail.setState('animate_opacity',{type:"to", to:0.5, seconds:1, easing:Ease.quadInOut});
						me.addChild(thumbnail);
						me.s('sceneThings').push(thumbnail);
					}
				]]></Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Set Up All Items</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					var l_ItemsToFind = me.s('ItemsToFind');
					var l_selectedItem = me.s('selectedItem');
					var l_itemRange = me.s('itemRange');
					var l_distanceBetweenItems=200;
					
					//FUNCTIONS
					
					function validatePosition(valX, valY)
					{
						for (var j=0;j<me.s('sceneItems').length;j++)
						{
							var l_sceneItem = me.s('sceneItems')[j];
							
							var a = l_sceneItem.s('spaceX') - valX;
							var b = l_sceneItem.s('spaceY') - valY;
							// c is the distance
							var c = Math.sqrt( a*a + b*b );
							
							if (c<l_distanceBetweenItems)
								return false;
						}
						
						return true;
					}
					
					function createItem(correct, itemName)
					{
						//Create an thumbnail
						var collectItem = Logic.create('halloween_game.levels.level1.greenSquare');
						
						collectItem.setState('2DMeshImageForm','image_'+itemName);
						collectItem.setState('opacity',0.4);
						collectItem.setState('rotation',Logic.random(-40,40));
						collectItem.setState('correct',correct);
						
						
						//Location
						var tryX = Logic.random(l_itemRange.minX,l_itemRange.maxX);
						var tryY = Logic.random(l_itemRange.minY,l_itemRange.maxY);
						
						while (validatePosition(tryX, tryY)==false)
						{
							tryX = Logic.random(l_itemRange.minX,l_itemRange.maxX);
							tryY = Logic.random(l_itemRange.minY,l_itemRange.maxY);
						}
						
						collectItem.setState('spaceX', tryX);
						collectItem.setState('spaceY', tryY);
						
						//Scale according to position (so it's not too big on edges)
						var scale=Logic.random(40,65)/100;
						
						collectItem.setState('scaleX', scale);
						collectItem.setState('scaleY', scale);
						
						me.addChild(collectItem);
						me.s('sceneItems').push(collectItem);
					}
					
					//CODE
					
					//Create correct items
					for (var i=0;i<l_ItemsToFind;i++)
					{
						createItem(true, l_selectedItem.text);
					}
					
					//Create wrong items
					for (var i=0;i<me.s('ItemsToIgnore');i++)
					{
						createItem(false, me.s('otherItems')[i].text);
					}
				]]></Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Found Item</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
				    me.addToState('itemsFound',1);
				    
				    Display.de('itemsFound: ' + me.s('itemsFound'));
				    Display.de('ItemsToFind: ' + me.s('ItemsToFind'));
				    
				    me.addToState('score', me.s('scorePoints') );
				   
				    me.fa('Check For Victory');
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Wrong Item</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
				    me.addToState('score', -me.s('scorePoints') );
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Check For Victory</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					 if (me.s('itemsFound')>=me.s('ItemsToFind'))
						me.sa('WaitFor',{delay:1,cbEntity:me,cbAction:"Show Victory"});
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Show Victory</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					//Remove Wrong Items from scene
				    var l_sceneItems = me.s('sceneItems');
				    
				    for (var i=0;i<l_sceneItems.length;i++)
					{
					    if (l_sceneItems[i]!=null)
					    {
    						if (l_sceneItems[i].s('correct')==false)
    						{
    						    l_sceneItems[i].remove();
    						    l_sceneItems[i]=null;
    						}
    					}
					}
					
					//Show Win Screen
					e('WinScreen').fa('Show Victory Screen');
			        e('WinScreen').setState('animate_scaleX',{from:0, to:1, seconds:1, easing:Ease.quadInOut});
			        e('WinScreen').setState('animate_scaleY',{from:0, to:1, seconds:1, easing:Ease.quadInOut});
			        e('WinScreen').set('visible',true);
					e('WinScreen').set('opacity',1);
					
					//Analytics
					//me.s('analytics').duration=Math.floor(Logic.getTime()-me.s('timeStamp'));
					
					//Pre-Load the next match
					me.fa('Load JSON');
					
					me.sa('WaitFor',{delay:5,cbEntity:me,cbAction:"Hide Victory"});
					
					return;
					//e('Congratulations').setState('visible',true);
					Sound.playSound("m:Match Complete",e('Audio Control').s('VolumeFX'));
					Sound.playSound("m:Birds Complete",e('Audio Control').s('VolumeFX'));
					var fromX=1200;
					var fromY=500;
					var toY=350;
					var secs=5;
					var secs2=5;
					
					e('CongratsSign').setState('spaceX',fromX);
					e('CongratsSign').setState('animate_y',{from:fromY+382, to:toY+382, seconds:secs, easing:Ease.backOut});
					e('CongratsSign').setState('animate_opacity',{from:0, to:1, seconds:secs2, easing:Ease.backOut});
					
					e('CongratsBalloon1').setState('spaceX',fromX-250);
					e('CongratsBalloon1').setState('animate_y',{from:fromY, to:toY, seconds:secs, easing:Ease.backOut});
					e('CongratsBalloon1').setState('animate_opacity',{from:0, to:1, seconds:secs2, easing:Ease.backOut});
					
					e('CongratsBalloon2').setState('spaceX',fromX+263);
					e('CongratsBalloon2').setState('animate_y',{from:fromY-22, to:toY-22, seconds:secs, easing:Ease.backOut});
					e('CongratsBalloon2').setState('animate_opacity',{from:0, to:1, seconds:secs2, easing:Ease.backOut});
					/*
					//Particles
					e('particle_b1').setState('action_fire',true);
					e('particle_b2').setState('action_fire',true);
					e('particle_b3').setState('action_fire',true);
					e('particle_b4').setState('action_fire',true);
					*/
					//Birds Celebrate
					e('mainScene').fa('Birds Celebrate');
					
					//Hide Restart Button
					e('Restart Button').set('visible',false);
					

					e('mainScene').sa('WaitFor',{delay:secs+0.3,cbEntity:e('mainScene'),cbAction:"Birds Sit At Tree"});
				]]></Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Hide Victory</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					//Remove everything from scene
				    var l_sceneItems = me.s('sceneItems');
				    
				    for (var i=0;i<l_sceneItems.length;i++)
					{
					    if (l_sceneItems[i]!=null)
					    {
						    l_sceneItems[i].remove();
						    l_sceneItems[i]=null;
    					}
					}
					var l_sceneThings = me.s('sceneThings');
				    
				    for (var i=0;i<l_sceneThings.length;i++)
					{
					    if (l_sceneThings[i]!=null)
					    {
						    l_sceneThings[i].remove();
						    l_sceneThings[i]=null;
    					}
					}
					
					e('WinScreen').setState('animate_opacity',{type:"to", to:0, seconds:1.5, easing:Ease.backOut});
					e('Banner').setState('animate_opacity',{type:"to", to:0, seconds:1.5, easing:Ease.backOut});
					me.sa('WaitFor',{delay:2,cbEntity:me,cbAction:"Get Next Match"});
					return;
					
					e('CongratsBalloon1').setState('animate_y',{type:"by", by:-1000, seconds:3, easing:Ease.quadInOut});
					e('CongratsBalloon2').setState('animate_y',{type:"by", by:-1000, seconds:3, easing:Ease.quadInOut});
					e('CongratsSign').setState('animate_opacity',{type:"to", to:0, seconds:1.5, easing:Ease.quadInOut});
					
					e('CongratsBalloon1').setState('animate_opacity',{type:"to", to:0, seconds:3, easing:Ease.quintIn});
					e('CongratsBalloon2').setState('animate_opacity',{type:"to", to:0, seconds:3, easing:Ease.quintIn});
					//e('Congratulations').setState('visible',false);
					
				]]></Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Transient</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>WaitFor_Timer</Id>
			<Concurrency>Transient</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>