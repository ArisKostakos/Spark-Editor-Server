<Entity extends="std.display.Image2D">
	<_States>
		<_State id="2DMeshImageForm"><Value>hotAirBalloon</Value></_State>
		<_State id="physicsEntity"><Value>false</Value></_State>
		<State><Id>seconds</Id><Type>Decimal</Type><Value>150</Value></State>
		<State><Id>easing</Id><Type>Dynamic</Type><Value>Ease.linear</Value></State>
		<State><Id>fromX</Id><Type>Dynamic</Type><Value>2800</Value></State>
		<State><Id>toX</Id><Type>Dynamic</Type><Value>-500</Value></State>
		<State><Id>fromY</Id><Type>Dynamic</Type><Value>1600</Value></State>
		<State><Id>toY</Id><Type>Dynamic</Type><Value>-200</Value></State>
		<State><Id>percentX</Id><Type>Decimal</Type><Value>0.2</Value></State>
		<State><Id>percentY</Id><Type>Decimal</Type><Value>0.7</Value></State>
		<_State id="scaleX"><Value>0.8</Value></_State>
		<_State id="scaleY"><Value>0.8</Value></_State>
			
		<State><Id>bounce</Id><Type>Decimal</Type><Value>-100</Value></State>
		<State><Id>bounceSec</Id><Type>Decimal</Type><Value>2.4</Value></State>
	
		<State><Id>rotation</Id><Type>Decimal</Type><Value>9</Value></State>
		<State><Id>tilt</Id><Type>Decimal</Type><Value>18</Value></State>
		<State><Id>tiltSec</Id><Type>Decimal</Type><Value>6</Value></State>
	</_States>
		
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					//Determine Y
					var distance = me.s('fromY')-me.s('toY');
					var deltaDistance = distance*me.s('percentY');
					var deltaDistancePos = me.s('fromY')-deltaDistance;
					me.setState('spaceY',deltaDistancePos);
					
					//Start Floating
					me.fa('Float Left Percent');
					
					//Start Bouncing
					me.fa('Bounce');
					
					//Start Tilting
					me.fa('Tilt');
				</Script>
			</_Scripts>
		</_Action>
			
			
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	
		<Action>
			<Id>Float Left</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					me.setState('animate_x',{from:me.s('fromX'), to:me.s('toX'), seconds:me.s('seconds'), easing:me.s('easing')});
					me.sa('WaitFor',{delay:me.s('seconds'), cbEntity:me, cbAction:"Float Left"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Float Left Percent</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					var distance = me.s('fromX')-me.s('toX');
					var deltaDistance = distance*me.s('percentX');
					var deltaDistancePos = me.s('fromX')-deltaDistance;
					
					me.setState('animate_x',{from:deltaDistancePos, to:me.s('toX'), seconds:me.s('seconds')*(1-me.s('percentX')), easing:me.s('easing')});
					me.sa('WaitFor',{delay:me.s('seconds')*(1-me.s('percentX')), cbEntity:me, cbAction:"Float Left"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Bounce</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.setState('bounce',me.s('bounce')*(-1));
					
					
					me.setState('animate_y',{type:"by", by:me.s('bounce'), seconds:me.s('bounceSec'), easing:Ease.quadInOut});
					me.sa('WaitFor2',{delay:me.s('bounceSec'), cbEntity:me, cbAction:"Bounce"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor2</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>Tilt</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.setState('tilt',me.s('tilt')*(-1));
					
					
					me.setState('animate_rotation',{type:"by", by:me.s('tilt'), seconds:me.s('tiltSec'), easing:Ease.quadInOut});
					me.sa('WaitFor3',{delay:me.s('tiltSec'), cbEntity:me, cbAction:"Tilt"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor3</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    me.stopAction('WaitFor3');
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>