<Entity extends="std.core.Base">
	<_States>
		<_State id="name"><Value>Match Manager</Value></_State>
		<State><Id>requestObj</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>matchNo</Id><Type>Integer</Type><Value>0</Value></State>
	</_States>
	
	<_Actions>
		<Action>
			<Id>Get Next Match</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//So this is going to be asychronous.. So when we're done, we're going to just call another Action or something like that
					//If we want to be fancy, we can just call a callback parameter function.. but whatevs
					
					//Fake obj we got from the "URL REQUEST"
					var matchNo = me.addToState('matchNo',1);
					/*
					var obj = {};
					
					if (matchNo==1)
					{
						obj.items = [	{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"}
									];
					}
					else if (matchNo==2)
					{
						obj.items = [	{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"},
										{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"}
									];
					}
					else if (matchNo==3)
					{
						obj.items = [	{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"},
										{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"}
									];
					}
					else
					{
						obj.items = [	{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"},
										{name:'Άγγελος', image:"localAssets/aggelos.png", audio:"localAssets/A_Aggelos.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"},
										{name:'Γόμα', image:"localAssets/goma.png", audio:"localAssets/B_goma.mp3"},
										{name:'Βρύση', image:"localAssets/vrisi.png", audio:"localAssets/B_brisi.mp3"}
									];
					}
					*/
					Display.de("Hi! Requesting...");
					
					function httpGetAsync(theUrl, callback)
					{
						var xmlHttp = new XMLHttpRequest();
						xmlHttp.onreadystatechange = function() { 
							if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
								callback(xmlHttp, xmlHttp.response);
						}
						xmlHttp.open("GET", theUrl, true); // true for asynchronous 
						xmlHttp.send(null);
					}
					
					
					
					
					httpGetAsync("https://ellinopoula1.appspot.com/api/memory/", function (xmlHttp, response) {
						var items = JSON.parse(response);
						console.log("RETUrNED: ",items);
						console.log("RETUrNED: ",items[0]);
						//return;
						
						/*
						e('Obj Image').setState('display',"inline");
						e('Obj Image').setState('src',items[0].image_url);
						
						e('Obj Text').setState('display',"inline");
						e('Obj Text').setState('text',items[0].title);
						
						e('Obj Play Sound Btn').setState('display',"inline");
						e('Obj Play Sound Btn').setState('SoundUrl',items[0].narration);
						*/
						
						me.setState('requestObj',items);
						me.forceAction('Load Assets');
					});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Load Assets</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var items = me.s('requestObj');
					
					//YOOO
					//e('Game Manager').fa('Create Match',{matchObj:obj});
					//return;
					
					//Initiate Load
					var loader = Assets.initiateBatch();
					
					for (item of items)
					{
						//Display.de("Found item, loading its image: " + item.image);
						//Add file to Flambe Loader
						loader.addFile(item.image_url, "image_" + item.text, AssetFormat.PNG);
						loader.addFile(item.narration, "audio_" + item.text);
					}
					
					
					if (items.length>0)
					{
						//Load
						loader.start();
					}
					else
					{
						Display.de("There was like.. no items found! wtf..");
						return;
					}
					
					//var oldMe = me;
					//Event Listener
					loader.successSignal.connect(function () {
						//Display.de("Done loading shit!");
						e('Game Manager').fa('Create Match',{matchObj:items});
					}).once();
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>