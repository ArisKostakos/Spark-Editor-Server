<Entity extends="std.display.Scene2D">
	<_States>
		<_State id="name"><Value>mainScene</Value></_State>
		<State><Id>rectOpacity</Id><Type>Decimal</Type><Value>0</Value></State>
	</_States>
	<Form><Space><Entities>
		<!-- Game Manager (non-visual) -->
		<Entity extends="MemoryGame.levels.level1.GameManager"/>
		
		<!-- Match Manager (non-visual) -->
		<Entity extends="MemoryGame.levels.level1.MatchManager"/>
		
		<!-- Rects -->
		<Entity extends="MemoryGame.levels.level1.RedRect"/>
		<Entity extends="MemoryGame.levels.level1.GreenRect"/>
		
		<!-- Background -->
		<Entity extends="MemoryGame.levels.level1.Background"/>
		
		<!-- Tree Back -->
		<Entity extends="MemoryGame.levels.level1.TreeBack"/>
		
		<Entity extends="MemoryGame.levels.level1.BlueRect"/>
		
		<!-- Particle Emitters -->
		<Entity extends="MemoryGame.levels.level1.MyParticle">
			<_States>
				<_State id="name"><Value>particle1</Value></_State>
			</_States>
		</Entity>
		<Entity extends="MemoryGame.levels.level1.MyParticle">
			<_States>
				<_State id="name"><Value>particle2</Value></_State>
			</_States>
		</Entity>
		
		
		<Entity extends="MemoryGame.levels.level1.PlayBtn"/>
		<Entity extends="MemoryGame.levels.level1.Congratulations"/>
		
		
		<Entity extends="MemoryGame.levels.level1.BlueBird"/>
		<Entity extends="MemoryGame.levels.level1.RedBird"/>
		
		<!-- Tree Front -->
		<Entity extends="MemoryGame.levels.level1.TreeFront"/>
		
		<Entity extends="MemoryGame.levels.level1.CardsArea"/>
	</Entities></Space></Form>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					var fromY=1000;
					var toY=500;
					var secs=6;
				
					e('Blue Bird').setState('animate_y',{from:fromY, to:toY, seconds:secs, easing:Ease.quadInOut});
					e('Red Bird').setState('animate_y',{from:fromY-80, to:toY-80, seconds:secs, easing:Ease.quadInOut});
					e('Button Sprite').setState('animate_y',{from:fromY+188, to:toY+188, seconds:secs, easing:Ease.quadInOut});
				</Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Birds Sit At Tree</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var secsBlue=2.8;
					e('Blue Bird').setState('scaleX',-1);
					e('Blue Bird').setState('animate_x',{type:"to", to:245, seconds:secsBlue, easing:Ease.quadInOut});
					e('Blue Bird').setState('animate_y',{type:"to", to:268, seconds:secsBlue, easing:Ease.quadInOut});
					me.sa('WaitFor',{delay:secsBlue, cbEntity:me, cbAction:"Blue Arrive"});
					
					var secsRed=3.2;
					e('Red Bird').setState('animate_x',{type:"to", to:470, seconds:secsRed, easing:Ease.quadInOut});
					e('Red Bird').setState('animate_y',{type:"to", to:318, seconds:secsRed, easing:Ease.quadInOut});
					me.sa('WaitFor2',{delay:secsRed, cbEntity:me, cbAction:"Red Arrive"});
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Blue Arrive</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					e('Blue Bird').setState('scaleX',1);
					e('Blue Bird').fa('Animate',{state:"Stand"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Red Arrive</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					e('Red Bird').setState('scaleX',1);
					e('Red Bird').fa('Animate',{state:"Stand"});
					
					//return;  //TEMP
					e('Match Manager').fa('Get Next Match');
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    me.stopAction('WaitFor');
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>WaitFor2</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    me.stopAction('WaitFor2');
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>