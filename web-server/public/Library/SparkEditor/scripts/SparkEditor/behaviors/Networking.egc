<?xml version="1.0" encoding="utf-8"?>
<Entity>
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					Display.error("Start Connecting to stuff...");
					me.setState('UniqueId', "Connection" + Std.random(999999));
					Comms.connectTo("130.211.170.162","3014", "gateServer");
				</Script>
			</_Scripts>
		</_Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>NetworkConnected</Event>
			<Scripts>
				<Script>
					Display.error("CONNECTED TO: " + Comms.connectedServerName);
					
					if (Comms.connectedServerName=="gateServer")
					{
						Comms.request('gate.gateHandler.queryEntry', { uid: me.getState('UniqueId') }, "getConnectorAddress");
					}
					else if (Comms.connectedServerName=="connectorServer")
					{
						Comms.request('connector.entryHandler.enter', { uid: me.getState('UniqueId') }, "greetConnector");
					}
				</Script>
			</Scripts>
		</Trigger>
		<Trigger>
			<Event>NetworkRequest</Event>
			<Scripts>
				<Script>
					Display.error("Received Request...");
					
					/*This is terrible.. if two request events are raised simutaneously, this will collapse
					if i do if else, then the first one will be triggered twice
					if i do if, if, if then all of them will be executed twice
					i can't remove the request from the Comms array either, cause more than one entities might be connected to the
					same request and need it...*/
					
					//Implementation below now assumes two request events will never be raised simutaneously (which is very wrong..)
					if (Comms.getRequestData("getConnectorAddress")!=null)
					{
						Display.error("Request Received Identified: getConnectorAddress");
						var data = Comms.getRequestData("getConnectorAddress");
						
						Comms.disconnect();
						
						if (data.code == 2001) 
						{
							Display.error("Pomelo: Received error code 2001! Aborting connection.");
							return;
						}
						
						if (data.host == '127.0.0.1') 
							data.host = "130.211.170.162";

						Comms.connectTo(data.host, data.port, "connectorServer");
					}
					else if (Comms.getRequestData("greetConnector")!=null)
					{
						Display.error("Request Received Identified: greetConnector");
						var data = Comms.getRequestData("greetConnector");
						Display.error("Data received: " + data.code);
						
						me.setState('Connected',true);
						
						//Comms.request("area.playerHandler.enterScene", { name: "Malakas", playerId: data.playerId }, "Enter Scene");
					}
					else if (Comms.getRequestData("Enter Scene")!=null)
					{
						Display.error("Request Received Identified: Enter Scene");
						var data = Comms.getRequestData("Enter Scene");
						Display.error("Pomelo Scene data.data.playerId: " + data.data.playerId);
						
						me.setState("playerId", data.data.playerId);
						
						var malakes = data.data.area.entities;
						
						
						//First, find the scene that we will add our new balls
						var arenaScene = me.getState('space').getChildren()[1];
						
						
						//end of that
						
						var i=1;
						while (i != 1000)
						{
						
							if (malakes[i]!=null)
							{
								if (malakes[i].type=="player")
								{
									Display.error(i + " --------------------");
									Display.error(i + " id: " + malakes[i].id);
									Display.error(i + " x: " + malakes[i].x);
									Display.error(i + " y: " + malakes[i].y);
									
									var child;
									if (me.getState("playerId")==malakes[i].id)
									{
										child = Logic.gameFactory.createGameEntity("Multiplayer3DTest.entities.UserPlayer");
									}
									else
									{
										child = Logic.gameFactory.createGameEntity("Multiplayer3DTest.entities.NetworkPlayer");
									}
									
									
									child.setState('spaceX', malakes[i].x);
									child.setState('spaceY', malakes[i].y);
									child.setState('entityId', i);
									child.setState('playerId', malakes[i].id);
									
									arenaScene.addChild(child);
									
								}
								
							}
							
							i+=1;
						}
						
						Display.error("Setting Push Callbacks....");
						Comms.addServerEvent('onMove');
					}
					else
					{
						Display.error("Request Could NOT be identified:-(");
					}
					
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkServerEvent</Event>
			<Scripts>
				<Script>
					Display.error("Received Server Event...");
					
					/*THIS IS EVEN MORE TERRIBLE THAN BEFORE... TWO SERVER EVENTS ARE SURE TO HAPPEN ON THE SAME TICK..
					AND OH MY GOD, THE OVERHEAD.. EVERY TIME THERE'S A SERVER EVENT, A BILLION FUNCTIONS WILL CHECK THEIR IFS...
					if two request events are raised simutaneously, this will collapse
					if i do if else, then the first one will be triggered twice
					if i do if, if, if then all of them will be executed twice
					i can't remove the request from the Comms array either, cause more than one entities might be connected to the
					same request and need it...*/
					
					//Implementation below now assumes two server events will never be raised simutaneously (which is very wrong..)
					if (Comms.getServerEventData("onMove")!=null)
					{
						Display.error("Server Event Received Identified: onMove. CHECK FOR FAKE");
						var data = Comms.getServerEventData("onMove");
						
						var isFakeMove = true;
						
						//First, find the scene that we will add our new balls
						var arenaScene = me.getState('space').getChildren()[1];
						
						for (arenaChild in arenaScene.getChildren())
						{
							if (data.entityId==arenaChild.getState("entityId"))
							{
								isFakeMove=false;
								break;
							}
						}
						
						
						if (isFakeMove)
						{
							Display.error("NEW PLAYER JOINEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED!!!!!!!!!!");
							
							var newplr = Logic.gameFactory.createGameEntity("Multiplayer3DTest.entities.NetworkPlayer");
							
							newplr.setState('spaceX', data.endPos.x);
							newplr.setState('spaceY', data.endPos.y);
							newplr.setState('entityId', data.entityId);
							newplr.setState('playerId', 9999999999);
							
							arenaScene.addChild(newplr);
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		
	</_Triggers>
	
	<_States>
		
		<State>
			<Id>UniqueId</Id>
			<Type>Text</Type>
			<Value>Undefined</Value>
		</State>
		<State>
			<Id>Connected</Id>
			<Type>Boolean</Type>
			<Value>false</Value>
		</State>
	</_States>
	

	
</Entity>