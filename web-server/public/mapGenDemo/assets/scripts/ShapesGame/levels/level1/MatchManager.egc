<Entity extends="std.core.Base">
	<_States>
		<_State id="name"><Value>Match Manager</Value></_State>
		<State><Id>requestObj</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>matchNo</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>itemLoaded</Id><Type>Dynamic</Type><Value>new StringMap()</Value></State>
		<State><Id>LoaderState</Id><Type>Text</Type><Value>Idle</Value></State>
	</_States>
	
	<_Actions>
		<Action>
			<Id>Get Next Match</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_restart = it.s('restart');
					it.setState('restart',false);
					
					//Count Match Number (for some reason..)
					me.addToState('matchNo',1);
					
					//Sound.playSound('m:Debug');
					
					//Initiate
					if (me.s('LoaderState')=="Idle")
						me.fa('Load JSON',{ restart:l_restart } );
					
					//Start when you're done
					me.sa('Start When Loaded');
				</Script>
			</Scripts>
			<States>
				<State><Id>restart</Id><Type>Boolean</Type><Value>false</Value></State>
			</States>
		</Action>
		
		<Action>
			<Id>Start When Loaded</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.s('LoaderState')=="Loaded")
					{
						it.stop();
						me.set('LoaderState',"Idle");
						e('Game Manager').fa('Create Match',{matchObj: me.s('requestObj')});
					}
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Load JSON</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.set('LoaderState',"Loading");
					
					Display.de("Hi! Requesting...");
					
					function httpGetAsync(theUrl, callback)
					{
						var xmlHttp = new XMLHttpRequest();
						//xmlHttp.responseType='json';
						xmlHttp.onreadystatechange = function() { 
							if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
								callback(xmlHttp, xmlHttp.response);
						}
						xmlHttp.open("GET", theUrl, true); // true for asynchronous 
						xmlHttp.send(null);
					}
					
					
					var l_urlRequest=e('Memory Game').s('EllinopoulaDB');
					
					if (it.s('restart'))
						l_urlRequest+="&restart=true";
					
					Display.dw("l_urlRequest: "+l_urlRequest);
						
					httpGetAsync(l_urlRequest, function (xmlHttp, response) {
						var items = JSON.parse(response);
						Display.de("I GOT:");
						//console.log(items);
						me.setState('requestObj',items);
						me.forceAction('Load Assets');
					});
				</Script>
			</Scripts>
			<States>
				<State><Id>restart</Id><Type>Boolean</Type><Value>false</Value></State>
			</States>
		</Action>
		
		<Action>
			<Id>Load Assets</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var items = me.s('requestObj');
					var itemLoaded = me.s('itemLoaded');
					var itemsToBeLoaded=0;
					
					//Initiate Load
					var loader = Assets.initiateBatch();
					
					for (item of items)
					{
						if (itemLoaded.get(item.text)==null)
						{
							//Add file to Flambe Loader
							loader.addFile(item.image_url, "image_" + item.text, AssetFormat.PNG);
							loader.addFile(item.narration, "audio_" + item.text);
							
							itemLoaded.set(item.text,item); //true could have worked here as well
							itemsToBeLoaded+=1;
							
							Display.de("Found item, loading it: " + item.text);
						}
						else 
							Display.de("Found item, already loaded: " + item.text);
					}
					
					
					if (itemsToBeLoaded>0)
					{
						//Load
						loader.start();
					}
					else
					{
						Display.de("Done loading22! [nothing loaded]");
						me.set('LoaderState',"Loaded");
						return;
					}
					
					var errorSignal;
					var successSignal;
					
					//Error Event Listener
					errorSignal=loader.errorSignal.connect(function () {
						Display.de("EERrRRRooooorrr Loading stuff.. but whatever..");
						me.set('LoaderState',"Loaded");
						errorSignal.dispose();
						successSignal.dispose();
					});
					
					//Success Event Listener
					successSignal=loader.successSignal.connect(function () {
						Display.de("Done loading22!");
						me.set('LoaderState',"Loaded");
						errorSignal.dispose();
						successSignal.dispose();
					});
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>