<?xml version="1.0" encoding="utf-8"?>
<Entity>
	<_States>
		<State>
			<Id>OnAirCounter</Id>
			<Type>Integer</Type>
			<Value>0</Value>
		</State>
		
	
	
		<State>
			<Id>WalkSpeed</Id>
			<Type>Integer</Type>
			<Value>600</Value>
		</State>
	
		<State>
			<Id>WalkLimit</Id>
			<Type>Integer</Type>
			<Value>1000</Value>
		</State>
		
		<State>
			<Id>JumpStrength</Id>
			<Type>Integer</Type>
			<Value>15000</Value>
		</State>
	
		<State>
			<Id>OnAir</Id>
			<Type>Boolean</Type>
			<Value>false</Value>
		</State>
	
		<State>
			<Id>Crouching</Id>
			<Type>Boolean</Type>
			<Value>false</Value>
		</State>
		
	</_States>
		
	<_Triggers>
		<Trigger>
			<Event>PhysicsCollisionStart</Event>
			<Scripts>
				<Script>
					//Display.error(me.getState('name') + " Collided! [Start]");
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>PhysicsCollisionEnd</Event>
			<Scripts>
				<Script>
					//Display.error(me.getState('name') + " Collided! [End]");
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>PhysicsSensorStartBipedFeet</Event>
			<Scripts>
				<Script>
					//if (me.getState('OnAirCounter')==0)
					//{
					//	me.forceAction("StandUp");
					//}
					
					//Display.error(me.getState('name') + " Feet Collided! [Start]");
					//me.setState('OnAirCounter',me.getState('OnAirCounter')+1);
					//Display.error("start MY OnAirCounter IS: " + me.getState('OnAirCounter'));
					
					
					me.setState('OnAir',false);
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>PhysicsSensorEndBipedFeet</Event>
			<Scripts>
				<Script>
					//Display.error(me.getState('name') + " Feet Collided! [End]");
					//if (me.getState('OnAirCounter')>0) me.setState('OnAirCounter',me.getState('OnAirCounter')-1);
					//Display.error("end MY OnAirCounter IS: " + me.getState('OnAirCounter'));
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts><Script>
				me.startAction('Actor Update');
				me.startAction('Camera Follow');
				
				var view = Logic.getEntityByName('Main View 2D Run');
				
				//CAMERA
				var camera = Logic.getEntityByName('Editor Scene Run Camera');
				
				//maxBoundsX
				var maxBoundsX = camera.getState('maxBoundsX'); 
				//maxBoundsY
				var maxBoundsY = camera.getState('maxBoundsY'); 
				//maxBoundsWidth
				var maxBoundsWidth = camera.getState('maxBoundsWidth'); 
				//maxBoundsHeight
				var maxBoundsHeight = camera.getState('maxBoundsHeight'); 
				//minBoundsWidthRatio
				var minBoundsWidthRatio = camera.getState('minBoundsWidthRatio'); 
				//minBoundsHeightRatio
				var minBoundsHeightRatio = camera.getState('minBoundsHeightRatio'); 
				//minBoundsHorizontalAlign
				var minBoundsHorizontalAlign = camera.getState('minBoundsHorizontalAlign'); 
				//minBoundsVerticalAlign
				var minBoundsVerticalAlign = camera.getState('minBoundsVerticalAlign'); 
				
				var minBoundsWidth = maxBoundsWidth*minBoundsWidthRatio;
				var minBoundsHeight = maxBoundsHeight*minBoundsHeightRatio;

				var viewWidth = view.getState('feedbackWidth');
				var viewHeight = view.getState('feedbackHeight');
				Display.error("View Width: " + viewWidth);
				Display.error("View Height: " + viewHeight);
				
				
				var viewAspectRatio = viewWidth/viewHeight;
				Display.error("viewAspectRatio: " + viewAspectRatio);
				var cameraCaptureAreaX = 0;
				var cameraCaptureAreaY = 0;
				var cameraCaptureAreaWidth =0;
				var cameraCaptureAreaHeight =0;
				
				//if (scale between 4:3 and 16:9)
				if (viewAspectRatio>1.777) //16:9
				{
					Display.error("SHIT! View is to looongish");
					//For now, Assume 1.777
					viewAspectRatio = 1.777;
				}
				else if (1.333>viewAspectRatio) //4:3
				{
					Display.error("SHIT! View is to squarish");
					//For now, Assume 1.333
					viewAspectRatio = 1.333;
				}
				
				

				//check if ratio is bigger or smaller than 3:2 (1.5)
				if (viewAspectRatio>1.5) //if bigger
				{
					Display.error("GOOD! glueing HEIGHT");
					//glue minBoundsHeight
					cameraCaptureAreaHeight = minBoundsHeight;
					cameraCaptureAreaWidth = Math.round(cameraCaptureAreaHeight*viewAspectRatio);
					
				}
				else //if smaller or equal
				{
					Display.error("GOOD! glueing WIDTH");
					//glue minBoundsWidth (this case)
					cameraCaptureAreaWidth = minBoundsWidth;
					cameraCaptureAreaHeight = Math.round(cameraCaptureAreaWidth/viewAspectRatio);
				}
					
					
				
				//Later on if we assumed 1.333 or 1.777, instead do letterboxing like so:
				//if we failed the test above we'll need to do letterboxing too
				//after we're done we'll do letterbox centering (other options too later)
				

				//and at some point, we align..
				//Horizontal Align
				if (minBoundsHorizontalAlign=="Left")
					cameraCaptureAreaX = maxBoundsX;
				else if (minBoundsHorizontalAlign=="Center")
					cameraCaptureAreaX = maxBoundsX + (maxBoundsWidth - cameraCaptureAreaWidth)/2;
				else if (minBoundsHorizontalAlign=="Right")
					cameraCaptureAreaX = maxBoundsX + (maxBoundsWidth - cameraCaptureAreaWidth);
				
				//Vertical Align
				if (minBoundsVerticalAlign=="Top")
					cameraCaptureAreaY = maxBoundsY;
				else if (minBoundsVerticalAlign=="Middle")
					cameraCaptureAreaY = maxBoundsY + (maxBoundsHeight - cameraCaptureAreaHeight)/2;
				else if (minBoundsVerticalAlign=="Bottom")
					cameraCaptureAreaY = maxBoundsY + (maxBoundsHeight - cameraCaptureAreaHeight);
				
				
				//Move CAMERA
				camera.setState('captureAreaX',cameraCaptureAreaX);
				camera.setState('captureAreaY',cameraCaptureAreaY);
				camera.setState('captureAreaWidth',cameraCaptureAreaWidth);
				camera.setState('captureAreaHeight',cameraCaptureAreaHeight);
				
				//DEBUG:
				//Display.error("cameraCaptureAreaX: " + cameraCaptureAreaX);
				//Display.error("cameraCaptureAreaY: " + cameraCaptureAreaY);
				//Display.error("cameraCaptureAreaWidth: " + cameraCaptureAreaWidth);
				//Display.error("cameraCaptureAreaHeight: " + cameraCaptureAreaHeight);
			</Script></_Scripts>
		</_Action>
		<Action>
			<Id>Camera Follow</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					var actorPositionX = Logic.reflectFieldOfField(me.getState('physicsBody'),"position", "x");
					//Display.error("MY X POSITION IS: " + actorPositionX);
					
					var camera = Logic.getEntityByName('Editor Scene Run Camera');
					var platformScene = Logic.getEntityByName('Platform Scene');
					
					//The idea is that the actor is centered.. if possible..
					var newCameraCaptureX = actorPositionX-camera.getState('captureAreaWidth')/2;
					newCameraCaptureX = Math.max(newCameraCaptureX,platformScene.getState('boundsX'));
					var sceneBoundX = platformScene.getState('boundsX') + platformScene.getState('boundsWidth');
					newCameraCaptureX = Math.min(newCameraCaptureX,sceneBoundX-camera.getState('captureAreaWidth'));
					
					//Move Camera Horizontally
					camera.setState('captureAreaX',newCameraCaptureX);
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Actor Update</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					var actorVelocityX = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "x");
					var actorVelocityY = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "y");
					Display.error("MY VELOCITY IS: " + actorVelocityX + ", " + actorVelocityY);
					
					
					if (me.getState('Crouching')==true)
					{
						if (me.getState('2DMeshSpriterAnimForm')!="AnimationCrouching") me.setState('2DMeshSpriterAnimForm',"AnimationCrouching");
					}
					if (me.getState('OnAir')==true)
					{
						if (me.getState('2DMeshSpriterAnimForm')!="AnimationJumping") me.setState('2DMeshSpriterAnimForm',"AnimationJumping");
					}
					else if (actorVelocityX>10 || -10>actorVelocityX)
					{
						if (me.getState('2DMeshSpriterAnimForm')!="AnimationWalking") me.setState('2DMeshSpriterAnimForm',"AnimationWalking");
					}
					else
					{
						if (me.getState('2DMeshSpriterAnimForm')!="AnimationStanding") me.setState('2DMeshSpriterAnimForm',"AnimationStanding");
					}
					
				</Script>
			</Scripts>
		</Action>
		
		<!--Continuous-->
		<Action>
			<Id>WalkLeft</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					var velocityX = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "x");
					//Display.error("MY X VELOCITY IS: " + skata);
					if (velocityX> -me.getState('WalkLimit'))
						me.setState('applyImpulseX',me.getState('WalkSpeed')*(-1));
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>WalkRight</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					var velocityX = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "x");
					//Display.error("MY X VELOCITY IS: " + skata);
					if (me.getState('WalkLimit')>velocityX)
						me.setState('applyImpulseX',me.getState('WalkSpeed'));
				</Script>
			</Scripts>
		</Action>
		
		<!--Instants-->
		<Action>
			<Id>Jump</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('OnAir')==false)
					{
						me.setState('OnAir',true);
						me.setState('applyImpulseY',me.getState('JumpStrength')*(-1));
					}
				/*
				
					var actorVelocityX = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "x");
					var actorVelocityY = Logic.reflectFieldOfField(me.getState('physicsBody'),"velocity", "y");
					
					//Display.error("MY OnAirCounter IS: " + me.getState('OnAirCounter'));
					//if (me.getState('OnAirCounter')>0)
					//{
					if (10>actorVelocityY && actorVelocityY> -10)
					{
						me.setState('applyImpulseY',me.getState('JumpStrength')*(-1));
						//me.setState('OnAirCounter',0);
						//if (me.getState('2DMeshSpriterAnimForm')!="AnimationJumping") me.setState('2DMeshSpriterAnimForm',"AnimationJumping");
					}
					
					*/
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>Crouch</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('OnAir')==false)
					{
						me.setState('Crouching',true);
					}
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>StandUp</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.setState('Crouching',false);
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>StartWalkLeft</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.startAction("WalkLeft");
					if (me.getState('scaleX') > 0) me.setState('scaleX',me.getState('scaleX')*(-1));
					//if (me.getState('2DMeshSpriterAnimForm')!="AnimationWalking") me.setState('2DMeshSpriterAnimForm',"AnimationWalking");
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>EndWalkLeft</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("WalkLeft");
					me.setState('velocityX',0);
					//if (me.getState('2DMeshSpriterAnimForm')!="AnimationStanding") me.setState('2DMeshSpriterAnimForm',"AnimationStanding");
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>StartWalkRight</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.startAction("WalkRight");
					if (me.getState('scaleX') > 0) {} else me.setState('scaleX',me.getState('scaleX')*(-1));
					//if (me.getState('2DMeshSpriterAnimForm')!="AnimationWalking") me.setState('2DMeshSpriterAnimForm',"AnimationWalking");
				</Script>
			</Scripts>
		</Action>
		<Action>
			<Id>EndWalkRight</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("WalkRight");
					me.setState('velocityX',0);
					//if (me.getState('2DMeshSpriterAnimForm')!="AnimationStanding") me.setState('2DMeshSpriterAnimForm',"AnimationStanding");
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>