<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.ace.EventCollection">
	<_States>
		
	</_States>
	
	<_Triggers>
		
	</_Triggers>
	
	<_Actions>

	</_Actions>

	<_Form>
		<_Space>
			<_Entities>
				<!-- Ok good.. so all this is done.. pat on the back
					A) Now.. Add Parameters for both Conditions and Events (a Parameter, can be a class/group name, an expression, a keyboard key, ...)
					keyboard key can also be a triggerTarget
					So, now do Parameters.. add physics, and do some fun stuff here
					Condition.tag[3]=KeyPressed %Kb
					Condition.tag[3]=Collided with %Cn
					Condition.tag[3]=Position Y %Sg than %Ei
					Action.tag[3]=Spawn at x: %Ed and y: %Ed
					
					legend: %Kb keybard, %Cn class name, %Sg sign, %Ei exp Integer, %Ed exp Decimal, %Et exp text, %Eb exp boolean, %Eo exp Object
					
					then move it to the editor
					do  a collision condition too? if i can...so physics is like this..
					maybe the default would be all kinematics, with passable bodies...
					and then u specify if u want it to be real/not kinematic.. and also make it solid and stuff
					but with the default, we get collision detection, which is nice.. yes, i like.. do it..
					
					B) NOW.. before you get stuff to the editor.. a primitive behavior system IS REQUIRED... for easiness, you can ask the user before he adds an object for:
					name...  and taking the chance.. ask him to add behaviors..
					
					C) now add the new ace stuff to the editor.. and you can finally make some games...
					
					
					Small Update:
					a) ***work on engine stuff.. physics***
					b) then maybe some small add behavior thingie
					c) if you've done the behavior thingie, now hash the inheritances.. shouldnt be THAT hard..
					d) then move on to editor event sheets again and go crazy
					CELEBRATE
					e) at some point, see what you'll do with states
					f) at some point, see what you'll do with expressions
					-->
				<Entity extends="std.ace.Event">
					<_Triggers>
						<Trigger extends="std.ace.TriggerBase">
							<Event>PhysicsSensorStart</Event>
							<Target>purple</Target>
						</Trigger>
					</_Triggers>
					<_Form>
						<_Space>
							<_Entities>
								<Entity extends="EST.events.CollidedCondition">
									<_States>
										<_State id="target"><Value>purple</Value></_State>
										<_State id="par1"><Value>red</Value></_State>
									</_States>
								</Entity>
								<Entity extends="EST.events.AddYToEntity">
									<_States>
										<_State id="target"><Value>red</Value></_State>
										<_State id="par1"><Value>10</Value></_State>
									</_States>
								</Entity>
							</_Entities>
						</_Space>
					</_Form>
				</Entity>
	
				<Entity extends="std.ace.Event">
					<_Triggers>
						<Trigger extends="std.ace.TriggerBase">
							<Event>KeyPressed</Event>
							<Target>TargetNone</Target>
							<Parameter>Space</Parameter>
						</Trigger>
					</_Triggers>
					<_Form>
						<_Space>
							<_Entities>
								<Entity extends="EST.events.KeyPressedCondition">
									<_States>
										<_State id="target"><Value>system</Value></_State>
										<_State id="par1"><Value>Space</Value></_State>
									</_States>
								</Entity>
								<Entity extends="EST.events.AddXToEntity">
									<_States>
										<_State id="target"><Value>purple</Value></_State>
										<_State id="par1"><Value>60</Value></_State>
									</_States>
								</Entity>
							</_Entities>
						</_Space>
					</_Form>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
</Entity>