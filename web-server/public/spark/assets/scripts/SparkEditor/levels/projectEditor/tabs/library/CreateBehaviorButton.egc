<Entity extends="std.display.HGroup">
	<_States>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>50</Value></_State>
		<_State id="horizontalAlign"><Value>center</Value></_State>
		<_State id="verticalAlign"><Value>middle</Value></_State>
		<State><Id>behaviorNameInputObj</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>behaviorName</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>behaviorTitle</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>behaviorSize</Id><Type>Integer</Type><Value>0</Value></State>
	</_States>
		
	<Form>
		<Space>
			<Entities>
				<!-- Button -->
				<Entity extends="std.display.Div">
					<Form>
						<Space>
							<Entities>
								<Entity extends="std.display.Image">
									<_States>
										<_State id="width"><Value>29</Value></_State>
										<_State id="height"><Value>29</Value></_State>
										<_State id="horizontalCenter"><Value>0</Value></_State>
										<_State id="verticalCenter"><Value>-1</Value></_State>
										<_State id="src"><Value>libsubcat_create</Value></_State>
										<_State id="touchable"><Value>true</Value></_State>
										<_State id="cursor"><Value>pointer</Value></_State>
									</_States>
									<_Triggers>
										<Trigger>
											<Event>MouseLeftClick</Event>
											<Scripts>
												<Script>
													parent.parentEntity.fa('Create New Behavior');
												</Script>
											</Scripts>
										</Trigger>
									</_Triggers>
								</Entity>
							</Entities>
						</Space>
					</Form>
				</Entity>
				
				<!-- Text 
				<Entity extends="std.display.Text">
					<_States>
						<_State id="width"><Value>170</Value></_State>
						<_State id="height"><Value>20</Value></_State>
						<_State id="fontSize"><Value>17px</Value></_State>
						<_State id="text"><Value>Create New Behavior</Value></_State>
						<_State id="fontColor"><Value>white</Value></_State>
					</_States>
				</Entity>-->
				
				<!-- Temp Input -->
				<Entity extends="std.display.Input">
					<_States>
						<_State id="width"><Value>170</Value></_State>
						<_State id="height"><Value>20</Value></_State>
						<_State id="backgroundColor"><Value>rgb(61, 77, 95)</Value></_State>
						<_State id="border"><Value>0px</Value></_State>
						<_State id="placeholder"><Value>Create New Behavior</Value></_State>
						<_State id="fontSize"><Value>17px</Value></_State>
						<_State id="fontColor"><Value>white</Value></_State>
						<_State id="textIndent"><Value>3px</Value></_State>
						<_State id="acceptsKeyboardInput"><Value>true</Value></_State>
					</_States>
					<_Actions>
						<_Action id="Constructor">
							<_Scripts>
								<Script>
									parent.set('behaviorNameInputObj', me);
								</Script>
							</_Scripts>
						</_Action>
					</_Actions>
						
					<_Triggers>
						<Trigger>
							<Event>KeyPressedLocal</Event>
							<Scripts>
								<Script>
									var eventObjectKeyPress = me.getState('eventObjectKeyPress');
									
									if (eventObjectKeyPress.keyCode==13 || eventObjectKeyPress.keyCode==10) //both are ENTER key
										parent.fa('Create New Behavior');
								</Script>
							</Scripts>
						</Trigger>
					</_Triggers>
				</Entity>
			</Entities>
		</Space>
	</Form>
	
	<_Actions>
		<Action>
			<Id>Create New Behavior</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					var l_nameInput = me.s('behaviorNameInputObj');
					
					if (l_nameInput.s('text').length>3)
					{
						//Very temporary.. Creates a new blank behavior.. to use whenever u want..
						
						//Prepare File
						//var l_behaviorFile = Logic.xml_createDocument();
						
						//Create Xml
						var l_blankBehaviorXml = Logic.xml_createElement("Entity");
						
						//Create Xml
						/*
						var l_blankBehaviorXmlString = '<Entity>
							<_States>
								
							</_States>
							
							<_Actions>
								<_Action id="Constructor">
									<_Scripts>
										<Script>
											//Enter code here...
										</Script>
									</_Scripts>
								</_Action>
							</_Actions>
						</Entity>';
						*/
						
						var l_blankBehaviorXmlString = Logic.xmlToString(l_blankBehaviorXml);
						
						var l_behaviorName = l_nameInput.s('text')+".egc";
						var l_behaviorTitle = l_nameInput.s('text');
						
						
						//Upload the file from the file service
						Comms.file_sendFileRequest(l_blankBehaviorXmlString, {name: l_behaviorName, size: l_blankBehaviorXmlString.length, user: e('Project Editor').s('User_DBO').name, dir: e('Project Editor').s('Project_DBO').name+'/mylib/behaviors'} , "onFileUploaded", me);
						
						me.set('behaviorName', l_behaviorName);
						me.set('behaviorTitle', l_behaviorTitle);
						me.set('behaviorSize', l_blankBehaviorXmlString.length);
					}
					else
					{
						alert('Minimum Behavior name is 3 characters!');
					}
				]]></Script>
			</Scripts>
		</Action>
	</_Actions>
		
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Parameter>onFileUploaded</Parameter>
			<Scripts>
				<Script>
					var data = Comms.file_getSendFileRequestData("onFileUploaded").shift();
					
					Display.error("File Transfer Progress: " + data.progress + ", percent: " + data.progressPercent);
					
					//me.getState('progressBar').setState('height',data.progressPercent+'%');
					
					if (data.progress==1)
					{
						
						//meta
						var l_meta = {
							master: true,
							createdWith: "Raw SML",
							target: {},
							createdForProject: e('Project Editor').s('Project_DBO').name,
							type: "Custom",
							subType: "2D",
							hidden: false,
							thumbnail: {
								embeddedUrl: "thumbnail_behavior_custom"
							},
							tags: []
						};
						//ADD META TO REQUEST
						
						Comms.request("assets.uploadHandler.uploadAsset", {fileName: me.s('behaviorName'), fileSize: me.s('behaviorSize'), assetTitle: me.s('behaviorTitle'), dir: 'mylib/behaviors', type: 'script', componentType: 'Behavior', meta: l_meta, tags: ""}, "onAssetCreated" , me);
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Parameter>onAssetCreated</Parameter>
			<Scripts>
				<Script>
					var data = Comms.getRequestData('onAssetCreated');
					
					if (data.code=="success")
					{
						var asset = data.asset;
						
						Display.error("Success creating asset: " + asset.name);
						
						//Add to our local DB
						asset._inModules=[];
						e('Project Editor').fa('Insert Asset', {asset: asset} );
						
						//deeh.. sucks
						e('Editor Library Collections').s('collectionsHash2').get('Behaviors').sa('AddAssetsDB', {assets:[asset]});
						return;
						//for now, just change the icon here
						var username = Logic.getEntityByName('Spark Editor').getState('username');
					
						//Thumbnail
						var imageObject = me.getState('imageObject');
						
						//If Asset is Image
						if (asset.type=="image")
						{
							imageObject.setState('src','/assets/' + username + '/thumbnail/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension);
						}
						//If Asset is Sound
						else if (asset.type=="sound")
						{
							imageObject.setState('src',"thumb_" + asset.componentType);
						}
						
						//Text //ONLY IF ITEM IS captionType enabled...
						//var objText = me.getState('obj_text');
						//objText.setState('opacity','1');
					
						//Remove Progress Bar
						var objProgressBar = me.getState('progressBar');
						me.removeChild(objProgressBar);
						//objProgressBar.setState('opacity','0');
						
						//Clear Border
						me.setState('border','0px');
						
						//Store asset db object
						me.setState('asset',asset);
						
						//Rename me?
						me.setState('name',"libraryAsset." + asset.title); //whatever.. never using this anyway.. jsut for fun..
					}
					else
					{
						Display.error("Error uploading asset. Code: " + data.code);
						//remove uploading item here (me) or something..
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>