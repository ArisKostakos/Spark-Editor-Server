<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.HGroup">
	<_States>
		<_State id="name"><Value>Editor Library Collections</Value></_State>
		<_State id="gap"><Value>0</Value></_State>
		<_State id="top"><Value>67</Value></_State>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>100%</Value></_State>
		<State><Id>selectedCategoryObject</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>collectionsHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>collectionsHash2</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>importTypesHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>importTypeToAssetTypeHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>importTypeToComponentTypeHash</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<!-- Constructor -->
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					//Create hash: File extension to Import Type
					var importTypesHash = new StringMap();
					
					importTypesHash.set('png','image');
					importTypesHash.set('jpg','image');
					importTypesHash.set('scml','spriter');
					importTypesHash.set('plist','spritesheet');
					importTypesHash.set('json','adobeAnimation');
					importTypesHash.set('ogg','sound');
					importTypesHash.set('mp3','sound');
					importTypesHash.set('m4a','sound');
					importTypesHash.set('mp4','video');
					importTypesHash.set('egc','data');//behavior?
					
					me.setState('importTypesHash',importTypesHash);
					
					
					//Create hash: Import Type to Asset Type
					var importTypeToAssetTypeHash = new StringMap();
					
					importTypeToAssetTypeHash.set('image','image');
					importTypeToAssetTypeHash.set('sound','sound');
					importTypeToAssetTypeHash.set('spriter','data');
					importTypeToAssetTypeHash.set('spritesheet','data');
					importTypeToAssetTypeHash.set('adobeAnimation','data');
					
					me.setState('importTypeToAssetTypeHash',importTypeToAssetTypeHash);
					
					//Create hash: Import Type to Component Type
					var importTypeToComponentTypeHash = new StringMap();
					
					importTypeToComponentTypeHash.set('image','Image');
					importTypeToComponentTypeHash.set('sound','Sound');
					importTypeToComponentTypeHash.set('spriter','Spriter');
					importTypeToComponentTypeHash.set('spritesheet','Spritesheet');
					importTypeToComponentTypeHash.set('adobeAnimation','AdobeAnimation');
					
					me.setState('importTypeToComponentTypeHash',importTypeToComponentTypeHash);
					
					//maybe add slave files here (eg, for spriter, the slave files are all gonna be images.. etc..) for both assetType and componentType ofc.. For now it happens in LibraryItemMultiUpload:(
				</Script>
			</_Scripts>
		</_Action>
		
		<!-- ImportRequest (From Files)-->
		<Action>
			<Id>ImportRequest</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					me.stopAction("ImportRequest");
					
					//Get Hashes
					var collectionsHash = me.s('collectionsHash');
					var importTypesHash = me.s('importTypesHash');
					var importTypeToAssetTypeHash = me.s('importTypeToAssetTypeHash');
					var importTypeToComponentTypeHash = me.s('importTypeToComponentTypeHash');
					
					//Get Files
					var files = it.s('files');
					
					//So.. tricky part.. If files are more than 1, then it's either ONE asset with lots of dependancies, or lots of different singular assets
					var l_importTypeHasDependancies=false;
					var l_masterFile;
					var l_masterFileImportType;
					
					for (file of files) //the var file will be leaked outside, and we use it later.. lol
					{
						var fileName = file.name.substring(0,file.name.lastIndexOf("."));
						var fileExtension = file.name.substring(file.name.lastIndexOf(".") + 1, file.name.length);
					
						//Determine Import Type
						var importType = importTypesHash.get(fileExtension);
						
						//here goes
						if (importType=='spriter' || importType=='spritesheet' || importType=='adobeAnimation') //things with dependancies
						{
							l_importTypeHasDependancies=true;
							l_masterFile=file;
							l_masterFileImportType=importType;
							break; //by breaking, we make sure importType has this file stored
						}
					}
					
					//Check if we have multiple files selected, and it's not a type with dependancies
					if (l_importTypeHasDependancies==false && files.length>1)
					{
						Display.warn("Multiple Files are not supported yet. add them one at a time. Sorry..");
						alert("Multiple Files are not supported yet. Add them one at a time. Sorry..");
						return;
					}
					
					//Check if we have multiple files selected, and it's not a type with dependancies
					if (l_importTypeHasDependancies==true && files.length<=1)
					{
						Display.warn("This File requires dependancies. Select all of them and try again.");
						alert("This File requires dependancies. Select all of them and try again.");
						return;
					}
					
					//Check which of are collections would be interested in this importType
					if (importType==null)
					{
						Display.error("ERROR: Could not deduce importType from given file extension!");
					}
					else
					{
						Display.de('ImportRequest: ' + fileName + ", of size: " + file.size + ", with extension: " + fileExtension + ", and importType: " + importType);
						
						var collectionsFound = [];
						var iterator = collectionsHash.iterator();
						while (iterator.hasNext())
						{
							var collection = iterator.next();
							for (collectionImportType of collection.s('importTypes'))
								if (collectionImportType==importType)
								{
									collectionsFound.push(collection);
									break; //this should break the for, not the while
								}
						}
						
						if (collectionsFound.length==0)
						{
							Display.error("ERROR: No collection likes this import type!");
						}
						else
						{
							if (collectionsFound.length>1)
							{
								Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
							}
							else
							{
								Display.error("NOTE: Found " + collectionsFound.length + " collections that like this type!");
								
								//NOTE: here's how I'm going to tackle uploading for now..
								//Collections (this entity) is responsible for figuring out ComponentType, Tags, and uploading of the asset
								//It figures these things out with three ways..
								//a) it checks out the library collections currently added to this project
								//b) it pops up a dialog to ask the user
								//c) it makes some hard decisions itself (i will rely mostly on this for now)
								
								//For now, uses (c), if importType is 'image' i will assign componentType 'Image' and tags, none, other than project for first tag ofc..
								
								//Username
								var username = Logic.getEntityByName('Spark Editor').getState('username');
								
								//Unique Upload Id so upload file entity can hear for Server callback functions
								var uploadId = Std.string(Std.random(999999));
								
								if (l_importTypeHasDependancies==true)
								{
									Display.de("FOUND IMPORT TYPE: " + importType + ", shit is about to get real");
									var l_masterName = fileName;//e('Spark Editor: Library Search Input').s('text'); //u know what i mean..
									
									//Upload all the files here
									for (file of files)
										Comms.file_sendFileRequest(file, {name: file.name, size: file.size, user: username, dir: e('Project Editor').s('Project_DBO').name+'/'+l_masterName} , uploadId);
										
										
									//Send UploadItem to the collection
									collectionsFound[0].sa('UploadFileWithDependancies', { files:files, masterFile:l_masterFile, masterName:l_masterName, masterComponentType:importTypeToComponentTypeHash.get(l_masterFileImportType), masterAssetType:importTypeToAssetTypeHash.get(l_masterFileImportType), masterTags:'', uploadId:uploadId } );
								}
								else
								{
									//Upload the file from the file service
									Comms.file_sendFileRequest(file, {name: file.name, size: file.size, user: username, dir: e('Project Editor').s('Project_DBO').name} , uploadId);
									
									//Send UploadItem to the collection
									collectionsFound[0].getAction('UploadFile').setState('file',file);
									collectionsFound[0].getAction('UploadFile').setState('componentType',importTypeToComponentTypeHash.get(importType));
									collectionsFound[0].getAction('UploadFile').setState('assetType',importTypeToAssetTypeHash.get(importType));
									collectionsFound[0].getAction('UploadFile').setState('tags',''); //later, figure out tags too
									collectionsFound[0].getAction('UploadFile').setState('uploadId',uploadId);
									collectionsFound[0].startAction('UploadFile');
								}
							}
						}
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>files</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<!-- ImportRequestAssetDb-->
		<Action>
			<Id>ImportRequestAssetsDb</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("ImportRequestAssetsDb");
					//Get Hashes
					var collectionsHash = me.getState('collectionsHash');
					//var importTypesHash = me.getState('importTypesHash');
					
					//So Normally, I find an appropriate Library Collection by checking the library collection filters, against the asset db..
					//But here comes a simplified version.. again..
					
					var assets = me.getAction('ImportRequestAssetsDb').getState('assets');
					
					//Display.error("ImportRequestAssetDbImportRequestAssetDb: length: " + assets.length);
					
					
					var imageAssets = [];
					var soundAssets = [];
					var classAssets = [];
					var behaviorAssets = [];
					var dataAssets = [];
					
					//Again, here comes a moronic simplified version to replace the advanced way of checking every asset against all collection's filtering system..
					for (asset of assets)
					{
						if (asset.type=="image")
						{
							imageAssets.push(asset);
							//Display.error("Yeah boyyy image: " + asset.name);
						}
						else if (asset.type=="sound")
						{
							soundAssets.push(asset);
							//Display.error("Yeah boyyy sound: " + asset.name);
						}
						else if (asset.type=="script")
						{
							if (asset.meta!=null)
							{
								if (asset.meta.master==true && asset.meta.hidden==false)
								{
									if (asset.componentType=="Class")
										classAssets.push(asset);
									else if (asset.componentType=="Behavior")
										behaviorAssets.push(asset);
								}
							}
						}
						else if (asset.type=="data")
						{
							dataAssets.push(asset);
						}
					}
					//Display.error("imageAssets: length: " + imageAssets.length);
					
					
					//So.. this... not too proud :P..
					if (imageAssets.length>0)
					{
						//Determine Import Type
						var importType = 'image'; //find collections that accept image importTypes... later on, do the hash legwork
						
						//Check which of are collections would be interested in this importType
						if (importType==null)
						{
							Display.error("ERROR: Could not deduce importType from given file extension!");
						}
						else
						{
							var collectionsFound = [];
							var itr = collectionsHash.iterator();
							while (itr.hasNext())
							{
								var collection = itr.next();
								if (collection.getState('importTypes')[0]==importType)
									collectionsFound.push(collection);
							}
							
							if (collectionsFound.length==0)
							{
								Display.error("ERROR: No collection likes this import type!");
							}
							else
							{
								if (collectionsFound.length>1)
								{
									Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
								}
								else
								{
									//Send asset to the collection
									collectionsFound[0].getAction('AddAssetsDB').setState('assets',imageAssets);
									collectionsFound[0].startAction('AddAssetsDB');
								}
							}
						}
					}
					
					if (soundAssets.length>0)
					{
						//Determine Import Type
						var importType = 'sound'; //find collections that accept image importTypes... later on, do the hash legwork
						
						//Check which of are collections would be interested in this importType
						if (importType==null)
						{
							Display.error("ERROR: Could not deduce importType from given file extension!");
						}
						else
						{
							var collectionsFound = [];
							var itr = collectionsHash.iterator();
							while (itr.hasNext())
							{
								var collection = itr.next();
								if (collection.getState('importTypes')[0]==importType)
									collectionsFound.push(collection);
							}
							
							if (collectionsFound.length==0)
							{
								Display.error("ERROR: No collection likes this import type!");
							}
							else
							{
								if (collectionsFound.length>1)
								{
									Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
								}
								else
								{
									//Send asset to the collection
									collectionsFound[0].getAction('AddAssetsDB').setState('assets',soundAssets);
									collectionsFound[0].startAction('AddAssetsDB');
								}
							}
						}
					}
					
					if (classAssets.length>0)
					{
						//Determine Import Type
						var importType = 'class'; //find collections that accept image importTypes... later on, do the hash legwork
						
						//Check which of are collections would be interested in this importType
						if (importType==null)
						{
							Display.error("ERROR: Could not deduce importType from given file extension!");
						}
						else
						{
							var collectionsFound = [];
							var itr = collectionsHash.iterator();
							while (itr.hasNext())
							{
								var collection = itr.next();
								if (collection.getState('importTypes')[0]==importType)
									collectionsFound.push(collection);
							}
							
							if (collectionsFound.length==0)
							{
								Display.error("ERROR: No collection likes this import type!");
							}
							else
							{
								if (collectionsFound.length>1)
								{
									Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
								}
								else
								{
									//Send asset to the collection
									collectionsFound[0].getAction('AddAssetsDB').setState('assets',classAssets);
									collectionsFound[0].startAction('AddAssetsDB');
								}
							}
						}
					}
					
					if (behaviorAssets.length>0)
					{
						//Determine Import Type
						var importType = 'behavior'; //find collections that accept image importTypes... later on, do the hash legwork
						
						//Check which of are collections would be interested in this importType
						if (importType==null)
						{
							Display.error("ERROR: Could not deduce importType from given file extension!");
						}
						else
						{
							var collectionsFound = [];
							var itr = collectionsHash.iterator();
							while (itr.hasNext())
							{
								var collection = itr.next();
								if (collection.getState('importTypes')[0]==importType)
									collectionsFound.push(collection);
							}
							
							if (collectionsFound.length==0)
							{
								Display.error("ERROR: No collection likes this import type!");
							}
							else
							{
								if (collectionsFound.length>1)
								{
									Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
								}
								else
								{
									//Send asset to the collection
									collectionsFound[0].getAction('AddAssetsDB').setState('assets',behaviorAssets);
									collectionsFound[0].startAction('AddAssetsDB');
								}
							}
						}
					}
					
					if (dataAssets.length>0)
					{
						//Determine Import Type
						var importType = 'spriter'; //find collections that accept image importTypes... later on, do the hash legwork
						
						//Check which of are collections would be interested in this importType
						if (importType==null)
						{
							Display.error("ERROR: Could not deduce importType from given file extension!");
						}
						else
						{
							var collectionsFound = [];
							var itr = collectionsHash.iterator();
							while (itr.hasNext())
							{
								var collection = itr.next();
								if (collection.getState('importTypes')[0]==importType)
									collectionsFound.push(collection);
							}
							
							if (collectionsFound.length==0)
							{
								Display.error("ERROR: No collection likes this import type!");
							}
							else
							{
								if (collectionsFound.length>1)
								{
									Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
								}
								else
								{
									//Send asset to the collection
									collectionsFound[0].getAction('AddAssetsDB').setState('assets',dataAssets);
									collectionsFound[0].startAction('AddAssetsDB');
								}
							}
						}
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>assets</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		
		<!-- SelectCategory -->
		<Action>
			<Id>SelectCategory</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					
					
					var oldSelected = me.s('selectedCategoryObject');
					var newSelected = it.s('selectionRequest');
					var collectionsHash = me.getState('collectionsHash');
					
					if (oldSelected!=newSelected)
					{
						if (oldSelected!=null)
						{
							oldSelected.startAction("Unselected");
							collectionsHash.get(oldSelected).setState('visibility','hidden');
						}
						
						if (newSelected!=null)
						{
							newSelected.startAction("Selected");
							collectionsHash.get(newSelected).setState('visibility','visible');
						}
							
						me.setState('selectedCategoryObject', newSelected);
					}
					
					me.stopAction("SelectCategory");
				</Script>
			</Scripts>
			<States>
				<State><Id>selectionRequest</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
	
	<Form>
		<Space>
			<Entities>
				<!-- Categories -->
				<Entity extends="std.display.Div">
					<_States>
						<_State id="name"><Value>Editor Library Collections Buttons Container</Value></_State>
						<_State id="gap"><Value>0</Value></_State><!--3-->
						<_State id="width"><Value>132</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
						<_State id="backgroundColor"><Value>rgb(25,37,47)</Value></_State>
						<_State id="layout"><Value>Vertical</Value></_State>
						<_State id="horizontalAlign"><Value>center</Value></_State>
					</_States>
					<Form><Space><Entities>

					</Entities></Space></Form>
				</Entity>
				
				<!-- Sub-Categories -->
				<Entity extends="std.display.Div"> <!-- Group-->
					<_States>
						<_State id="name"><Value>Editor Library Collections Panels Container</Value></_State>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
						<!--<_State id="overflow"><Value>hidden</Value></_State>-->
					</_States>
					<Form><Space><Entities>
					
					</Entities></Space></Form>
				</Entity>
			</Entities>
		</Space>
	</Form>
</Entity>