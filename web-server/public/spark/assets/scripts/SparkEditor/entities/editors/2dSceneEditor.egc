<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.SceneEditor">
	<_Actions>
		<_Action id="AssetLoaded">
			<_Scripts>
				<Script>
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
					
					//PURE XML
					var pureXml = me.getState('xmlPure');
					
					//remove Form
					var formXml = firstElementNamed(pureXml,'Form');
					if (formXml!=null)
						pureXml.removeChild(formXml);
						
					//EDIT XML
					var editXml = me.getState('xmlEdit');
					
					//remove Form
					formXml = firstElementNamed(editXml,'Form');
					if (formXml!=null)
						editXml.removeChild(formXml);
						
					//remove _States
					var statesXml = firstElementNamed(editXml,'_States');
					if (statesXml!=null)
						editXml.removeChild(statesXml);
					
					//if no [extends], create it
					var extendsXml = firstElementNamed(editXml,'Extends');
					if (extendsXml==null)
					{
						extendsXml = Xml.createElement('Extends');
						editXml.insertChild(extendsXml,0);
					}
					
					//add [entity] Scene2DEdit in [extends]
					var sceneEditXml = Xml.createElement('Entity');
					sceneEditXml.set('extends','SparkEditor.entities.editors.behaviors.Scene2DEdit');
					extendsXml.addChild(sceneEditXml);

					//Instantiate
					var editScene = Logic.gameFactory.createGameEntityByXml(editXml);
					me.setState('target',editScene);
					
					//give it snapshot xml
					editScene.setState('xmlData',pureXml);
					/*
					//check for [form.space.entities]
					if (formXml!=null)
					{
						var formSpaceXml = firstElementNamed(formXml,'Space');
						if (formSpaceXml!=null)
						{
							var formSpaceEntitiesXml = firstElementNamed(formSpaceXml,'Entities');
							if (formSpaceEntitiesXml!=null)
							{
								var entities = formSpaceEntitiesXml.elementsNamed('Entity');
								//for each [entity] in [form.space.entities]
								while (entities.hasNext())
								{
									var entityChildXml = entities.next();
									//Display.error("Found child: " + entityChildXml.get('extends'));
									//take snapshot
									var pureChildXml = Xml.parse(entityChildXml.toString()).firstElement();
									//Display.error("Displaying Child: " + pureChildXml.toString());
									
									//Remove [extends]
									var childExtendsXml = firstElementNamed(entityChildXml,'Extends');
									if (childExtendsXml!=null)
										entityChildXml.removeChild(childExtendsXml);
										
									//if no [extends], create it
									//var childExtendsXml = firstElementNamed(entityChildXml,'Extends');
									//if (childExtendsXml==null)
									//{
										childExtendsXml = Xml.createElement('Extends');
										entityChildXml.insertChild(childExtendsXml,0);
									//}
									
									
									//add [entity] Sprite2DEdit in [extends]
									var sceneEditXml = Xml.createElement('Entity');
									sceneEditXml.set('extends','SparkEditor.entities.editors.behaviors.Sprite2DEdit');
									childExtendsXml.addChild(sceneEditXml);
									
									//instantiate
									var isSpriter = (entityChildXml.get('extends').substr(entityChildXml.get('extends').lastIndexOf('.')+1)=="Spriter2D");
									var childEntity = Logic.gameFactory.createGameEntityByXml(entityChildXml);
									
									//add to scene
									if (childEntity.getState('name')=="Background") //background entity
									{
										//add to SceneBoundsDisplay edit object
										Logic.getEntityByName('SceneBoundsDisplay').addChild(childEntity);
										
										//Store the reference
										editScene.setState('backgroundEntity',childEntity);
										
										//Untouchable
										childEntity.setState('touchable',false);
										
										//Create a couple more backgrounds to fill the white bounds rect
										var backgroundWidth = Logic.reflectField(Assets.getTexture(childEntity.gameForm.getState('ImageUrl')), 'width')-2; //-2 is to prevent some white gaps betweeen backgrounds
										
										var multipleBackgroundsCount = Math.ceil(editScene.getState('boundsWidth')/backgroundWidth);
										var backgroundsCreated = 1;
										
										//Display.error("we need " + multipleBackgroundsCount + " Backgrounds!");
										
										while (multipleBackgroundsCount>backgroundsCreated)
										{
											var extraBackground = Logic.gameFactory.createGameEntityByXml(entityChildXml);
											extraBackground.setState('spaceX',extraBackground.getState('spaceX')+backgroundWidth*backgroundsCreated);
											Logic.getEntityByName('SceneBoundsDisplay').addChild(extraBackground);
											
											//Untouchable
											extraBackground.setState('touchable',false);
											
											backgroundsCreated+=1;
											//Display.error("Created a background!");
										}
									}
									else //normal entity
									{
										//add to scene
										editScene.addChild(childEntity);
									}
									
									
									//Grid Lock
									if (isSpriter) childEntity.setState('spriteGridLock',8); //1
									
									//give it snapshot xml
									childEntity.setState('xmlData',pureChildXml);
								}
							}
						}
					}
					*/
						
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(editScene);
					
					//Assign it to view
					Logic.getEntityByName('Main View 2D').setState('scene',editScene);
					
					
					//Display.error('PURE: ' + pureXml.toString());
					//Display.error('EDIT: ' + editXml.toString());
					//Display.error('FORM: ' + formXml.toString());
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Save</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Save");
					
					//Create Save File Xml
					var sceneFileXml = Xml.createDocument();
					
					//Get Scene
					var scene = me.getState('target');
					
					//Add Scene's Xml to Doc
					var sceneXml = Xml.parse(scene.getState('xmlData').toString()).firstElement(); //clone it
					sceneFileXml.addChild(sceneXml);
					
					//Create [Form.Space.Entities]
					var formXml = Xml.createElement('Form');
					sceneXml.addChild(formXml);
					var spaceXml = Xml.createElement('Space');
					formXml.addChild(spaceXml);
					var entitiesXml = Xml.createElement('Entities');
					spaceXml.addChild(entitiesXml);
					
					//First, add background entity
					if (scene.getState('backgroundEntity')!=null)
						entitiesXml.addChild(scene.getState('backgroundEntity').getState('xmlData'));
					
					//For Scene's Children
					for (child in scene.getChildren())
					{
						if (child.getState('sceneEditObject')==null)
						{
							entitiesXml.addChild(child.getState('xmlData'));
						}
					}
					
					var finalString = sceneFileXml.toString();
					Display.error("sceneXml: " + finalString);
					
					var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
					Comms.file_sendFileRequest(finalString, {name: "updatedAsset", size: finalString.length, user: connectedUserName} , "updatedAsset");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Run</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Run");
					Display.error("RUNNING");
					//Create Save File Xml
					//var sceneFileXml = Xml.createDocument();
					
					//Deselect All Entities in Scene Edit
					var leveleditor2d = Logic.getEntityByName('Level Editor 2D Scene');
					leveleditor2d.getAction('EntityClicked').setState('entity',null);
					leveleditor2d.startAction('EntityClicked');
					
					//Get Scene
					var scene = me.getState('target');
					Display.error("DEBUG LOG: Run: 11111111");
					//Add Scene's Xml to Doc
					
					var sceneXml = Xml.parse(Logic.xmlToString(scene.getState('xmlData'))).firstElement(); //clone it
					//var sceneXml = Xml.parse(scene.getState('xmlData').toString()); //clone it
					
					//Display.error(sceneXml);
					//sceneFileXml.addChild(sceneXml);
					Display.error("DEBUG LOG: Run: 2222222222");
					//Create [Form.Space.Entities]
					var formXml = Xml.createElement('Form');
					sceneXml.addChild(formXml);
					var spaceXml = Xml.createElement('Space');
					formXml.addChild(spaceXml);
					var entitiesXml = Xml.createElement('Entities');
					spaceXml.addChild(entitiesXml);
					Display.error("DEBUG LOG: Run: 3333333333");
					
					//First, add background entity
					if (scene.getState('backgroundEntity')!=null)
						entitiesXml.addChild(scene.getState('backgroundEntity').getState('xmlData'));
					
					//For Scene's Children
					for (child in scene.getChildren())
					{
						//if (child.getState('name')!='SceneBackground' && child.getState('name')!='tempScreenStage')
						if (child.getState('sceneEditObject')==null)
						{
							entitiesXml.addChild(child.getState('xmlData'));
						}
					}
					Display.error("DEBUG LOG: Run: 44444444444");
					//var finalString = sceneFileXml.toString();
					//Display.error("sceneXml: " + sceneXml);
					
					//var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					
					//Comms.file_sendFileRequest(finalString, {name: "updatedAsset", size: finalString.length, user: connectedUserName} , "updatedAsset");
					
					var finalString = Logic.xmlToString(sceneXml);
					var sceneBakedXml = Xml.parse(finalString).firstElement(); //bake it?
					
					//Instantiate
					var editScene = Logic.gameFactory.createGameEntityByXml(sceneBakedXml);   //(sceneBakedXml);
					Display.error("DEBUG LOG: Run: 5555555555");
					me.setState('sceneRun',editScene);
					
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(editScene);
					Display.error("DEBUG LOG: Run: 6666666666666");
					//Assign it to view
					Logic.getEntityByName('Main View 2D Run').setState('scene',editScene);
					Logic.getEntityByName('Main View 2D Run').setState('visible',true);
					
					//Init Run View's Camera (in the future, this needs to happen probably on the scene code or camera code..
					//so camera is inited even if game doesn't run from the editor.. can't do it yet, cause we don't create a new camera yet, just use the same one
					//from the editor's..
					Logic.getEntityByName('Editor Scene Run Camera').startAction('Camera Init');
					
					//Hide Edit View
					Logic.getEntityByName('Main View 2D').setState('visible',false);
					Display.error("DEBUG LOG: Run: 77777777777777");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Stop</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Stop");
					
					Display.error("STOPPING");
					
					//set scene2dEdit to view
					Logic.getEntityByName('Main View 2D').setState('visible',true);
					
					//Hide Run View
					Logic.getEntityByName('Main View 2D Run').setState('visible',false);
					
					//destroy instantiated scene above
					//todo: more things than removing it from space is obviously required!
					Logic.getEntityByName('Main Space').removeChild(me.getState('sceneRun'));
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>ImportAsset</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("ImportAsset");
					
					Display.error("ImportAsset");
					
					
				</Script>
			</Scripts>
			<States>
				<State><Id>mediaAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>scriptAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>type</Id><Type>Text</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData("updatedAsset")!=null)
					{
						var data = Comms.file_getSendFileRequestData("updatedAsset");
						
						Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
						
						if (data.progress==1)
						{
							Display.error("FILE: " + 'File Uploaded!');
							
							//assetUserName
							var assetUserName = me.getState('assetUserName');

							//assetType
							var assetType = me.getState('assetType');

							//assetName
							var assetName = me.getState('assetName');

							//incomingFileName
							var incomingFileName = "updatedAsset";
	
	
							Comms.request("assets.uploadHandler.updateAssetFile", {assetUserName: assetUserName, assetType:assetType, assetName:assetName, incomingFileName:incomingFileName}, "updatedAsset");
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Scripts>
				<Script>
					if (Comms.getRequestData("updatedAsset")!=null)
					{
						var data = Comms.getRequestData("updatedAsset");
						
						if (data.code=="success")
						{
							Display.error('Updated Asset fucking success!');
							Logic.getEntityByName('Editor Output').setState('text','Project Saved Successfully!');
						}
						else
						{
							Display.error('Updated Asset error!');
							Logic.getEntityByName('Editor Output').setState('text','Error Saving Project :(');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	<_States>
		<_State id="name"><Value>2d Scene Editor</Value></_State>
	</_States>
</Entity>