<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.SceneEditor">
	<_States>
		<_State id="name"><Value>2d Scene Editor</Value></_State>
	</_States>
		
	<_Actions>
		<_Action id="AssetLoaded">
			<_Scripts>
				<Script>
					//Import XML
					var importXml = it.getState('importXml');
					
					me.getAction('Import Xml').setState('importXml',importXml);
					me.forceAction('Import Xml');
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Import Xml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//create an SceneEdit
					var importXml = it.getState('importXml');
					var tempImportXml = Logic.xml_clone(importXml);
					Logic.xml_entity_removeNode(tempImportXml, "Form");
					Logic.xml_entity_addExtend(tempImportXml, {ext: 'SparkEditor.entities.editors.behaviors.Scene2DEdit'});
					
					Display.error("SCENE XML: " + Logic.xmlToString(tempImportXml));
					var editScene = Logic.gameFactory.createGameEntityByXml(tempImportXml);
					me.setState('target',editScene);
					
					
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(editScene);
					
					//Assign it to view
					Logic.getEntityByName('Main View 2D').setState('scene',editScene);
					
					//start import for SceneEdit
					editScene.getAction('Import Xml').setState('importXml',importXml);
					editScene.forceAction('Import Xml');
				</Script>
			</Scripts>
			<States>
				<State><Id>importXml</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>Save</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Save");
					
					//Create Save File Xml
					var sceneFileXml = Xml.createDocument();
					
					//Export Event Sheet
					me.forceAction("Export Xml");
					var ecExport = me.getState('xmlExport');
					
					//Add scene's Xml to Doc
					sceneFileXml.addChild(ecExport);
					
					//Save to String
					var finalString = Logic.xmlToString(sceneFileXml);
					Display.error("sceneFileXml: " + finalString);
					
					//Send
					var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
					Comms.file_sendFileRequest(finalString, {name: "updatedAsset", size: finalString.length, user: connectedUserName} , "updatedAsset");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Export Xml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Get Scene
					var scene = me.getState('target');
					
					//Create new Xml
					var sceneXml = Logic.xml_createElementAttr("Entity", "extends", "std.display.Scene2DPhysics"); //Should really keep DB asset for scene, and get this from there
					
					//Over here, save States, such as ClassObjects Count
					Logic.xml_entity_addMState(sceneXml, {id:"name", value: 'Main Scene' },true);
					Logic.xml_entity_addMState(sceneXml, {id:"classObjectsCount", value: Std.string(scene.getState('classObjectsCount')) },true);
					
					//Create entities node
					var entities = Logic.xml_createElements(['Form','Space','Entities']);
					sceneXml.addChild(entities.first);
					
					//First, add background entity
					//if (scene.getState('backgroundEntity')!=null)
					//	entitiesXml.addChild(scene.getState('backgroundEntity').getState('xmlData'));
					
					//For Scene's Children
					for (sceneChild of scene.getChildren())
					{
						if (sceneChild.getState('sceneEditObject')==null)
						{
							sceneChild.forceAction('Export Xml');
							entities.last.addChild(sceneChild.getState('xmlExport'));
						}
					}
					
					
					//Store
					me.setState('xmlExport',sceneXml);
					
					//Display.error("SUCCESS: " + Logic.xmlToString(sceneXml));
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Run</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Run");
					Display.error("RUNNING");
					
					//Deselect All Entities in Scene Edit
					var leveleditor2d = Logic.getEntityByName('Level Editor 2D Scene');
					leveleditor2d.getAction('EntityClicked').setState('entity',null);
					leveleditor2d.startAction('EntityClicked');
					
					//Export Xml
					me.forceAction("Export Xml");
					var ecExport = me.getState('xmlExport');
					
					//Instantiate
					var sceneRun = Logic.gameFactory.createGameEntityByXml(ecExport);
					
					me.setState('sceneRun',sceneRun);
					
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(sceneRun);
					
					//Assign it to view
					Logic.getEntityByName('Main View 2D Run').setState('scene',sceneRun);
					Logic.getEntityByName('Main View 2D Run').setState('visible',true);
					
					//Init Run View's Camera (in the future, this needs to happen probably on the scene code or camera code..
					//so camera is inited even if game doesn't run from the editor.. can't do it yet, cause we don't create a new camera yet, just use the same one
					//from the editor's..
					Logic.getEntityByName('Editor Scene Run Camera').startAction('Camera Init');
					
					//Hide Edit View
					Logic.getEntityByName('Main View 2D').setState('visible',false);
				</Script>
			</Scripts>
		</Action>
		
		
		<Action>
			<Id>Stop</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Stop");
					
					Display.error("STOPPING");
					
					//set scene2dEdit to view
					Logic.getEntityByName('Main View 2D').setState('visible',true);
					
					//Hide Run View
					Logic.getEntityByName('Main View 2D Run').setState('visible',false);
					
					//destroy instantiated scene above
					//todo: more things than removing it from space is obviously required!
					Logic.getEntityByName('Main Space').removeChild(me.getState('sceneRun'));
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>ImportAsset</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("ImportAsset");
					
					Display.error("ImportAsset");
					
					
				</Script>
			</Scripts>
			<States>
				<State><Id>mediaAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>scriptAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>type</Id><Type>Text</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData("updatedAsset")!=null)
					{
						var data = Comms.file_getSendFileRequestData("updatedAsset");
						
						Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
						
						if (data.progress==1)
						{
							Display.error("FILE: " + 'File Uploaded!');
							
							//assetUserName
							var assetUserName = me.getState('assetUserName');

							//assetType
							var assetType = me.getState('assetType');

							//assetName
							var assetName = me.getState('assetName');

							//incomingFileName
							var incomingFileName = "updatedAsset";
	
	
							Comms.request("assets.uploadHandler.updateAssetFile", {assetUserName: assetUserName, assetType:assetType, assetName:assetName, incomingFileName:incomingFileName}, "updatedAsset");
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.getRequestData("updatedAsset")!=null)
					{
						var data = Comms.getRequestData("updatedAsset");
						
						if (data.code=="success")
						{
							Display.error('Updated Asset fucking success!');
							Logic.getEntityByName('Editor Output').setState('text','Project Saved Successfully!');
						}
						else
						{
							Display.error('Updated Asset error!');
							Logic.getEntityByName('Editor Output').setState('text','Error Saving Project :(');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>