<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.FillRect2D">
	<_States>
		<_State id="name">
			<Value>Selector Resize Control</Value>
		</_State>
		
		<_State id="2DMeshFillRectForm">
			<Value>color1</Value>
		</_State>
		
		<_State id="spaceWidth"><Value>20</Value></_State>
		<_State id="spaceHeight"><Value>20</Value></_State>
		<_State id="touchable"><Value>true</Value></_State>
		<_State id="visible"><Value>false</Value></_State>

	</_States>
	
	<_Form>
		<_States>
			<State>
				<Id>color1</Id>
				<Type>Integer</Type>
				<Value>0x000000</Value>
			</State>
		</_States>
		
		<_Space>
			<_Entities>
				<!-- Decorative 
				<Entity extends="std.display.FillRect2D">
					<_States><_State id="2DMeshFillRectForm"><Value>color1</Value></_State>
						<_State id="spaceWidth"><Value>18</Value></_State>
						<_State id="spaceHeight"><Value>18</Value></_State>
						<_State id="spaceX"><Value>9</Value></_State>
						<_State id="spaceY"><Value>9</Value></_State></_States>
					<_Form><_States><State><Id>color1</Id><Type>Integer</Type><Value>0xFFFFFF</Value></State></_States></_Form>
				</Entity>-->
			</_Entities>
		</_Space>
	</_Form>
	
	
	<_Triggers>
		<Trigger>
			<Event>MouseLeftClick</Event>
			<Scripts>
				<Script>
					Display.error("resize clicked");
					parent.parentEntity.stopAction('Drag');
					me.startAction('DragResize');
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	
	<_Actions>
		<!-- DragResize -->
		<Action>
			<Id>DragResize</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (Input.pointer.isDown())
					{
						//Scale Width
						var realWidth = parent.parentEntity.getState('boundsRect').width * parent.parentEntity.getState('scaleX');
						parent.parentEntity.setState('scaleX',(realWidth+Input.pointer.distX())/parent.parentEntity.getState('boundsRect').width);
						
						//Scale Height
						var realHeight = parent.parentEntity.getState('boundsRect').height * parent.parentEntity.getState('scaleY');
						parent.parentEntity.setState('scaleY',(realHeight+Input.pointer.distY())/parent.parentEntity.getState('boundsRect').height);
					}
					else
					{
						//We will need this function...
						function firstElementNamed(p_xmlNode, p_elementName)
						{
							if (p_xmlNode.elementsNamed(p_elementName).hasNext())
							{
								return p_xmlNode.elementsNamed(p_elementName).next();
							}
							else
							{
								return null;
							}
						}
						
						var ent = parent.parentEntity;
						
						//Save changes to xmlData
						var xmlData = ent.getState("xmlData");
						Display.error(xmlData);
						var entityXml = xmlData.elementsNamed('Entity').next();
						
						//if no [_States], create it
						var statesXml = firstElementNamed(entityXml,'_States');
						if (statesXml==null)
						{
							statesXml = Xml.createElement('_States');
							entityXml.addChild(statesXml);
						}
						
						var scaleXFound = false;
						var scaleYFound = false;
						
						var states = statesXml.elementsNamed('_State');
						//for each [_state] in [_states]
						while (states.hasNext())
						{
							var stateChildXml = states.next();

							if (stateChildXml.get("id")=="scaleX")
							{
								//Remove previous Value Node
								var stateValueXml = firstElementNamed(stateChildXml,'Value');
								stateChildXml.removeChild(stateValueXml);
								
								//Create New Value Node, correct its value
								stateValueXml = Xml.createElement('Value');
								stateValueXml.addChild(Xml.parse(Std.string(ent.getState('scaleX'))));
								stateChildXml.addChild(stateValueXml);
								Display.error("scaleX: " + stateValueXml.firstChild().toString());
								scaleXFound=true;
							}
							else if (stateChildXml.get("id")=="scaleY")
							{
								//Remove previous Value Node
								var stateValueXml = firstElementNamed(stateChildXml,'Value');
								stateChildXml.removeChild(stateValueXml);
								
								//Create New Value Node, correct its value
								stateValueXml = Xml.createElement('Value');
								stateValueXml.addChild(Xml.parse(Std.string(ent.getState('scaleY'))));
								stateChildXml.addChild(stateValueXml);
								Display.error("scaleY: " + stateValueXml.firstChild().toString());
								scaleYFound=true;
							}
						}
						
						if (scaleXFound==false)
						{
							statesXml.addChild(Xml.parse('&#060;_State id="scaleX">&#060;Value>' + Std.string(ent.getState('scaleX')) + '&#060;/Value>&#060;/_State>').firstElement());
						}
						if (scaleYFound==false)
						{
							statesXml.addChild(Xml.parse('&#060;_State id="scaleY">&#060;Value>' + Std.string(ent.getState('scaleY')) + '&#060;/Value>&#060;/_State>').firstElement());
						}
						
						me.stopAction("DragResize");
					}
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>