<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.Editor">
	<_States>
		<_State id="name"><Value>Project Editor</Value></_State>
		<State><Id>ClassObjectsDBbyNameHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ModuleAssetsDBbyAssetIdHash</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>ConditionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ActionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ExpressionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>BehaviorAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					me.setState('ClassObjectsDBbyNameHash',new StringMap());
					me.setState('ModuleAssetsDBbyAssetIdHash',new StringMap());
					
					me.setState('ConditionAssetsDBbyTargets',new StringMap());
					me.setState('ActionAssetsDBbyTargets',new StringMap());
					me.setState('ExpressionAssetsDBbyTargets',new StringMap());
					me.setState('BehaviorAssetsDBbyTargets',new StringMap());
				</Script>
			</_Scripts>
		</_Action>

		<Action>
			<Id>RequestProjectDbAssets</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("RequestProjectDbAssets");
					
					//enter project gui
					Logic.getEntityByName('Dashboard View').setState('visible',false);
					Logic.getEntityByName('Editor Left View').setState('visible',true);
					Logic.getEntityByName('Editor Bottom View').setState('visible',true);
					////Logic.getEntityByName('Editor Right View').setState('visible',true);
					Logic.getEntityByName('Editor Viewport View').setState('visible',true);
					
					Logic.getEntityByName('Editor Top Bar Panel').setState('display','inline');
					Logic.getEntityByName('Lobby Mode Panel').setState('display','none');
					Logic.getEntityByName('NavigationBar').setState('height','74');
					
					
					//The proccess will be:
					//*Get Module Assets and Flambe Load them*
					//*Create Library Categories*
					//Get Project Assets (& Get Include Assets), and distribute them to Library Categories
					
					Comms.request("assets.requestHandler.getProjectMainModuleAssets", {}, "Project Main Module Assets Request");
				</Script>
			</Scripts>
		</Action>
		
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>NetworkRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					//Get Module Assets and Flambe Load them
					if (Comms.getRequestData("Project Main Module Assets Request")!=null)
					{
						var data = Comms.getRequestData("Project Main Module Assets Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting Main Module Assets success!');
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							//Initiate Load
							Assets.initiateBatch();

							var i = 0;
							while (data.assets.length>i)
							{
								//Get AssetDb
								var asset = data.assets[i];
								
								var assetUrl = '/assets/' + asset.owner.user.name + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
								Display.error("asset.owner.user.name: " + asset.owner.user.name);
								Display.error("assetUrl: " + assetUrl);
								var assetId;
								
								//If Asset is Script
								if (asset.type=="script")
								{
									assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
									
									if (asset.componentType=="Scene")
									{
										//Init Scene Editor
										var sceneEditor = Logic.getEntityByName('2d Scene Editor');
										sceneEditor.setState('assetUserName', asset.owner.user.name);
										sceneEditor.setState('assetType',asset.type);
										sceneEditor.setState('assetName',asset.name);
										
										//Let's see what happens if we store the Scene as well
										//me.getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
									}
									else if (asset.componentType=="EventSheet")
									{
										//Init EventSheet Editor
										var eventsheetEditor = Logic.getEntityByName('Event Collection Editor');
										eventsheetEditor.setState('assetUserName', asset.owner.user.name);
										eventsheetEditor.setState('assetType',asset.type);
										eventsheetEditor.setState('assetName',asset.name);
									}
									else if (asset.componentType=="Object Class")
									{
										me.getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
									}
								}
								else if (asset.type=="image")
								{
									assetId = 'image_' + asset.name;
								}
								
								//Store the AssetDB
								me.getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
								Display.error('asset.id: ' + asset._id);
								Display.error('asset.name: ' + asset.name);
								
								//Add file to Flambe Loader
								Assets.addFile(assetUrl, assetId);
								
								
								Display.error(data.assets[i].name);
								i+=1;
							}
							
							
							//var assetUserName = me.getState('assetUserName');
							
							var projectName = Logic.getEntityByName('Spark Editor').getState('projectname');
							Display.error("DEBUG LOG: Creating Scene Editor 2d from: " + projectName + '.scenes.MainScene');
							
							//Event Listener
							Assets.successSignal.connect(function () {
							
								//Start up Scene Editor
								Logic.getEntityByName('2d Scene Editor').startAction('GetAsset');
								
								//Start up EventSheet Editor
								Logic.getEntityByName('Event Collection Editor').startAction('GetAsset');
								
								
								//TEMP: Get ACE Lib stuff (to be replaced with Project Include assets, but not flambe load them, and distribute to libraries too)
								//so this might not be the place for it...
								Comms.request("assets.requestHandler.getProjectIncludeAssets", {}, "ACE Assets Request");
								
							}).once();
							
							//Load
							Assets.loadBatch();
						}
						else
						{
							Display.error('Error Requesting Main Module Assets!');
						}
					}
					else //TEMP: Get ACE Assets and Flambe Load them (also get behaviors)
					if (Comms.getRequestData("ACE Assets Request")!=null)
					{
						var data = Comms.getRequestData("ACE Assets Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting ACE Assets success!');
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							//Initiate Load
							Assets.initiateBatch();

							var i = 0;
							while (data.assets.length>i)
							{
								//Get AssetDb
								var asset = data.assets[i];
								
								var assetUrl = '/assets/' + asset.owner.user.name + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
								Display.error("asset.owner.user.name: " + asset.owner.user.name);
								Display.error("assetUrl: " + assetUrl);
								var assetId;
								
								//If Asset is Script
								if (asset.type=="script")
								{
									assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
									
									var aceHashByTarget;
									
									if (asset.componentType=="Condition")
									{
										aceHashByTarget = me.getState('ConditionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Action")
									{
										aceHashByTarget = me.getState('ActionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Expression")
									{
										aceHashByTarget = me.getState('ExpressionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Behavior")
									{
										aceHashByTarget = me.getState('BehaviorAssetsDBbyTargets');
									}
									
									//Insert asset
									if (aceHashByTarget.exists(asset.tags[2])==false)
										aceHashByTarget.set(asset.tags[2],[]);
										
									aceHashByTarget.get(asset.tags[2]).push(asset); //only 1 target supported for now
								}
								
								
								//Store the AssetDB
								me.getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
								Display.error('asset.id: ' + asset._id);
								Display.error('asset.name: ' + asset.name);
								
								//Add file to Flambe Loader
								Assets.addFile(assetUrl, assetId);
								
								
								Display.error(data.assets[i].name);
								i+=1;
							}
							
							
							//var assetUserName = me.getState('assetUserName');
							
							//var projectName = Logic.getEntityByName('Spark Editor').getState('projectname');
							//Display.error("DEBUG LOG: Creating Scene Editor 2d from: " + projectName + '.scenes.MainScene');
							
							//Event Listener
							Assets.successSignal.connect(function () {
							
								//Start up Scene Editor
								//Logic.getEntityByName('2d Scene Editor').startAction('GetAsset');
								
								//Start up EventSheet Editor
								//Logic.getEntityByName('Event Collection Editor').startAction('GetAsset');
								
								
								//Get Library Collections for this project
								Comms.request("assets.requestHandler.getProjectLibraryCollections", {}, "Project Library Collections Request");
								
							}).once();
							
							if (data.assets.length>0)
							{
								//Load
								Assets.loadBatch();
							}
							else
							{
								//Get Library Collections for this project
								Comms.request("assets.requestHandler.getProjectLibraryCollections", {}, "Project Library Collections Request");
							}
						}
						else
						{
							Display.error('Error Requesting ACE Assets!');
						}
					}
					//Create Library Categories
					else if (Comms.getRequestData("Project Library Collections Request")!=null)
					{
						var data = Comms.getRequestData("Project Library Collections Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting Library Collections success!');
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							var libraryCollections = Logic.getEntityByName('Editor Library Collections');
							var libraryCollectionButtonsContainer = Logic.getEntityByName('Editor Library Collections Buttons Container');
							var libraryCollectionPanelsContainer = Logic.getEntityByName('Editor Library Collections Panels Container');
							
							var libraryCollectionsHash = new ObjectMap();
							var selectedAtFirst = null;
							
							var i = 0;
							while (data.libraryCollections.length>i)
							{
								//Get AssetDb
								var libraryCollection = data.libraryCollections[i];
								
								//Create Button
								var libraryCollectionButton = Logic.gameFactory.createGameEntity('SparkEditor.entities.library.EditorLibraryCollectionButton');
								libraryCollectionButton.setState('buttonText',libraryCollection.title);
								libraryCollectionButton.setState('imageName',libraryCollection.iconName);
								libraryCollectionButton.setState('normalTextColor',libraryCollection.titleColor);
								libraryCollectionButton.setState('selectedTextColor',libraryCollection.titleColorSelected);
								//myNewItem.setState('asset',asset); //asset or panel object
								libraryCollectionButtonsContainer.addChild(libraryCollectionButton);
								
								//Create Panel
								var libraryCollectionPanel = Logic.gameFactory.createGameEntity('SparkEditor.entities.library.EditorLibraryCollectionPanel');
								
								libraryCollectionPanel.setState('name',libraryCollection.title);
								libraryCollectionPanel.setState('importTypes',libraryCollection.importTypes);
								libraryCollectionPanel.setState('tileWidth',libraryCollection.tileWidth);
								libraryCollectionPanel.setState('tileHeight',libraryCollection.tileHeight);
								libraryCollectionPanel.setState('tileUploadingImageName',libraryCollection.iconName);
								libraryCollectionPanel.setState('tileUploadingBorderColor',libraryCollection.titleColor);
								//myNewItem.setState('asset',asset); //asset or panel object
								libraryCollectionPanelsContainer.addChild(libraryCollectionPanel);
								
								//Register In hash
								libraryCollectionsHash.set(libraryCollectionButton,libraryCollectionPanel);
								
								Display.error("libraryCollection.title: " + libraryCollection.title);
								
								if (i==0)
									selectedAtFirst = libraryCollectionButton;
									
								i+=1;
							}
							
							libraryCollections.setState('collectionsHash',libraryCollectionsHash);
							
							if (selectedAtFirst!=null)
							{
								libraryCollections.possibleActionSet.get('SelectCategory').gameStateSet.get('selectionRequest').value = selectedAtFirst;
								libraryCollections.startAction("SelectCategory");
							}
							
							//Get Project Assets
							Comms.request("assets.requestHandler.getProjectAssets", {}, "Distribute Assets to Library Collections");
							
							//includes and such.. modify it, but keep the callback name
							//Comms.request("assets.requestHandler.getAssetsOf", {userName:'spark', projectName:'lib'}, "Distribute Assets to Library Collections");
						}
						else
						{
							Display.error('Error Requesting Library Collections!');
						}
					}
					//Get Project Assets (& Get Include Assets), and distribute them to Library Categories
					//Make it so its generic? y not? :/ and do both requests at once..y not..
					//if we get both answers on same frame, then we have to sequent.. but we must still use the same.. cause of infinite number of includes on every project..
					//ok...
					else if (Comms.getRequestData("Distribute Assets to Library Collections")!=null)
					{
						var data = Comms.getRequestData("Distribute Assets to Library Collections");
						
						if (data.code=="success")
						{
							Display.error('Distribute Assets to Library Collections success!');
							
							if (data.assets.length>0)
							{
								//Send it to Library Collections
								var libraryCollections = Logic.getEntityByName('Editor Library Collections');
								
								libraryCollections.getAction('ImportRequestAssetsDb').setState('assets', data.assets);
								libraryCollections.startAction('ImportRequestAssetsDb');
							}
							else
							{
								Display.error('Error Distribute Assets Array is empty!');
							}
						}
						else
						{
							Display.error('Error Distribute Assets to Library Collections!');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>