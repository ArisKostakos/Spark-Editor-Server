<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.Editor">
	<_States>
		<_State id="name"><Value>Project Editor</Value></_State>
		<State><Id>ClassObjectsDBbyNameHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ClassObjectsDBbyFilenameHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ModuleAssetsDBbyAssetIdHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ModuleAssetsDBbyNameHash</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>ConditionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ActionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>ExpressionAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>BehaviorAssetsDBbyTargets</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>InheritanceHashByName</Id><Type>Dynamic</Type><Value>null</Value></State> <!-- Only for Class Objects? -->
		<State><Id>StatesHashByName</Id><Type>Dynamic</Type><Value>null</Value></State> <!-- Only for Class Objects? -->
		<State><Id>MStatesHashByName</Id><Type>Dynamic</Type><Value>null</Value></State> <!-- Only for Class Objects? -->
	
		<State><Id>tempIncludeAssets</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>classObjectsCount</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					me.setState('ClassObjectsDBbyNameHash',new StringMap());
					me.setState('ClassObjectsDBbyFilenameHash',new StringMap());
					me.setState('ModuleAssetsDBbyAssetIdHash',new StringMap());
					me.setState('ModuleAssetsDBbyNameHash',new StringMap());
					
					me.setState('ConditionAssetsDBbyTargets',new StringMap());
					me.setState('ActionAssetsDBbyTargets',new StringMap());
					me.setState('ExpressionAssetsDBbyTargets',new StringMap());
					me.setState('BehaviorAssetsDBbyTargets',new StringMap());
					
					me.setState('InheritanceHashByName',new StringMap());
					me.setState('StatesHashByName',new StringMap());
					me.setState('MStatesHashByName',new StringMap());
				</Script>
			</_Scripts>
		</_Action>

		<Action>
			<Id>RegisterInheritanceMany</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction('RegisterInheritanceMany');
					
					var iterator = it.getState('assets').iterator();
					while (iterator.hasNext())
					{
						var classObject = iterator.next();
						me.getAction('RegisterInheritance').setState('asset',classObject);
						me.forceAction('RegisterInheritance');
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>assets</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
			
		<Action>
			<Id>RegisterInheritance</Id> <!-- And States.. -->
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					function parseGameEntityFile(fileName, mapEntry, root)
					{
						//The Parsing here can be optimized by storing the parses somewhere, and checking there first
						Display.error("Parsing: " + fileName);
						
						var asset_xml = Xml.parse(Assets.getFile(fileName).toString()).firstElement();
						
						//Store Main Extends
						if (asset_xml.exists('extends'))
						{
							var extendFileId = asset_xml.get('extends');
							mapEntry.set(extendFileId,false); //false means, NOT a behavior
							
							parseGameEntityFile(StringTools.replace(extendFileId,".","/") + ".egc", mapEntry, false);
						}
						
						
						
						
						//Store Extends Classes (Behaviors)
						var extendEntities = Logic.xml_entity_getExtendsEntityNames(asset_xml);
						for (extendEntity of extendEntities)
						{
							mapEntry.set(extendEntity,root); //true means, it's a behavior
							parseGameEntityFile(StringTools.replace(extendEntity,".","/") + ".egc", mapEntry, false);
						}
					}
					
					//forced
					
					me.stopAction('RegisterInheritance'); //sometimes forced, sometimes not. (mixed)
					
					//Get Asset
					var asset = it.getState('asset');
					
					
					//Get the asset's xml
					var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
					
					
					//DEEP INHERITANCE
					var InheritanceHashByName = me.getState('InheritanceHashByName');
					
					//Create New Entry (if previous exists, ditch it)
					var mapEntry = new StringMap();
					InheritanceHashByName.set(asset.name,mapEntry);
					
					//Recursive Parse
					parseGameEntityFile(assetId,mapEntry,true);
					
					
					//LOG
					Display.error("Asset: " + asset.name);
					var keys = mapEntry.keys();
					while (keys.hasNext())
					{
						var dep_entry = keys.next();
						Display.error("Dependancy: " + dep_entry + ", isBehavior: " + mapEntry.get(dep_entry));
					}
					
					//Re-parse (ouch..)
					var asset_xml = Xml.parse(Assets.getFile(assetId).toString()).firstElement();
					
					//SHALLOW STATES
					var StatesHashByName = me.getState('StatesHashByName');
					//Create New Entry (if previous exists, ditch it)
					var statesMapEntry = Logic.xml_getAllStates(asset_xml,true); //Store States
					StatesHashByName.set(asset.name,statesMapEntry);
					
					//SHALLOW MSTATES
					var MStatesHashByName = me.getState('MStatesHashByName');
					//Create New Entry (if previous exists, ditch it)
					var mstatesMapEntry = Logic.xml_getAllMStates(asset_xml,true); //Store MStates
					MStatesHashByName.set(asset.name,mstatesMapEntry);
				</Script>
			</Scripts>
			<States>
				<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
			
		<Action>
			<Id>RequestProjectDbAssets</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("RequestProjectDbAssets");
					
					//enter project gui
					Logic.getEntityByName('Dashboard View').setState('visible',false);
					Logic.getEntityByName('Editor Left View').setState('visible',true);
					Logic.getEntityByName('Editor Bottom View').setState('visible',true);
					////Logic.getEntityByName('Editor Right View').setState('visible',true);
					Logic.getEntityByName('Editor Viewport View').setState('visible',true);
					
					Logic.getEntityByName('Editor Top Bar Panel').setState('display','inline');
					Logic.getEntityByName('Lobby Mode Panel').setState('display','none');
					Logic.getEntityByName('NavigationBar').setState('height','74');
					
					
					//The proccess will be:
					//*Get Module Assets and Flambe Load them*
					//*Create Library Categories*
					//Get Project Assets (& Get Include Assets), and distribute them to Library Categories
					
					Comms.request("assets.requestHandler.getProjectMainModuleAssets", {}, "Project Main Module Assets Request");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Export Project</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction('Export Project');
					
					//Display.error("Exporting Project: " + Project.main.name);
					var username = Logic.getEntityByName('Spark Editor').getState('username');
					var projectname = Logic.getEntityByName('Spark Editor').getState('projectname');
					
					var exportProject = new Project();
					
					exportProject.name = projectname;
					exportProject.version = "0.1";
					exportProject.executeModules.push("MainModule");
					exportProject.sliced = Project.main.sliced;
					
					//Paths
					var iterator = Project.main.paths.keys();
					while (iterator.hasNext())
					{
						var path = iterator.next();
						exportProject.paths.set(path,Project.main.paths.get(path));
					}
					exportProject.setPath("project", "script", "/assets/"+username+"/script/");
					exportProject.setPath("project", "image", "/assets/"+username+"/image/");
					exportProject.setPath("project", "model", "/assets/"+username+"/model/");
					exportProject.setPath("project", "sound", "/assets/"+username+"/sound/");
					exportProject.setPath("project", "data", "/assets/"+username+"/data/");
					exportProject.setPath("spark", "script", "/assets/spark/script/");
					exportProject.setPath("spark", "image", "/assets/spark/image/");
					exportProject.setPath("spark", "model", "/assets/spark/model/");
					exportProject.setPath("spark", "sound", "/assets/spark/sound/");
					exportProject.setPath("spark", "data", "/assets/spark/data/");
					
					//StandardLibrary Module
					exportProject.modules.set("StandardLibrary", Project.main.modules.get("StandardLibrary"));
					
					//Main Module
					var mainModule = new Module("MainModule");
					mainModule.executeEntity=exportProject.name + ".MainProject";
					mainModule.requiresModules.push("StandardLibrary");
					
					//Assets
					var ModuleAssetsDBbyNameHash = me.getState('ModuleAssetsDBbyNameHash');
					var iterator = ModuleAssetsDBbyNameHash.iterator();
					while (iterator.hasNext())
					{
						var assetDB = iterator.next();
						var asset = new Asset(assetDB.name);
						asset.type = assetDB.type;
						
						//Bug here.. when I just created the asset, and try to export, it doesn't have owner..
						//workaround for now... default to project
						//test if it works!
						if (assetDB.owner.user!=null)
						{
							if (assetDB.owner.user.name=="spark")
								asset.location = 'spark';
							else
								asset.location = 'project';
						}
						else
						{
							asset.location = 'project';
						}
							
						asset.bytes = Std.string(assetDB.fileSize);
						asset.url = assetDB.dir+'/'+assetDB.fileName+'.'+assetDB.fileExtension;
						
						mainModule.assets.set(asset.id,asset);
						
						if (asset.type=="image")
							asset.id = 'image_' + assetDB.name;
						else if (asset.type=="sound")
							asset.id = 'sound_' + assetDB.name;
						else
							asset.id = null;
					}
					
					exportProject.modules.set(mainModule.id, mainModule);
					
					//Export
					var exportXml = exportProject.exportToXml();
					
					//Prepare File
					var clientFile = Logic.xml_createDocument();
					clientFile.addChild(exportXml);
					
					//Save to String
					var finalString = Logic.xmlToString(clientFile);
					Display.error("clientFile: " + finalString);
					
					//Upload
					var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
					Comms.file_sendFileRequest(finalString, {name: "main.skc", size: finalString.length, user: connectedUserName} , "uploadProjectFile");
				</Script>
			</Scripts>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData("uploadProjectFile")!=null)
					{
						var data = Comms.file_getSendFileRequestData("uploadProjectFile");
						
						Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
						Logic.getEntityByName('Editor Output').setState('text','Uploading ' + data.progressPercent+'%');
						if (data.progress==1)
						{
							Display.error("FILE: " + 'File Uploaded!');
							Logic.getEntityByName('Editor Output').setState('text','Project Uploaded!');
							
							Comms.request("assets.uploadHandler.uploadProjectFile", {fileName: "main.skc"}, "projectFileCreated");
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					//Get Module Assets and Flambe Load them
					if (Comms.getRequestData("Project Main Module Assets Request")!=null)
					{
						var data = Comms.getRequestData("Project Main Module Assets Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting Main Module Assets success!');
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							//Initiate Load
							Assets.initiateBatch();

							var i = 0;
							while (data.assets.length>i)
							{
								//Get AssetDb
								var asset = data.assets[i];
								
								var assetUrl = '/assets/' + asset.owner.user.name + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
								Display.error("asset.owner.user.name: " + asset.owner.user.name);
								Display.error("assetUrl: " + assetUrl);
								var assetId;
								
								//If Asset is Script
								if (asset.type=="script")
								{
									assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
									
									if (asset.componentType=="Scene")
									{
										if (asset.fileName=="MainScene")
										{
											//Init Scene Editor
											var sceneEditor = Logic.getEntityByName('2d Scene Editor');
											sceneEditor.setState('assetUserName', asset.owner.user.name);
											sceneEditor.setState('assetType',asset.type);
											sceneEditor.setState('assetName',asset.name);
										}
										
										me.getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
										me.getState('ClassObjectsDBbyFilenameHash').set(asset.fileName,asset);
									}
									else if (asset.componentType=="EventSheet")
									{
										//Init EventSheet Editor
										var eventsheetEditor = Logic.getEntityByName('Event Collection Editor');
										eventsheetEditor.setState('assetUserName', asset.owner.user.name);
										eventsheetEditor.setState('assetType',asset.type);
										eventsheetEditor.setState('assetName',asset.name);
									}
									else if (asset.componentType=="Object Class")
									{
										me.getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
										me.getState('ClassObjectsDBbyFilenameHash').set(asset.fileName,asset);
									}
									else if (asset.componentType=="Project")
									{
										//Let's see what happens if we store the Project as well
										me.getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
										me.getState('ClassObjectsDBbyFilenameHash').set(asset.fileName,asset);
										
										//Store the asset (maybe should be done earlier..)
										me.setState('asset',asset);
										
										//Get Object Count from asset
										me.setState('classObjectsCount',Std.parseInt(asset.tags[1]));
									}
								}
								else if (asset.type=="image")
								{
									assetId = 'image_' + asset.name;
								}
								else if (asset.type=="sound")
								{
									assetId = 'sound_' + asset.name;
								}
								
								//Store the AssetDB
								me.getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
								me.getState('ModuleAssetsDBbyNameHash').set(asset.name,asset);
								
								Display.error('asset.id: ' + asset._id);
								Display.error('asset.name: ' + asset.name);
								
								//Add file to Flambe Loader
								Assets.addFile(assetUrl, assetId);
								
								
								Display.error(data.assets[i].name);
								i+=1;
							}
							
							
							//var assetUserName = me.getState('assetUserName');
							
							var projectName = Logic.getEntityByName('Spark Editor').getState('projectname');
							Display.error("DEBUG LOG: Creating Scene Editor 2d from: " + projectName + '.scenes.MainScene');
							
							
							//Event Listener
							Assets.successSignal.connect(function () {
								//Normaly, I create the scene and eventsheet here
								//but because I temp flambe load behjaviors etc later on for now(although they should have
								//been included in the projet's main module, but they didn't so i flamb load them at the include query..
								//so I will temporarily create the scene etc later on too
								//Start up Scene Editor
								//Logic.getEntityByName('2d Scene Editor').startAction('GetAsset');
								
								//Start up EventSheet Editor
								//Logic.getEntityByName('Event Collection Editor').startAction('GetAsset');
								
								
								//TEMP: Get ACE Lib stuff (to be replaced with Project Include assets, but not flambe load them, and distribute to libraries too)
								//so this might not be the place for it...
								Comms.request("assets.requestHandler.getProjectIncludeAssets", {}, "ACE Assets Request");
								
							}).once();
							
							//Load
							Assets.loadBatch();
						}
						else
						{
							Display.error('Error Requesting Main Module Assets!');
						}
					}
					else //TEMP: Get ACE Assets and Flambe Load them (also get behaviors)
					if (Comms.getRequestData("ACE Assets Request")!=null)
					{
						var data = Comms.getRequestData("ACE Assets Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting ACE Assets success!');
							
							//Store them for later
							me.setState('tempIncludeAssets',data.assets);
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							//Initiate Load
							Assets.initiateBatch();

							var i = 0;
							while (data.assets.length>i)
							{
								//Get AssetDb
								var asset = data.assets[i];
								
								var assetUrl = '/assets/' + asset.owner.user.name + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
								Display.error("asset.owner.user.name: " + asset.owner.user.name);
								Display.error("assetUrl: " + assetUrl);
								var assetId;
								
								//If Asset is Script
								if (asset.type=="script")
								{
									assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
									
									var aceHashByTarget;
									
									if (asset.componentType=="Condition")
									{
										aceHashByTarget = me.getState('ConditionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Action")
									{
										aceHashByTarget = me.getState('ActionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Expression")
									{
										aceHashByTarget = me.getState('ExpressionAssetsDBbyTargets');
									}
									else if (asset.componentType=="Behavior")
									{
										aceHashByTarget = me.getState('BehaviorAssetsDBbyTargets');
									}
									
									//If script is ace object (and not Class)
									if (aceHashByTarget!=null)
									{
										//Insert asset
										if (aceHashByTarget.exists(asset.tags[2])==false)
											aceHashByTarget.set(asset.tags[2],[]);
											
										aceHashByTarget.get(asset.tags[2]).push(asset); //only 1 target supported for now
									}
								}
								
								
								//Store the AssetDB
								me.getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
								me.getState('ModuleAssetsDBbyNameHash').set(asset.name,asset);
								Display.error('asset.id: ' + asset._id);
								Display.error('asset.name: ' + asset.name);
								
								//Add file to Flambe Loader
								Assets.addFile(assetUrl, assetId);
								
								
								Display.error(data.assets[i].name);
								i+=1;
							}
							
							
							//var assetUserName = me.getState('assetUserName');
							
							//var projectName = Logic.getEntityByName('Spark Editor').getState('projectname');
							//Display.error("DEBUG LOG: Creating Scene Editor 2d from: " + projectName + '.scenes.MainScene');
							
							var oldMe = me;
							
							//Event Listener
							Assets.successSignal.connect(function () {
							
								//load them here for now...
								//Start up Scene Editor
								Logic.getEntityByName('2d Scene Editor').startAction('GetAsset');
								
								//Start up EventSheet Editor
								Logic.getEntityByName('Event Collection Editor').startAction('GetAsset');
								
								
								//Get Library Collections for this project
								Comms.request("assets.requestHandler.getProjectLibraryCollections", {}, "Project Library Collections Request");
								
								//Do some Inheritance Hashing on the main class modules (now that everything has been flambe loaded)
								oldMe.getAction('RegisterInheritanceMany').setState('assets',oldMe.getState('ClassObjectsDBbyNameHash'));
								oldMe.startAction('RegisterInheritanceMany');
							}).once();
							
							if (data.assets.length>0)
							{
								//Load
								Assets.loadBatch();
							}
							else
							{
								//Get Library Collections for this project
								Comms.request("assets.requestHandler.getProjectLibraryCollections", {}, "Project Library Collections Request");
							}
						}
						else
						{
							Display.error('Error Requesting ACE Assets!');
						}
					}
					//Create Library Categories
					else if (Comms.getRequestData("Project Library Collections Request")!=null)
					{
						var data = Comms.getRequestData("Project Library Collections Request");
						
						if (data.code=="success")
						{
							Display.error('Requesting Library Collections success!');
							
							//Get Username
							//var userName = me.getState('assetUserName');
							
							var libraryCollections = Logic.getEntityByName('Editor Library Collections');
							var libraryCollectionButtonsContainer = Logic.getEntityByName('Editor Library Collections Buttons Container');
							var libraryCollectionPanelsContainer = Logic.getEntityByName('Editor Library Collections Panels Container');
							
							var libraryCollectionsHash = new ObjectMap();
							var selectedAtFirst = null;
							
							var i = 0;
							while (data.libraryCollections.length>i)
							{
								//Get AssetDb
								var libraryCollection = data.libraryCollections[i];
								
								//Create Button
								var libraryCollectionButton = Logic.gameFactory.createGameEntity('SparkEditor.entities.library.EditorLibraryCollectionButton');
								libraryCollectionButton.setState('buttonText',libraryCollection.title);
								libraryCollectionButton.setState('imageName',libraryCollection.iconName);
								libraryCollectionButton.setState('normalTextColor',libraryCollection.titleColor);
								libraryCollectionButton.setState('selectedTextColor',libraryCollection.titleColorSelected);
								//myNewItem.setState('asset',asset); //asset or panel object
								libraryCollectionButtonsContainer.addChild(libraryCollectionButton);
								
								//Create Panel
								var libraryCollectionPanel = Logic.gameFactory.createGameEntity('SparkEditor.entities.library.EditorLibraryCollectionPanel');
								
								libraryCollectionPanel.setState('name',libraryCollection.title);
								libraryCollectionPanel.setState('importTypes',libraryCollection.importTypes);
								libraryCollectionPanel.setState('tileWidth',libraryCollection.tileWidth);
								libraryCollectionPanel.setState('tileHeight',libraryCollection.tileHeight);
								libraryCollectionPanel.setState('tileUploadingImageName',libraryCollection.iconName);
								libraryCollectionPanel.setState('tileUploadingBorderColor',libraryCollection.titleColor);
								libraryCollectionPanel.setState('libraryObjectDB',libraryCollection); //asset
								libraryCollectionPanelsContainer.addChild(libraryCollectionPanel);
								
								//Register In hash
								libraryCollectionsHash.set(libraryCollectionButton,libraryCollectionPanel);
								
								Display.error("libraryCollection.title: " + libraryCollection.title);
								
								if (i==0)
									selectedAtFirst = libraryCollectionButton;
									
								i+=1;
							}
							
							libraryCollections.setState('collectionsHash',libraryCollectionsHash);
							
							if (selectedAtFirst!=null)
							{
								libraryCollections.possibleActionSet.get('SelectCategory').gameStateSet.get('selectionRequest').value = selectedAtFirst;
								libraryCollections.startAction("SelectCategory");
							}
							
							//Get Project Assets
							Comms.request("assets.requestHandler.getProjectAssets", {}, "Distribute Assets to Library Collections");
							
							//includes and such.. modify it, but keep the callback name
							//Comms.request("assets.requestHandler.getAssetsOf", {userName:'spark', projectName:'lib'}, "Distribute Assets to Library Collections");
						}
						else
						{
							Display.error('Error Requesting Library Collections!');
						}
					}
					//Get Project Assets (& Get Include Assets), and distribute them to Library Categories
					//Make it so its generic? y not? :/ and do both requests at once..y not..
					//if we get both answers on same frame, then we have to sequent.. but we must still use the same.. cause of infinite number of includes on every project..
					//ok...
					else if (Comms.getRequestData("Distribute Assets to Library Collections")!=null)
					{
						var data = Comms.getRequestData("Distribute Assets to Library Collections");
						
						if (data.code=="success")
						{
							Display.error('Distribute Assets to Library Collections success!');
							
							//Add old and new arrays together
							var arraySum = data.assets.concat(me.getState('tempIncludeAssets'));
							
							if (arraySum.length>0)
							{
								//Send it to Library Collections
								var libraryCollections = Logic.getEntityByName('Editor Library Collections');
								
								libraryCollections.getAction('ImportRequestAssetsDb').setState('assets', arraySum);
								libraryCollections.startAction('ImportRequestAssetsDb');
							}
							else
							{
								Display.error('Error Distribute Assets Array is empty!');
							}
							
							//Also, Distribute Module Assets To Project Collections!
							var moduleAssets = me.getState('ModuleAssetsDBbyNameHash');
							
							//Send it to Project Collections
							var projectCollections = Logic.getEntityByName('Editor Project Collections');
							
							projectCollections.getAction('ImportRequestAssetsDb').setState('assets', moduleAssets);
							projectCollections.startAction('ImportRequestAssetsDb');
						}
						else
						{
							Display.error('Error Distribute Assets to Library Collections!');
						}
					}
					else if (Comms.getRequestData("projectFileCreated")!=null)
					{
						var data = Comms.getRequestData("projectFileCreated");
						
						if (data.code=="success")
						{
							//Open New Tab
							Display.error('Project Export Success!');
							Logic.getEntityByName('Editor Output').setState('text','Project Export Success!');
							
							var username = Logic.getEntityByName('Spark Editor').getState('username');
							var projectname = Logic.getEntityByName('Spark Editor').getState('projectname');
					
							window.open("http://sparkgamengine.com/spark/start.html?user="+username+"&project="+projectname,"previewTab");
						}
						else
						{
							Display.error('Project Export Error!');
							Logic.getEntityByName('Editor Output').setState('text','Project Export Error!');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>