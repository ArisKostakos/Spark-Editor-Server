<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.Editor">
	<_Actions>
		<_Action id="AssetLoaded">
			<_Scripts>
				<Script>
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
					
					//PURE XML
					var pureXml = me.getState('xmlPure');
					Display.error("EVENT SHEET EDITOR LOADED: " + pureXml.toString());
					
					//create an eventcollectionedit
					var eventCollectionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.EventCollectionEdit');
					me.setState('target',eventCollectionEdit);
					
					//add it as child to eventWindow
					Logic.getEntityByName('Events Window').addChild(eventCollectionEdit);
					
					
					
					
					//remove Form
					var formXml = firstElementNamed(pureXml,'Form');
					if (formXml!=null)
						pureXml.removeChild(formXml);
						
					//give it snapshot xml
					eventCollectionEdit.setState('xmlData',pureXml);
					
					
					//EDIT XML
					var editXml = me.getState('xmlEdit');
					formXml = firstElementNamed(editXml,'Form');
					
					//check for [form.space.entities]
					if (formXml!=null)
					{
						var formSpaceXml = firstElementNamed(formXml,'Space');
						if (formSpaceXml!=null)
						{
							var formSpaceEntitiesXml = firstElementNamed(formSpaceXml,'Entities');
							if (formSpaceEntitiesXml!=null)
							{
								var entities = formSpaceEntitiesXml.elementsNamed('Entity');
								//for each [entity] in [form.space.entities]
								while (entities.hasNext())
								{
									var entityChildXml = entities.next();
									//Display.error("Found child: " + entityChildXml.get('extends'));
									//take snapshot
									var pureChildXml = Xml.parse(entityChildXml.toString());
									//Display.error("Displaying Child: " + pureChildXml.toString());
									/*
									//Remove [extends]
									var childExtendsXml = firstElementNamed(entityChildXml,'Extends');
									if (childExtendsXml!=null)
										entityChildXml.removeChild(childExtendsXml);
										
									//if no [extends], create it
									//var childExtendsXml = firstElementNamed(entityChildXml,'Extends');
									//if (childExtendsXml==null)
									//{
										childExtendsXml = Xml.createElement('Extends');
										entityChildXml.insertChild(childExtendsXml,0);
									//}
									
									
									//add [entity] Sprite2DEdit in [extends]
									var sceneEditXml = Xml.createElement('Entity');
									sceneEditXml.set('extends','SparkEditor.entities.editors.behaviors.Sprite2DEdit');
									childExtendsXml.addChild(sceneEditXml);
									
									//instantiate, add to scene
									var childEntity = Logic.gameFactory.createGameEntityByXml(entityChildXml);
									editScene.addChild(childEntity);
									
									//give it snapshot xml
									childEntity.setState('xmlData',pureChildXml);*/
									
									/*
									//Get Event Sheet EDIT
									var eventSheetEdit = Logic.getEntityByName('Event Collection Edit');
									
									
									//create an eventedit
									var eventEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.EventEdit');
									
									//add it as child to eventWindow
									eventSheetEdit.addChild(eventEdit);
									eventEdit.startAction('CreateNewXml');
									*/
								}
								Display.projectActiveSpaceReference.activeStageReference.layoutManager.validated=false;
							}
						}
					}
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Save</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Save");
					
					var pureXml = me.getState('xmlPure');
					
					//Get Sheet
					var eventCollection = me.getState('target');
					
					//Create Save File Xml
					var eventCollectionFileXml = Xml.createDocument();
					
					//Add eventCollection's Xml to Doc
					var eventCollectionXml = Xml.parse(eventCollection.getState('xmlData').toString()).firstElement(); //clone it
					eventCollectionFileXml.addChild(eventCollectionXml);
					
					//Create [Form.Space.Entities]
					var formXml = Xml.createElement('Form');
					eventCollectionXml.addChild(formXml);
					var spaceXml = Xml.createElement('Space');
					formXml.addChild(spaceXml);
					var entitiesXml = Xml.createElement('Entities');
					spaceXml.addChild(entitiesXml);
					
					//For eventCollection's Children
					for (child in eventCollection.getChildren())
					{
						if (child.getState('name')!='Event Sheet Controls')
						{
							var eventChildXml = Xml.parse(child.getState('xmlData').toString()).firstElement(); //clone it
							
							entitiesXml.addChild(eventChildXml);
							
							//Create [Form.Space.Entities]
							var eventFormXml = Xml.createElement('Form');
							eventChildXml.addChild(eventFormXml);
							var eventSpaceXml = Xml.createElement('Space');
							eventFormXml.addChild(eventSpaceXml);
							var eventEntitiesXml = Xml.createElement('Entities');
							eventSpaceXml.addChild(eventEntitiesXml);
							
							
							
							//conditions
							for (conditionChild in child.getState('conditionsContainer').getChildren())
							{
								eventEntitiesXml.addChild(conditionChild.getState('xmlData'));
							}
							
							//actions
							for (actionChild in child.getState('actionsContainer').getChildren())
							{
								eventEntitiesXml.addChild(actionChild.getState('xmlData'));
							}
						}
					}
					
					
					var finalString = eventCollectionFileXml.toString();
					Display.error("eventCollectionXml: " + finalString);
					
					var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
					Comms.file_sendFileRequest(finalString, {name: "updatedAssetEC", size: finalString.length, user: connectedUserName} , "updatedAssetEC");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Run</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Run");
					
					
					var pureXml = me.getState('xmlPure');
					
					//Get Sheet
					var eventCollection = me.getState('target');
					
					//Create Save File Xml
					var eventCollectionFileXml = Xml.createDocument();
					
					//Add eventCollection's Xml to Doc
					var eventCollectionXml = Xml.parse(eventCollection.getState('xmlData').toString()).firstElement(); //clone it
					eventCollectionFileXml.addChild(eventCollectionXml);
					
					//Create [Form.Space.Entities]
					var formXml = Xml.createElement('Form');
					eventCollectionXml.addChild(formXml);
					var spaceXml = Xml.createElement('Space');
					formXml.addChild(spaceXml);
					var entitiesXml = Xml.createElement('Entities');
					spaceXml.addChild(entitiesXml);
					
					//For eventCollection's Children
					for (child in eventCollection.getChildren())
					{
						if (child.getState('name')!='Event Sheet Controls')
						{
							var eventChildXml = Xml.parse(child.getState('xmlData').toString()).firstElement(); //clone it
							
							entitiesXml.addChild(eventChildXml);
							
							//Create [Form.Space.Entities]
							var eventFormXml = Xml.createElement('Form');
							eventChildXml.addChild(eventFormXml);
							var eventSpaceXml = Xml.createElement('Space');
							eventFormXml.addChild(eventSpaceXml);
							var eventEntitiesXml = Xml.createElement('Entities');
							eventSpaceXml.addChild(eventEntitiesXml);
							
							
							
							//conditions
							for (conditionChild in child.getState('conditionsContainer').getChildren())
							{
								eventEntitiesXml.addChild(conditionChild.getState('xmlData'));
							}
							
							//actions
							for (actionChild in child.getState('actionsContainer').getChildren())
							{
								eventEntitiesXml.addChild(actionChild.getState('xmlData'));
							}
						}
					}
					
					
					var finalString = eventCollectionFileXml.toString();
					//Display.error("eventCollectionXml: " + finalString);
					
					var eventSheetBakedXml = Xml.parse(finalString).firstElement(); //bake it?
					
					//Instantiate
					var eventSheetRun = Logic.gameFactory.createGameEntityByXml(eventSheetBakedXml);
					
					me.setState('eventSheetRun',eventSheetRun);
					
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(eventSheetRun);
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Stop</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Stop");
					
					Display.error("STOPPING");

					//destroy instantiated scene above
					//todo: more things than removing it from space is obviously required!
					Logic.getEntityByName('Main Space').removeChild(me.getState('eventSheetRun'));
				</Script>
			</Scripts>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData("updatedAssetEC")!=null)
					{
						var data = Comms.file_getSendFileRequestData("updatedAssetEC");
						
						Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
						
						if (data.progress==1)
						{
							Display.error("FILE: " + 'File Uploaded!');
							
							//assetUserName
							var assetUserName = me.getState('assetUserName');

							//assetType
							var assetType = me.getState('assetType');

							//assetName
							var assetName = me.getState('assetName');

							//incomingFileName
							var incomingFileName = "updatedAssetEC";
	
	
							Comms.request("assets.uploadHandler.updateAssetFile", {assetUserName: assetUserName, assetType:assetType, assetName:assetName, incomingFileName:incomingFileName}, "updatedAssetEC");
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Scripts>
				<Script>
					if (Comms.getRequestData("updatedAssetEC")!=null)
					{
						var data = Comms.getRequestData("updatedAssetEC");
						
						if (data.code=="success")
						{
							Display.error('Updated Asset EC fucking success!');
							Logic.getEntityByName('Editor Output').setState('text','Project Saved Successfully!');
						}
						else
						{
							Display.error('Updated Asset EC error!');
							Logic.getEntityByName('Editor Output').setState('text','Error Saving Project :(');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	<_States>
		<_State id="name"><Value>Event Collection Editor</Value></_State>
		<State><Id>eventSheetRun</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
</Entity>