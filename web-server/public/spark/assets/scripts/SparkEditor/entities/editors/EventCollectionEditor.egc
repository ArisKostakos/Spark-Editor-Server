<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.editors.Editor">
	<_States>
		<_State id="name"><Value>Event Collection Editor</Value></_State>
		<State><Id>eventSheetRun</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<_Action id="AssetLoaded">
			<_Scripts>
				<Script>
					//Import XML
					var importXml = it.getState('importXml');
					
					me.getAction('Import Xml').setState('importXml',importXml);
					me.forceAction('Import Xml');
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Import Xml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//create an eventcollectionedit
					var eventCollectionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.EventCollectionEdit');
					me.setState('target',eventCollectionEdit);
					
					//add it as child to eventWindow
					Logic.getEntityByName('Events Window').addChild(eventCollectionEdit);
					
					//start import for eventsheet
					var importXml = it.getState('importXml');
					eventCollectionEdit.getAction('Import Xml').setState('importXml',importXml);
					eventCollectionEdit.startAction('Import Xml');
				</Script>
			</Scripts>
			<States>
				<State><Id>importXml</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
			
		<Action>
			<Id>Save</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Save");
					
					//Create Save File Xml
					var eventCollectionFileXml = Xml.createDocument();
					
					//Export Event Sheet
					me.forceAction("Export Xml");
					var ecExport = me.getState('xmlExport');
					
					//Add eventCollection's Xml to Doc
					eventCollectionFileXml.addChild(ecExport);
					
					//Save to String
					var finalString = Logic.xmlToString(eventCollectionFileXml);
					Display.error("eventCollectionXml: " + finalString);
					
					//Send
					var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
					Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
					Comms.file_sendFileRequest(finalString, {name: "updatedAssetEC", size: finalString.length, user: connectedUserName} , "updatedAssetEC");
				</Script>
			</Scripts>
		</Action>
		
		
		<Action>
			<Id>Export Xml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Get Sheet
					var eventCollection = me.getState('target');
					
					//Add eventCollection's Xml to Doc
					//var eventCollectionXml = Logic.xml_clone(eventCollection.getState('xmlData'));
					var eventCollectionXml = Logic.xml_createElementAttr("Entity", "extends", "std.ace.EventCollection");
					
					//Create entities node
					var entities = Logic.xml_createElements(['Form','Space','Entities']);
					eventCollectionXml.addChild(entities.first);
					
					
					//For eventCollection's Children
					for (eventChild of eventCollection.getState('eventsContainer').getChildren())
					{
						eventChild.forceAction('Export Xml');
						entities.last.addChild(eventChild.getState('xmlExport'));
					}
					
					//Store
					me.setState('xmlExport',eventCollectionXml);
					
					//Display.error("SUCCESS: " + Logic.xmlToString(eventCollectionXml));
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Update</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Get Sheet
					var eventCollection = me.getState('target');
					
					//For eventCollection's Children
					for (eventChild of eventCollection.getState('eventsContainer').getChildren())
					{
						eventChild.getAction('Update').setState('renameObjectClass',it.getState('renameObjectClass'));
						eventChild.forceAction('Update');
					}
					
					Display.error("SUCCESS UPDATING EVENT SHEETS");
				</Script>
			</Scripts>
			<States>
				<State><Id>renameObjectClass</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>Query</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Get Sheet
					var eventCollection = me.getState('target');
					
					//Name Exists Query
					var nameExists = it.getState('nameExists');
					
					//Defaults
					if (nameExists!=null)
						nameExists.feedback=0;
					
					
					//For eventCollection's Children
					for (eventChild of eventCollection.getState('eventsContainer').getChildren())
					{
						eventChild.getAction('Query').setState('nameExists',it.getState('nameExists'));
						eventChild.forceAction('Query');
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>nameExists</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<Action>
			<Id>Run</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Run");
					
					me.forceAction("Export Xml");
					
					var ecExport = me.getState('xmlExport');
					
					//Instantiate
					Logic.registerToBackupActive=true;
					var eventSheetRun = Logic.gameFactory.createGameEntityByXml(ecExport);
					Logic.registerToBackupActive=false;
					
					me.setState('eventSheetRun',eventSheetRun);
					
					//Move it to active space so it runs
					Logic.getEntityByName('Main Space').addChild(eventSheetRun);
					
					Display.error("2d event editor Run Finished");
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Stop</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Stop");
					
					Display.error("STOPPING");

					//destroy instantiated scene above
					//todo: more things than removing it from space is obviously required!
					Logic.getEntityByName('Main Space').removeChild(me.getState('eventSheetRun'));
				</Script>
			</Scripts>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData("updatedAssetEC")!=null)
					{
						var data = Comms.file_getSendFileRequestData("updatedAssetEC");
						
						Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
						
						if (data.progress==1)
						{
							Display.error("FILE: " + 'File Uploaded!');
							
							//assetUserName
							var assetUserName = me.getState('assetUserName');

							//assetType
							var assetType = me.getState('assetType');

							//assetName
							var assetName = me.getState('assetName');

							//incomingFileName
							var incomingFileName = "updatedAssetEC";
	
	
							Comms.request("assets.uploadHandler.updateAssetFile", {assetUserName: assetUserName, assetType:assetType, assetName:assetName, incomingFileName:incomingFileName}, "updatedAssetEC");
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.getRequestData("updatedAssetEC")!=null)
					{
						var data = Comms.getRequestData("updatedAssetEC");
						
						if (data.code=="success")
						{
							Display.error('Updated Asset EC fucking success!');
							Logic.getEntityByName('Editor Output').setState('text','Project Saved Successfully!');
						}
						else
						{
							Display.error('Updated Asset EC error!');
							Logic.getEntityByName('Editor Output').setState('text','Project Saved with warnings!');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>