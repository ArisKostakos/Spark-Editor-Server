<?xml version="1.0" encoding="utf-8"?>
<Entity>

	<_States>
		<_State id="name"><Value>Level Editor 2D Scene</Value></_State>
		<State><Id>selectedEntities</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>xmlData</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<Form>
		<Space>
			<Entities>
				<!-- This is for later... Layer stuff..
				<Entity extends="std.display.LayerScreen2D">
					<_States>
						<_State id="name"><Value>Layer Screen 2D</Value></_State>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
					</_States>
					
					<Form>
						<Space>
							<Entities>
								
							</Entities>
						</Space>
					</Form>

				</Entity>
				-->
				
				<!--
				<Entity extends="SparkEditor.entities.LittleBoxNoLayout">
					<_States>
						<_State id="spaceX"><Value>500</Value></_State>
						<_State id="spaceY"><Value>250</Value></_State>
						<_State id="spaceWidth"><Value>200</Value></_State>
						<_State id="spaceHeight"><Value>200</Value></_State>
						<_State id="2DMeshFillRectForm"><Value>color2</Value></_State>
					</_States>
				</Entity>
			-->
				<Entity extends="SparkEditor.entities.LittleBoxNoLayout">
					<_States>
						<_State id="name"><Value>tempScreenStage</Value></_State>
						<_State id="spaceX"><Value>3430</Value></_State>
						<_State id="spaceY"><Value>730</Value></_State>
						<_State id="spaceWidth"><Value>6840</Value></_State>
						<_State id="spaceHeight"><Value>1440</Value></_State>
						<_State id="2DMeshFillRectForm"><Value>color3</Value></_State>
					</_States>
				</Entity>
				
				<Entity extends="SparkEditor.entities.LittleBoxNoLayout">
					<_States>
						<_State id="name"><Value>tempScreenStage</Value></_State>
						<_State id="spaceX"><Value>1150</Value></_State>
						<_State id="spaceY"><Value>730</Value></_State>
						<_State id="spaceWidth"><Value>2280</Value></_State>
						<_State id="spaceHeight"><Value>1440</Value></_State>
						<_State id="2DMeshFillRectForm"><Value>color1</Value></_State>
					</_States>
				</Entity>
				
				<Entity extends="SparkEditor.entities.LittleBoxNoLayout">
					<_States>
						<_State id="name"><Value>tempScreenStage</Value></_State>
						<_State id="spaceX"><Value>1150</Value></_State>
						<_State id="spaceY"><Value>730</Value></_State>
						<_State id="spaceWidth"><Value>1920</Value></_State>
						<_State id="spaceHeight"><Value>1280</Value></_State>
						<_State id="2DMeshFillRectForm"><Value>color2</Value></_State>
					</_States>
				</Entity>
				
				<!--
				<Entity extends="SparkEditor.entities.LittleBox">
					<_States>
						<_State id="touchable"><Value>true</Value></_State>
						<_State id="name"><Value>SceneBackground</Value></_State>
					</_States>
					<_Triggers><Trigger><Event>MouseLeftClicked</Event><Scripts><Script>
						var leveleditor2d = Logic.getEntityByName('Level Editor 2D Scene');
						leveleditor2d.getAction('EntityClicked').setState('entity',null);
						leveleditor2d.startAction('EntityClicked');
					</Script></Scripts></Trigger></_Triggers>
				</Entity>
				-->
				
			</Entities>
		</Space>
	</Form>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					me.setState('selectedEntities', []);
					
					/*
					//set thing to update
					var propertiesWindow = Logic.getEntityByName('Properties Window');
					propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
					propertiesWindow.startAction('Update');
					*/
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>EntityClicked</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("EntityClicked");
					
					//Deselect old selected entities
					var selectedEntities = me.getState('selectedEntities');
					var entityClicked = me.getAction('EntityClicked').getState('entity');
					
					//Do not continue if only one entity is selected, and its the one we just clicked
					if (selectedEntities.length==1)
					{
						if (selectedEntities[0]==entityClicked)
							return;
					}
					
					//Deselect everything
					var i = 0;
					while (selectedEntities.length>i)
					{
						var selectedEntity = selectedEntities[i];
						selectedEntity.startAction('Deselect');
						
						i+=1;
					}
				
					//Select new clicked one
					if (entityClicked!=null)
					{
						//Remember Selected Entity
						me.setState('selectedEntities', [entityClicked]);

						entityClicked.startAction('Select');
					}
					else
					{
						me.setState('selectedEntities', []);
						Display.error("SOOO:: " + me.getState('xmlData'));
						/*
						//set thing to update
						var propertiesWindow = Logic.getEntityByName('Properties Window');
						propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
						propertiesWindow.startAction('Update');
						*/
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>entity</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<!-- AddBehavior -->
		<Action>
			<Id>AddBehavior</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("AddBehavior");
					
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
				
					var behaviorXml = me.getAction('AddBehavior').getState('behaviorXml');
					var asset = me.getAction('AddBehavior').getState('asset');
				
					Display.error("Adding Behavior to: " + me.getState('name') + ' called: ' + behaviorXml);
					
					var pureXml = me.getState('xmlData');
					
					//	if no [extends] in its xml, create it
					var childExtendsXml = firstElementNamed(pureXml,'Extends');
					if (childExtendsXml==null)
					{
						childExtendsXml = Xml.createElement('Extends');
						pureXml.insertChild(childExtendsXml,0);
					}
					
					
					var extendsXmlString = '&#060;Entity extends="' + asset.name + '">&#060;_States>';
					
					var states = firstElementNamed(behaviorXml,'_States');
					
					for (state in states.elementsNamed('State'))
					{
						var id = firstElementNamed(state,'Id');
						var value = firstElementNamed(state,'Value');
						
						extendsXmlString+='&#060;_State id="' + id.firstChild().toString() + '">&#060;Value>' + value.firstChild().toString() + '&#060;/Value>&#060;/_State>';
					}
					extendsXmlString+='&#060;/_States>&#060;/Entity>';
					
					//  add [behavior entity] in extends
					var physicsEntityXml = Xml.parse(extendsXmlString).firstElement();
					childExtendsXml.addChild(physicsEntityXml);
					
					Display.error("Adding Behavior to: " + pureXml);
					
					//set thing to update
					var propertiesWindow = Logic.getEntityByName('Properties Window');
					propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
					propertiesWindow.startAction('Update');
				</Script>
			</Scripts>
			<_States>
				<State><Id>behaviorXml</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
			</_States>
		</Action>
		
		<!-- CleanScene -->
		<Action>
			<Id>CleanScene</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("CleanScene");
					
					var selectedEntities = me.getState('selectedEntities');
					
					//Get Scene
					var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
					
					if (selectedEntities.length==1)
					{
						scene.removeChild(selectedEntities[0]);
					}
					
					
					
					
					return;
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
				
					
					var pureXml = me.getState('xmlData');
					
					//	destroy extends
					var childExtendsXml = firstElementNamed(pureXml,'Extends');
					if (childExtendsXml!=null)
					{
						pureXml.removeChild(childExtendsXml);
					}
					
					//Remove Children
					
					//Get Scene
					var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
					
					//solution to html5 bug
					var sceneChildren = [];
					for (child in scene.getChildren())
						sceneChildren.push(child);
					
					//For Scene's Children
					for (child in sceneChildren)
					{
						if (child.getState('name')!='SceneBackground')
						{
							Display.error('removing child...');
							scene.removeChild(child);
						}
					}
				</Script>
			</Scripts>
			<_States>
				<State><Id>behaviorXml</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
			</_States>
		</Action>
		
		<!-- CameraPan -->
		<Action>
			<Id>CameraPan</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (Input.mouse.isDown(MouseButton.Right)==false)
					{
						me.stopAction("CameraPan");
						return;
					}
					
					//If saficient movement
					if (Input.pointer.distX()>3 || -3>Input.pointer.distX() || Input.pointer.distY()>3 || -3>Input.pointer.distY())
					{
						me.getAction('CameraPan').setState('dragStarted',true);
					}
					
					if (me.getAction('CameraPan').getState('dragStarted'))
					{
						var camera = Logic.getEntityByName('Editor Scene Edit Camera');
						camera.setState('spaceX',camera.getState('spaceX')+Input.pointer.distX());
						camera.setState('spaceY',camera.getState('spaceY')+Input.pointer.distY());
					}
				</Script>
			</Scripts>
			<_States>
				<State><Id>dragStarted</Id><Type>Boolean</Type><Value>false</Value></State>
			</_States>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>MouseScroll</Event>
			<Scripts>
				<Script>
				var dir=0.05;
				
				if (0>Input.mouse.getScroll())
					dir *= -1;
					
					Display.error("scrolly scrolyyyyy: " + Input.mouse.getScroll());

					Logic.getEntityByName('Editor Scene Edit Camera').setState('scaleX', Logic.getEntityByName('Editor Scene Edit Camera').getState('scaleX')+dir);
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>MouseRightDown</Event>
			<Scripts>
				<Script>
					me.startAction("CameraPan");
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>