<?xml version="1.0" encoding="utf-8"?>
<Entity>

	<_States>
		<_State id="name"><Value>Level Editor 2D Scene</Value></_State>
		<State><Id>selectedEntities</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>xmlData</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<Form>
		<Space>
			<Entities>
				<!-- This is for later... Layer stuff..
				<Entity extends="std.display.LayerScreen2D">
					<_States>
						<_State id="name"><Value>Layer Screen 2D</Value></_State>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
					</_States>
					
					<Form>
						<Space>
							<Entities>
								
							</Entities>
						</Space>
					</Form>

				</Entity>
				-->
				
				<!--
				<Entity extends="SparkEditor.entities.LittleBoxNoLayout">
					<_States>
						<_State id="spaceX"><Value>500</Value></_State>
						<_State id="spaceY"><Value>250</Value></_State>
						<_State id="spaceWidth"><Value>200</Value></_State>
						<_State id="spaceHeight"><Value>200</Value></_State>
						<_State id="2DMeshFillRectForm"><Value>color2</Value></_State>
					</_States>
				</Entity>
			-->
			
				
				<Entity extends="std.display.FillRect2D">
					<_States>
						<_State id="name"><Value>SceneBoundsDisplay</Value></_State>
						<State><Id>sceneEditObject</Id><Type>Boolean</Type><Value>true</Value></State>
						<_State id="2DMeshFillRectForm"><Value>RectColor</Value></_State>
					</_States>
					<_Form><_States><State><Id>RectColor</Id><Type>Integer</Type><Value>0xFFFFFF</Value></State></_States></_Form>
				</Entity>
				
				<Entity extends="std.display.Rectangle2D">
					<_States>
						<_State id="name"><Value>CameraMaxBoundsDisplay</Value></_State>
						<State><Id>sceneEditObject</Id><Type>Boolean</Type><Value>true</Value></State>
						<_State id="rectColor"><Value>0xAA0000</Value></_State>
					</_States>
				</Entity>
				
				<Entity extends="std.display.Rectangle2D">
					<_States>
						<_State id="name"><Value>CameraMinBoundsDisplay</Value></_State>
						<State><Id>sceneEditObject</Id><Type>Boolean</Type><Value>true</Value></State>
						<_State id="rectColor"><Value>0x00AA00</Value></_State>
					</_States>
				</Entity>
				
				
				<!--
				<Entity extends="SparkEditor.entities.LittleBox">
					<_States>
						<_State id="touchable"><Value>true</Value></_State>
						<_State id="name"><Value>SceneBackground</Value></_State>
					</_States>
					<_Triggers><Trigger><Event>MouseLeftClicked</Event><Scripts><Script>
						var leveleditor2d = Logic.getEntityByName('Level Editor 2D Scene');
						leveleditor2d.getAction('EntityClicked').setState('entity',null);
						leveleditor2d.startAction('EntityClicked');
					</Script></Scripts></Trigger></_Triggers>
				</Entity>
				-->
				
			</Entities>
		</Space>
	</Form>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					me.setState('selectedEntities', []);
					
					//Set up Display Objects (Visualize Bounds for scene and camera)
					
					//SCENE
					var SceneBoundsDisplay = Logic.getEntityByName('SceneBoundsDisplay');
					
					//boundsX
					var boundsX = me.getState('boundsX');
					//boundsY
					var boundsY = me.getState('boundsY');
					//boundsWidth
					var boundsWidth = me.getState('boundsWidth');
					//boundsHeight
					var boundsHeight = me.getState('boundsHeight');

					SceneBoundsDisplay.setState('spaceX',boundsX+boundsWidth/2);
					SceneBoundsDisplay.setState('spaceY',boundsY+boundsHeight/2);
					SceneBoundsDisplay.setState('spaceWidth',boundsWidth);
					SceneBoundsDisplay.setState('spaceHeight',boundsHeight);


					//CAMERA
					var camera = Logic.getEntityByName('Editor Scene Edit Camera');
					var CameraMaxBoundsDisplay = Logic.getEntityByName('CameraMaxBoundsDisplay');
					var CameraMinBoundsDisplay = Logic.getEntityByName('CameraMinBoundsDisplay');
					
					//maxBoundsX
					var maxBoundsX = camera.getState('maxBoundsX'); 
					//maxBoundsY
					var maxBoundsY = camera.getState('maxBoundsY'); 
					//maxBoundsWidth
					var maxBoundsWidth = camera.getState('maxBoundsWidth'); 
					//maxBoundsHeight
					var maxBoundsHeight = camera.getState('maxBoundsHeight'); 
					//minBoundsWidthRatio
					var minBoundsWidthRatio = camera.getState('minBoundsWidthRatio'); 
					//minBoundsHeightRatio
					var minBoundsHeightRatio = camera.getState('minBoundsHeightRatio'); 
					//minBoundsHorizontalAlign
					var minBoundsHorizontalAlign = camera.getState('minBoundsHorizontalAlign'); 
					//minBoundsVerticalAlign
					var minBoundsVerticalAlign = camera.getState('minBoundsVerticalAlign'); 

					//Set-up Max Bounds
					CameraMaxBoundsDisplay.setState('spaceX',maxBoundsX);
					CameraMaxBoundsDisplay.setState('spaceY',maxBoundsY);
					CameraMaxBoundsDisplay.setState('spaceWidth',maxBoundsWidth);
					CameraMaxBoundsDisplay.setState('spaceHeight',maxBoundsHeight);
					//Normaly, we ran CameraMaxBoundsDisplay.update() Action... but we dont need to by luck.. (it runs right after i guess..)
					
					
					//Set-up Min Bounds
					var minBoundsX =0;
					var minBoundsY =0;
					var minBoundsWidth = maxBoundsWidth*minBoundsWidthRatio;
					var minBoundsHeight = maxBoundsHeight*minBoundsHeightRatio;
					
					//Horizontal Align
					if (minBoundsHorizontalAlign=="Left")
						minBoundsX = maxBoundsX;
					else if (minBoundsHorizontalAlign=="Center")
						minBoundsX = maxBoundsX + (maxBoundsWidth - minBoundsWidth)/2;
					else if (minBoundsHorizontalAlign=="Right")
						minBoundsX = maxBoundsX + (maxBoundsWidth - minBoundsWidth);
					
					//Vertical Align
					if (minBoundsVerticalAlign=="Top")
						minBoundsY = maxBoundsY;
					else if (minBoundsVerticalAlign=="Middle")
						minBoundsY = maxBoundsY + (maxBoundsHeight - minBoundsHeight)/2;
					else if (minBoundsVerticalAlign=="Bottom")
						minBoundsY = maxBoundsY + (maxBoundsHeight - minBoundsHeight);
						
					CameraMinBoundsDisplay.setState('spaceX', minBoundsX);
					CameraMinBoundsDisplay.setState('spaceY', minBoundsY);
					
					CameraMinBoundsDisplay.setState('spaceWidth', minBoundsWidth);
					CameraMinBoundsDisplay.setState('spaceHeight', minBoundsHeight);
					//Normaly, we ran CameraMinBoundsDisplay.update() Action... but we dont need to by luck.. (it runs right after i guess..)
					
					
					//Now we Move the Scene Camera to show all MaxBounds
					camera.setState('captureAreaX',maxBoundsX);
					camera.setState('captureAreaY',maxBoundsY);
					camera.setState('captureAreaWidth',maxBoundsWidth);
					camera.setState('captureAreaHeight',maxBoundsHeight);
					
					//Store Scale, for Misc reasons (not used in the engine) (used in CameraPan, Sprite2DEdit scrolling, etc)
					var editView = Logic.getEntityByName('Main View 2D');
					camera.setState('scaleX',editView.getState('feedbackWidth') / camera.getState('captureAreaWidth'));
					
					/*
					//set thing to update
					var propertiesWindow = Logic.getEntityByName('Properties Window');
					propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
					propertiesWindow.startAction('Update');
					*/
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>EntityClicked</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("EntityClicked");
					
					//Deselect old selected entities
					var selectedEntities = me.getState('selectedEntities');
					var entityClicked = me.getAction('EntityClicked').getState('entity');
					
					//Do not continue if only one entity is selected, and its the one we just clicked
					if (selectedEntities.length==1)
					{
						if (selectedEntities[0]==entityClicked)
							return;
					}
					
					//Deselect everything
					var i = 0;
					while (selectedEntities.length>i)
					{
						var selectedEntity = selectedEntities[i];
						selectedEntity.startAction('Deselect');
						
						i+=1;
					}
				
					//Select new clicked one
					if (entityClicked!=null)
					{
						//Remember Selected Entity
						me.setState('selectedEntities', [entityClicked]);

						entityClicked.startAction('Select');
					}
					else
					{
						me.setState('selectedEntities', []);
						Display.error("SOOO:: " + me.getState('xmlData'));
						/*
						//set thing to update
						var propertiesWindow = Logic.getEntityByName('Properties Window');
						propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
						propertiesWindow.startAction('Update');
						*/
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>entity</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<!-- AddBehavior -->
		<Action>
			<Id>AddBehavior</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("AddBehavior");
					
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
				
					var behaviorXml = me.getAction('AddBehavior').getState('behaviorXml');
					var asset = me.getAction('AddBehavior').getState('asset');
				
					Display.error("Adding Behavior to: " + me.getState('name') + ' called: ' + behaviorXml);
					
					var pureXml = me.getState('xmlData');
					
					//	if no [extends] in its xml, create it
					var childExtendsXml = firstElementNamed(pureXml,'Extends');
					if (childExtendsXml==null)
					{
						childExtendsXml = Xml.createElement('Extends');
						pureXml.insertChild(childExtendsXml,0);
					}
					
					
					var extendsXmlString = '&#060;Entity extends="' + asset.name + '">&#060;_States>';
					
					var states = firstElementNamed(behaviorXml,'_States');
					
					for (state in states.elementsNamed('State'))
					{
						var id = firstElementNamed(state,'Id');
						var value = firstElementNamed(state,'Value');
						
						extendsXmlString+='&#060;_State id="' + id.firstChild().toString() + '">&#060;Value>' + value.firstChild().toString() + '&#060;/Value>&#060;/_State>';
					}
					extendsXmlString+='&#060;/_States>&#060;/Entity>';
					
					//  add [behavior entity] in extends
					var physicsEntityXml = Xml.parse(extendsXmlString).firstElement();
					childExtendsXml.addChild(physicsEntityXml);
					
					Display.error("Adding Behavior to: " + pureXml);
					
					//set thing to update
					var propertiesWindow = Logic.getEntityByName('Properties Window');
					propertiesWindow.getAction('Update').setState('xmlData',me.getState('xmlData'));
					propertiesWindow.startAction('Update');
				</Script>
			</Scripts>
			<_States>
				<State><Id>behaviorXml</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
			</_States>
		</Action>
		
		<!-- DeleteSelected -->
		<Action>
			<Id>DeleteSelected</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("DeleteSelected");
					
					var selectedEntities = me.getState('selectedEntities');
					
					//Get Scene
					var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
					
					if (selectedEntities.length==1)
					{
						scene.removeChild(selectedEntities[0]);
					}
					
					
					
					
					return;
					function firstElementNamed(p_xmlNode, p_elementName)
					{
						if (p_xmlNode.elementsNamed(p_elementName).hasNext())
						{
							return p_xmlNode.elementsNamed(p_elementName).next();
						}
						else
						{
							return null;
						}
					}
				
					
					var pureXml = me.getState('xmlData');
					
					//	destroy extends
					var childExtendsXml = firstElementNamed(pureXml,'Extends');
					if (childExtendsXml!=null)
					{
						pureXml.removeChild(childExtendsXml);
					}
					
					//Remove Children
					
					//Get Scene
					var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
					
					//solution to html5 bug
					var sceneChildren = [];
					for (child in scene.getChildren())
						sceneChildren.push(child);
					
					//For Scene's Children
					for (child in sceneChildren)
					{
						if (child.getState('name')!='SceneBackground')
						{
							Display.error('removing child...');
							scene.removeChild(child);
						}
					}
				</Script>
			</Scripts>
			<_States>
				<State><Id>behaviorXml</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
			</_States>
		</Action>
		
		<!-- CameraPan -->
		<Action>
			<Id>CameraPan</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (Input.mouse.isDown(MouseButton.Right)==false)
					{
						me.stopAction("CameraPan");
						return;
					}
					
					//If saficient movement
					if (Input.pointer.distX()>3 || -3>Input.pointer.distX() || Input.pointer.distY()>3 || -3>Input.pointer.distY())
					{
						me.getAction('CameraPan').setState('dragStarted',true);
					}
					
					if (me.getAction('CameraPan').getState('dragStarted'))
					{
						var camera = Logic.getEntityByName('Editor Scene Edit Camera');
						var scale = camera.getState('scaleX');
						camera.setState('captureAreaX',camera.getState('captureAreaX')-Input.pointer.distX()/scale);
						camera.setState('captureAreaY',camera.getState('captureAreaY')-Input.pointer.distY()/scale);
					}
				</Script>
			</Scripts>
			<_States>
				<State><Id>dragStarted</Id><Type>Boolean</Type><Value>false</Value></State>
			</_States>
		</Action>
	</_Actions>
	
	<_Triggers>
		<Trigger>
			<Event>MouseScroll</Event>
			<Scripts>
				<Script>
				var dir=0.05;
				
				if (Input.mouse.getScroll()>0)
					dir *= -1;
					
					//Display.error("scrolly scrolyyyyy: " + Input.mouse.getScroll());
					
					//Resize selected
					if (Input.keyboard.isKeyDown(Key.Control))
					{
						var selectedEntities = me.getState('selectedEntities');
					
						//Get Scene
						var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
						
						if (selectedEntities.length==1)
						{
							var entity = selectedEntities[0];
							
							entity.setState('scaleX',entity.getState('scaleX')-dir);
							entity.setState('scaleY',entity.getState('scaleY')-dir);
							
							entity.forceAction("UpdateScale");
						}
					}
					else //zoom camera in out
					{
						var camera = Logic.getEntityByName('Editor Scene Edit Camera');
						
						//camera.setState('captureAreaX',maxBoundsX);
						//camera.setState('captureAreaY',maxBoundsY);
						camera.setState('captureAreaWidth',camera.getState('captureAreaWidth')+camera.getState('captureAreaWidth')*dir);
						camera.setState('captureAreaHeight',camera.getState('captureAreaHeight')+camera.getState('captureAreaHeight')*dir);
						
						//Store Scale, for Misc reasons (not used in the engine) (used in CameraPan above though..)
						var editView = Logic.getEntityByName('Main View 2D');
						camera.setState('scaleX',editView.getState('feedbackWidth') / camera.getState('captureAreaWidth'));
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>MouseRightDown</Event>
			<Scripts>
				<Script>
					me.startAction("CameraPan");
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>