<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Button">
	<_States>
		<_State id="name"><Value>Condition</Value></_State>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>30</Value></_State>
		<!--<_State id="border"><Value>2px solid black</Value></_State>
		<_State id="borderRadius"><Value>0px</Value></_State>-->
		<_State id="layout"><Value>Horizontal</Value></_State>
		<_State id="verticalAlign"><Value>middle</Value></_State>
		<_State id="backgroundColor"><Value>rgb(138,181,46)</Value></_State>
			
		<State><Id>xmlScript</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>xmlParameter</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>inputEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>xmlData</Id><Type>Dynamic</Type><Value>null</Value></State>
		<_State id="paddingLeft"><Value>4</Value></_State>
	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Code Image -->
				<Entity extends="std.display.Image"><_States>
					<_State id="width"><Value>20</Value></_State>
					<_State id="height"><Value>20</Value></_State>
					<_State id="src"><Value>events_tempThumb</Value></_State>
				</_States></Entity>
				
				<!-- Some Text -->
				<Entity extends="std.display.Text"><_States>
					<_State id="width"><Value>100%</Value></_State>
					<_State id="height"><Value>17</Value></_State>
					<_State id="fontWeight"><Value>300</Value></_State>
					<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
					<_State id="fontSize"><Value>15px</Value></_State>
					<_State id="fontColor"><Value>white</Value></_State>
					<_State id="textAlign"><Value>left</Value></_State>
					<_State id="text"><Value>Condition Text</Value></_State>
					</_States>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
	
	<_Triggers>
		<Trigger>
			<Event>MouseLeftClick</Event>
			<Scripts>
				<Script>
					Display.error("CLICKED CONDITION-> X: " + me.getState('feedbackX') + ", Y: " + me.getState('feedbackY') + ", WIDTH: " + me.getState('feedbackWidth') + ", HEIGHT: " + me.getState('feedbackHeight'));
					
					//var globalX =me.getState('feedbackX');
					//var globalY = me.getState('feedbackY');
					//var gameEntity = me;
					
					var globalPos = Logic.queryGameEntity(me, "globalPosition");
					Display.error("Logic.queryGameEntity(me, 'globalPosition'): " + globalPos);
					
					Logic.getEntityByName('PopUp View').setState("visible",true);
					
					Logic.getEntityByName('PopUpContainer').setState("top",globalPos.y+50);
					Logic.getEntityByName('PopUpContainer').setState("left",globalPos.x);
					
					var ClassObjectsDBbyNameHash = Logic.getEntityByName('Project Editor').getState("ClassObjectsDBbyNameHash");
					
					var arrayOfAssets = [];
					for (lala in ClassObjectsDBbyNameHash)
					{
						arrayOfAssets.push(lala);
					}
					
					var PopUpTargetsContainer = Logic.getEntityByName('PopUpTargetsContainer');
									PopUpTargetsContainer.getAction('AddAssetsDB').setState('assets',arrayOfAssets);
									PopUpTargetsContainer.startAction("AddAssetsDB");
									
					
					var ModuleAssetsDBbyAssetIdHash = Logic.getEntityByName('Project Editor').getState("ModuleAssetsDBbyAssetIdHash");
					for (hoho in ModuleAssetsDBbyAssetIdHash)
					{
						Display.error('hoho.name: ' + hoho.name);
					}
					
					//Display.invalidateLayout();
					/*
					while (gameEntity.parentEntity!=null)
					{
						gameEntity=gameEntity.parentEntity;
						Display.error("gameEntity.getState('name'): " + gameEntity.getState("name"));
						Display.error("gameEntity.getState('parent'): " + gameEntity.getState("parent"));
						//if (gameEntity.getState("displayType")=="Scene")
						
						
						if (gameEntity.getState("feedbackX")!=null)
						{
							globalX += gameEntity.getState("feedbackX");
							globalY += gameEntity.getState("feedbackY");
						}
						else break;
					}
					
					Display.error("globalX: " + globalX);
					Display.error("globalY: " + globalY);
					*/
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	<_Actions>
		<!-- CreateNewXml -->
		<Action>
			<Id>CreateNewXml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("CreateNewXml");

					//Create new entity Xml
					var entityXml = Xml.createElement('Entity');
					entityXml.set('extends','std.ace.Condition');
					
					//Create [_Actions._Action._Scripts.Script.DATA]
					var actionsXml = Xml.createElement('_Actions');
					entityXml.addChild(actionsXml);
					var actionXml = Xml.createElement('_Action');
					actionXml.set('id','Update');
					actionsXml.addChild(actionXml);
					var scriptsXml = Xml.createElement('_Scripts');
					actionXml.addChild(scriptsXml);
					var scriptXml = Xml.createElement('Script');
					scriptsXml.addChild(scriptXml);
					
					//Create [_States._State.Value.DATA]
					var statesXml = Xml.createElement('_States');
					entityXml.addChild(statesXml);
					var stateXml = Xml.createElement('_State');
					stateXml.set('id','parameter');
					statesXml.addChild(stateXml);
					var valueXml = Xml.createElement('Value');
					stateXml.addChild(valueXml);
					
					scriptXml.addChild(Xml.parse("if (false) me.forceAction('Triggered');").firstChild());
					valueXml.addChild(Xml.parse("Undefined").firstChild());
					
					me.setState('xmlParameter',valueXml);
					me.setState('xmlScript',scriptXml);
					me.setState('xmlData',entityXml);
					
					Display.error('xml data created fine!');
				</Script>
			</Scripts>
		</Action>

		<!-- ImportXml -->
		<Action>
			<Id>ImportXml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('inputEntity')!=null)
					{
						me.stopAction("ImportXml");
						
						function firstElementNamed(p_xmlNode, p_elementName)
						{
							if (p_xmlNode.elementsNamed(p_elementName).hasNext())
							{
								return p_xmlNode.elementsNamed(p_elementName).next();
							}
							else
							{
								return null;
							}
						}
						
						//Create new entity Xml
						var entityXml = me.getAction('ImportXml').getState('importedXml');
						
						//Get scriptXml
						var actionsXml = firstElementNamed(entityXml,'_Actions');
						var actionXml = firstElementNamed(actionsXml,'_Action');
						var scriptsXml = firstElementNamed(actionXml,'_Scripts');
						var scriptXml = firstElementNamed(scriptsXml,'Script');
						
						//get valueXml
						var statesXml = firstElementNamed(entityXml,'_States');
						var stateXml = firstElementNamed(statesXml,'_State');
						var valueXml = firstElementNamed(stateXml,'Value');
						
						//Store Xmls
						me.setState('xmlParameter',valueXml);
						me.setState('xmlScript',scriptXml);
						me.setState('xmlData',entityXml);
						
						me.getState('inputEntity').setState('text',valueXml.firstChild());
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>importedXml</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>