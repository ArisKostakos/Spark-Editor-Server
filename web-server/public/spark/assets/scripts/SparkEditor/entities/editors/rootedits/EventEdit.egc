<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Div">
	<_States>
		<_State id="name"><Value>Event</Value></_State>
		<_State id="width"><Value>500</Value></_State><!-- 100% -->
		<!--<_State id="border"><Value>1px dashed black</Value></_State>
		<_State id="borderRadius"><Value>5px</Value></_State>-->
		<_State id="layout"><Value>Horizontal</Value></_State>
		<!--<_State id="backgroundColor"><Value>rgb(0,160,227)</Value></_State>-->
		<State><Id>EventId</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>EventIdDisplay</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>conditionsContainer</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>actionsContainer</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>connectingLineGroup</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>actionsContainerGroup</Id><Type>Dynamic</Type><Value>null</Value></State>
		
		<State><Id>xmlExport</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<_State id="gap"><Value>0</Value></_State>
		<State><Id>eventWzardInProgress</Id><Type>Boolean</Type><Value>false</Value></State>
	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Event Id -->
				<Entity extends="std.display.Text"><_States>
					<_State id="width"><Value>15</Value></_State>
					<_State id="height"><Value>30</Value></_State>
					<_State id="fontWeight"><Value>300</Value></_State>
					<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
					<_State id="fontSize"><Value>14px</Value></_State>
					<_State id="fontColor"><Value>white</Value></_State>
					<_State id="textAlign"><Value>right</Value></_State>
					<_State id="textVerticalAlign"><Value>middle</Value></_State>
					</_States><_Actions><_Action id="Constructor"><_Scripts><Script>
					me.setState('text',Std.string(parent.getState('EventId')));
					parent.setState('EventIdDisplay',me);
				</Script></_Scripts></_Action></_Actions></Entity>
	
				<!-- Conditions -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="paddingLeft"><Value>5</Value></_State>
						<_State id="width"><Value>40%</Value></_State>
						<_State id="horizontalAlign"><Value>center</Value></_State>
							
					</_States>
					<Form><Space><Entities>
						<!-- Conditions Container -->
						<Entity extends="std.display.VGroup">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="gap"><Value>1</Value></_State>
							</_States>
							<_Actions><_Action id="Constructor"><_Scripts><Script>
								parent.parentEntity.setState('conditionsContainer',me);
							</Script></_Scripts></_Action></_Actions>
						</Entity>
						
						<!-- Add New Condition -->
						<Entity extends="SparkEditor.entities.buttons.eventsheet.AddButtonSmall">
							<_Triggers><Trigger><Event>MouseLeftClick</Event><Scripts>
								<Script>
									parent.parentEntity.startAction("Create New Condition");
								</Script>
							</Scripts></Trigger></_Triggers>
						</Entity>
					</Entities></Space></Form>
				</Entity>
				
				<!-- Connecting Line -->
				<Entity extends="std.display.Group">
					<_States>
						<_State id="width"><Value>10</Value></_State>
						<_State id="height"><Value>30</Value></_State>
						<_State id="display"><Value>none</Value></_State>
					</_States>
					<_Actions><_Action id="Constructor"><_Scripts><Script>
						parent.setState('connectingLineGroup',me);
					</Script></_Scripts></_Action></_Actions>
					<Form><Space><Entities>
						<Entity extends="std.display.Div">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="height"><Value>2</Value></_State>
								<_State id="verticalCenter"><Value>0</Value></_State>
								<_State id="backgroundColor"><Value>white</Value></_State>
							</_States>
						</Entity>
					</Entities></Space></Form>
				</Entity>
	
				<!-- Actions -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="width"><Value>60%</Value></_State>
						<_State id="horizontalAlign"><Value>center</Value></_State>
						<_State id="display"><Value>none</Value></_State>
					</_States>
					<_Actions><_Action id="Constructor"><_Scripts><Script>
						parent.setState('actionsContainerGroup',me);
					</Script></_Scripts></_Action></_Actions>
					<Form><Space><Entities>
						<!-- Actions Container -->
						<Entity extends="std.display.VGroup">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="gap"><Value>1</Value></_State>
							</_States>
							<_Actions><_Action id="Constructor"><_Scripts><Script>
								parent.parentEntity.setState('actionsContainer',me);
							</Script></_Scripts></_Action></_Actions>
						</Entity>
						
						<!-- Add New Action -->
						<Entity extends="SparkEditor.entities.buttons.eventsheet.AddButtonSmall">
							<_Triggers><Trigger><Event>MouseLeftClick</Event><Scripts>
								<Script>
									parent.parentEntity.startAction("Create New Action");
								</Script>
							</Scripts></Trigger></_Triggers>
						</Entity>
					</Entities></Space></Form>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
	
	<_Triggers>
		
	</_Triggers>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					return;
					Display.error('conditions container: ' + me.getState('conditionsContainer'));
					Display.error('actions container: ' + me.getState('actionsContainer'));
				</Script>
			</_Scripts>
		</_Action>
	
		<!-- Export Xml -->
		<Action>
			<Id>Export Xml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Create the event
					var eventXml = Logic.xml_createElementAttr('Entity','extends','std.ace.Event');
					
					//First, we determine from the conditions, what trigger to create..
					var firstCondition=eventChild.getState('conditionsContainer').getChildren()[0]; //for now, consider first condition
					
					//By checking all conditions for this event, determine an appropriate trigger
					//Set Up Trigger Event Node
					var conditionTarget_asset = firstCondition.getState('target_asset');
					var condition_asset = firstCondition.getState('ac_asset');
					var condition_par1 = firstCondition.getState('par1');
					var condition_par2 = firstCondition.getState('par2');
					var condition_par3 = firstCondition.getState('par3');
					var condition_par4 = firstCondition.getState('par4');
					
					
					//Determine Trigger Based on 'chosen' condition
					var triggerEvent="NotFound";
					if (condition_asset.fileName=="MouseLeftClick")
						triggerEvent="MouseLeftClick";
					if (condition_asset.fileName=="KeyPressed")
						triggerEvent="KeyPressed";
					
					
					//Set Up Trigger Target Node
					var triggerTarget;
					if (triggerEvent=="KeyPressed") //hack to set no target for keyboard
						triggerTarget="TargetNone";
					else
						triggerTarget= conditionTarget_asset.fileName;
					
					//Set Up Trigger Parameter
					var triggerParameter=null;
					if (triggerEvent=="KeyPressed")
					{
						triggerParameter = condition_par1.object;
					}
					
					//Create the trigger
					Logic.xml_entity_addTrigger(eventXml, {ext:"std.ace.TriggerBase", event:triggerEvent, target:triggerTarget, parameter:triggerParameter},true);
					
					//Create entities node (children)
					var entities = Logic.xml_createElements(['Form','Space','Entities']);
					eventXml.addChild(entities.first);
					
					//Add Children Conditions
					for (conditionChild in eventChild.getState('conditionsContainer').getChildren())
					{
						conditionChild.forceAction('Export Xml');
						entities.last.addChild(conditionChild.getState('xmlExport'));
					}
					
					//Add Children Events
					for (actionChild in eventChild.getState('actionsContainer').getChildren())
					{
						actionChild.forceAction('Export Xml');
						entities.last.addChild(actionChild.getState('xmlExport'));
					}
					
					//Store
					me.setState('xmlExport',eventXml);
				</Script>
			</Scripts>
		</Action>
	
		<!-- Create New Instance -->
		<Action>
			<Id>Create New Instance</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('conditionsContainer')!=null && me.getState('actionsContainer')!=null)
					{
						me.stopAction("Create New Instance");
						
						me.setState('eventWzardInProgress',true);
						
						//create an conditionEdit
						var conditionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ConditionEdit');
						conditionEdit.setState('parentEvent',me);
						
						//add it as child to conditions
						me.getState('conditionsContainer').addChild(conditionEdit);
						conditionEdit.startAction('Create New Instance');
						
						Display.invalidateLayout();
					}
				</Script>
			</Scripts>
		</Action>

		<Action>
			<Id>Create New Condition</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Create New Condition");
					
					//create an conditionEdit
					var conditionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ConditionEdit');
					conditionEdit.setState('parentEvent',me);
					
					//add it as child to me
					me.getState('conditionsContainer').addChild(conditionEdit);
					conditionEdit.startAction('Create New Instance');
					
					Display.invalidateLayout();
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Create New Action</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("Create New Action");
					
					//create an actionEdit
					var actionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ActionEdit');
					actionEdit.setState('parentEvent',me);
					
					//add it as child to me
					me.getState('actionsContainer').addChild(actionEdit);
					actionEdit.startAction('Create New Instance');
					Display.invalidateLayout();
					
					
					me.getState('connectingLineGroup').setState('display','inline');
					me.getState('actionsContainerGroup').setState('display','inline');
				</Script>
			</Scripts>
		</Action>
				
		<!-- ImportXml -->
		<Action>
			<Id>ImportXml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//import
				</Script>
			</Scripts>
			<States>
				<State><Id>importedXml</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>