<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Div">
	<_States>
		<_State id="name"><Value>Event</Value></_State>
		<_State id="width"><Value>500</Value></_State><!-- 100% -->
		<!--<_State id="border"><Value>1px dashed black</Value></_State>
		<_State id="borderRadius"><Value>5px</Value></_State>-->
		<_State id="layout"><Value>Horizontal</Value></_State>
		<!--<_State id="backgroundColor"><Value>rgb(0,160,227)</Value></_State>-->
		<State><Id>EventId</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>EventIdDisplay</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>conditionsContainer</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>actionsContainer</Id><Type>Dynamic</Type><Value>null</Value></State>
		
		<State><Id>xmlData</Id><Type>Dynamic</Type><Value>null</Value></State>
		<_State id="gap"><Value>0</Value></_State>
	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Event Id -->
				<Entity extends="std.display.Text"><_States>
					<_State id="width"><Value>15</Value></_State>
					<_State id="height"><Value>30</Value></_State>
					<_State id="fontWeight"><Value>300</Value></_State>
					<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
					<_State id="fontSize"><Value>14px</Value></_State>
					<_State id="fontColor"><Value>white</Value></_State>
					<_State id="textAlign"><Value>right</Value></_State>
					<_State id="textVerticalAlign"><Value>middle</Value></_State>
					</_States><_Actions><_Action id="Constructor"><_Scripts><Script>
					me.setState('text',Std.string(parent.getState('EventId')));
					parent.setState('EventIdDisplay',me);
				</Script></_Scripts></_Action></_Actions></Entity>
	
				<!-- Conditions -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="paddingLeft"><Value>5</Value></_State>
						<_State id="width"><Value>40%</Value></_State>
						<_State id="horizontalAlign"><Value>center</Value></_State>
							
					</_States>
					<Form><Space><Entities>
						<!-- Conditions Container -->
						<Entity extends="std.display.VGroup">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="gap"><Value>1</Value></_State>
							</_States>
							<_Actions><_Action id="Constructor"><_Scripts><Script>
								Display.error("conditions container constructor");
								parent.parentEntity.setState('conditionsContainer',me);
							</Script></_Scripts></_Action></_Actions>
						</Entity>
						
						<!-- Add New Condition -->
						<Entity extends="SparkEditor.entities.buttons.eventsheet.AddButtonSmall">
							<_Triggers><Trigger><Event>MouseLeftClick</Event><Scripts>
								<Script>
									//create an conditionEdit
									var conditionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ConditionEdit');
									
									//add it as child to me
									parent.parentEntity.getState('conditionsContainer').addChild(conditionEdit);
									conditionEdit.startAction('CreateNewXml');
									Display.invalidateLayout();
								</Script>
							</Scripts></Trigger></_Triggers>
						</Entity>
					</Entities></Space></Form>
				</Entity>
				
				<!-- Connecting Line -->
				<Entity extends="std.display.Group">
					<_States>
						<_State id="width"><Value>10</Value></_State>
						<_State id="height"><Value>30</Value></_State>
					</_States>
					<Form><Space><Entities>
						<Entity extends="std.display.Div">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="height"><Value>2</Value></_State>
								<_State id="verticalCenter"><Value>0</Value></_State>
								<_State id="backgroundColor"><Value>white</Value></_State>
							</_States>
						</Entity>
					</Entities></Space></Form>
				</Entity>
	
				<!-- Actions -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="width"><Value>60%</Value></_State>
						<_State id="horizontalAlign"><Value>center</Value></_State>
					</_States>
					<Form><Space><Entities>
						<!-- Actions Container -->
						<Entity extends="std.display.VGroup">
							<_States>
								<_State id="width"><Value>100%</Value></_State>
								<_State id="gap"><Value>1</Value></_State>
							</_States>
							<_Actions><_Action id="Constructor"><_Scripts><Script>
								Display.error("actions container constructor");
								parent.parentEntity.setState('actionsContainer',me);
							</Script></_Scripts></_Action></_Actions>
						</Entity>
						
						<!-- Add New Action -->
						<Entity extends="SparkEditor.entities.buttons.eventsheet.AddButtonSmall">
							<_Triggers><Trigger><Event>MouseLeftClick</Event><Scripts>
								<Script>
									//create an actionEdit
									var actionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ActionEdit');
									
									//add it as child to me
									parent.parentEntity.getState('actionsContainer').addChild(actionEdit);
									actionEdit.startAction('CreateNewXml');
									Display.invalidateLayout();
								</Script>
							</Scripts></Trigger></_Triggers>
						</Entity>
					</Entities></Space></Form>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
	
	<_Triggers>
		
	</_Triggers>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					return;
					Display.error('conditions container: ' + me.getState('conditionsContainer'));
					Display.error('actions container: ' + me.getState('actionsContainer'));
				</Script>
			</_Scripts>
		</_Action>
		
		<!-- CreateNewXml -->
		<Action>
			<Id>CreateNewXml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('conditionsContainer')!=null && me.getState('actionsContainer')!=null)
					{
						me.stopAction("CreateNewXml");
						
						//Create new entity Xml
						var entityXml = Xml.createElement('Entity');
						entityXml.set('extends','std.ace.Event');

						me.setState('xmlData',entityXml);
						
						//create an conditionEdit
						var conditionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ConditionEdit');
						
						//add it as child to conditions
						me.getState('conditionsContainer').addChild(conditionEdit);
						conditionEdit.startAction('CreateNewXml');

							
						//create an actionEdit
						var actionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ActionEdit');
						
						//add it as child to actions
						me.getState('actionsContainer').addChild(actionEdit);
						actionEdit.startAction('CreateNewXml');
						
						
						Display.invalidateLayout();
					}
				</Script>
			</Scripts>
		</Action>

		<!-- ImportXml -->
		<Action>
			<Id>ImportXml</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					if (me.getState('conditionsContainer')!=null && me.getState('actionsContainer')!=null)
					{
						me.stopAction("ImportXml");
						
						function firstElementNamed(p_xmlNode, p_elementName)
						{
							if (p_xmlNode.elementsNamed(p_elementName).hasNext())
							{
								return p_xmlNode.elementsNamed(p_elementName).next();
							}
							else
							{
								return null;
							}
						}
						
						//Create new entity Xml
						var entityXml = me.getAction('ImportXml').getState('importedXml');
						me.setState('xmlData',entityXml);
						
						//remove Form
						var formXml = firstElementNamed(entityXml,'Form');
						if (formXml!=null)
						{
							entityXml.removeChild(formXml);
						
							var formSpaceXml = firstElementNamed(formXml,'Space');
							if (formSpaceXml!=null)
							{
								var formSpaceEntitiesXml = firstElementNamed(formSpaceXml,'Entities');
								if (formSpaceEntitiesXml!=null)
								{
									var entities = formSpaceEntitiesXml.elementsNamed('Entity');
									//for each [entity] in [form.space.entities]
									while (entities.hasNext())
									{
										var entityChildXml = entities.next();
										
										if (entityChildXml.get('extends')=='std.ace.Condition')
										{
											Display.error("XML IMPORT: FOUND CONDITION");
											//create an conditionEdit
											var conditionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ConditionEdit');
											
											//add it as child to conditions
											me.getState('conditionsContainer').addChild(conditionEdit);
											conditionEdit.getAction('ImportXml').setState('importedXml',entityChildXml);
											conditionEdit.startAction('ImportXml');
										}
										else if (entityChildXml.get('extends')=='std.ace.Action')
										{
											Display.error("XML IMPORT: FOUND ACTION");
											//create an actionEdit
											var actionEdit = Logic.gameFactory.createGameEntity('SparkEditor.entities.editors.rootedits.ActionEdit');
											
											//add it as child to actions
											me.getState('actionsContainer').addChild(actionEdit);
											actionEdit.getAction('ImportXml').setState('importedXml',entityChildXml);
											actionEdit.startAction('ImportXml');
										}
									}
									Display.projectActiveSpaceReference.activeStageReference.layoutManager.validated=false;
								}
							}
						}
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>importedXml</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>