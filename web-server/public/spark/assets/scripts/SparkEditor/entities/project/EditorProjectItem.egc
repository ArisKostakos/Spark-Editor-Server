<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Div">
	<_States>
		<_State id="width"><Value>50</Value></_State>
		<_State id="height"><Value>50</Value></_State>
		<_State id="border"><Value>0px</Value></_State>
		<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>imageObject</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>captionObject</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>imageName</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>caption</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>skinType</Id><Type>Text</Type><Value>imageOnly</Value></State>
		<_State id="preventDefaultEvents"><Value>true</Value></_State>
	</_States>
	
	<_Actions>
		<Action>
			<Id>Rename</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
				
					var asset = me.s('asset');
					Display.error("REQUESTED RENAMING " + asset.title + ' TO ' + it.getState('newName'));
					
					//Store Old name
					var oldName = asset.title;
					var newName = it.getState('newName');
					
					//Update Instances
					var instance = e(oldName);
					
					//If at least one instance is found
					if (instance!=null)
					{
						//Get all clones
						var clones = Logic.getAllEntitiesByName(oldName);
						
						//Deregister class
						Logic.deregisterEntityNameClass(instance);
						
						//Update all clones
						for (clone of clones)
						{
							clone.setState('name',newName);
							Logic.registerEntityByName(clone);
						}
					}
					
					//update asset's Title
					Comms.request("assets.updateHandler.updateAssetEntry", {assetId:asset._id, field:"title", newValue:newName}, "no callback");
					
					//Update local asset object
					asset.title=newName;
					
					//Update Displayed properties window
					var itemProperties = Logic.getEntityByName('Editor Item Properties');
					//itemProperties.getAction('Display Item').setState('gameEntity',me); //keep current one..
					itemProperties.startAction('Display Item');
					
					//Update Projects Tab
					me.setState('caption',newName);
					me.s('captionObject').setState('text',newName);
					
					
					//Update Name on EventSheets (only on active eventsheet for now :( )
					e('Event Collection Editor').getAction('Update').setState('renameObjectClass',{oldName: oldName, newName: newName});
					e('Event Collection Editor').forceAction('Update');
				</Script>
			</Scripts>
			<States>
				<State><Id>newName</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
	
	<Form>
		<Space>
			<Entities>
				<!-- Image -->
				<Entity extends="std.display.Image">
					<_States>
						<_State id="touchable"><Value>true</Value></_State>
						<_State id="cursor"><Value>pointer</Value></_State>
						<_State id="draggable"><Value>true</Value></_State>
						<_State id="horizontalCenter"><Value>0</Value></_State>
						<State><Id>tempDeleting</Id><Type>Boolean</Type><Value>false</Value></State>
						<State><Id>tempUploading</Id><Type>Boolean</Type><Value>false</Value></State>
						<State><Id>tempAssetReferencesToDelete</Id><Type>Dynamic</Type><Value>null</Value></State>
					</_States>
						
					<_Actions><_Action id="Constructor"><_Scripts><Script>
						parent.setState('imageObject',me);
						me.setState('src',parent.getState('imageName'));
						
						if (parent.getState('skinType')=='imageOnly')
						{
							me.setState('width', '100%');
							me.setState('height', '100%');
						}
						else if (parent.getState('skinType')=='imageAndText')
						{
							me.setState('width', '80%');
							me.setState('height', '80%');
						}
					</Script></_Scripts></_Action></_Actions>
						
					<_Triggers>
						
						<Trigger>
							<Event>OnDragStart</Event>
							<Scripts>
								<Script>
									if (parent.s('asset').componentType=="Object Class")
										Logic.getEntityByName('Drag Surface View').setState('visible',true);				
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>OnDragEnd</Event>
							<Scripts>
								<Script>
									if (parent.s('asset').componentType=="Object Class")
										Logic.getEntityByName('Drag Surface View').setState('visible',false);
									
									//Display.error("DRAG ENDDD");
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>MouseDown</Event>
							<Scripts>
								<Script>
									if (me.getState('eventObject').which==1) //Left Mouse Button
									{
										Display.error("Mouse Down LEFT!!!");
										
										if (parent.s('asset').componentType=="Object Class")
										{
											Logic.getEntityByName('Drag Surface View').setState('visible',true);
											Logic.getEntityByName('Drag Surface Scene').setState('assetBeingDragged',parent.getState('asset'));
											//Logic.getEntityByName('Drag Surface Scene').setState('libraryOfAssetBeingDragged',parent.getState('libraryObjectDB'));
										}
									}
									
									
									//FINDS OFFSET FROM MOUSE CLICK TO IMAGE. I might need it later on..
									//Display.error("Mouse Down!!!");
									//var eventObject = me.getState('eventObject');
									//var localX = eventObject.target.getBoundingClientRect().left;
									//var localY = eventObject.target.getBoundingClientRect().top;
									//Display.error("OnDrop-> X: " + localX + ", Y: " + localY);
									//.error("Mouse Global-> X: " + Input.pointer.currentX + ", Y: " + Input.pointer.currentY);
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>MouseUp</Event>
							<Scripts>
								<Script>
									if (parent.s('asset').componentType=="Object Class")
										Logic.getEntityByName('Drag Surface View').setState('visible',false);
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>MouseLeftClick</Event>
							<Scripts>
								<Script>
									Display.error("MouseLeftClick!!!");
									
									var asset = parent.getState('asset');
									
									if (asset.componentType=="Scene")
									{
										//Init Scene Editor
										var sceneEditor = Logic.getEntityByName('2d Scene Editor');
										
										
										if (asset.name!=sceneEditor.s('assetName'))
										{
											sceneEditor.setState('assetUserName', asset.owner.user.name);
											sceneEditor.setState('assetType',asset.type);
											sceneEditor.setState('assetName',asset.name);
											
											//Start up Scene Editor
											sceneEditor.startAction('GetAsset');
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>MouseRightClick</Event>
							<Scripts>
								<Script>
									function createContextNode(nodeName,nodeType,parentNode)
									{
										var node = {};
										node.name=nodeName;
										node.children = [];
										node.type=nodeType;
										parentNode.children.push(node);
										
										return node;
									}
									
									var mainList = {};
									mainList.children = [];
									
									createContextNode("eStates (alpha)","ExistingStates",mainList);
									createContextNode("Remove (alpha)","Remove",mainList);
									
									var mousePosX = Input.pointer.currentX;
									var mousePosY = Input.pointer.currentY;
									
									
									//Open Popup [CHOOSE AC]
									var popUpManager = Logic.getEntityByName('PopUp Manager');
									var popUpAction = popUpManager.getAction('Open PopUp');
									popUpAction.setState('popupName',"SparkEditor.entities.popups.items.EventSheetContextMenuPopUpNoArrow");
									popUpAction.setState('popupPosX',mousePosX);
									popUpAction.setState('popupPosY',mousePosY);
									popUpAction.setState('argA',mainList);
									popUpAction.setState('cb_caller',me);
									popUpAction.setState('cb_actionName','Callback: ProjectItem Context Menu');
									popUpManager.forceAction('Open PopUp');
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>NetworkRequest</Event>
							<Target>TargetNone</Target>
							<Scripts>
								<Script>
									if (Comms.getRequestData("deleteAssetProject")!=null)
									{
										if (me.getState('tempDeleting')) //if it's me who's getting removed..
										{
											var data = Comms.getRequestData("deleteAssetProject");
											
											me.setState('tempDeleting',false);
											
											if (data.code=="success")
											{
												Display.error('Remove Asset success!');
												Logic.getEntityByName('Editor Output').setState('text','Asset Removed Successfully!');
												parent.parentEntity.removeChild(parent);
												
												//Now, we need to remove them from ModuleThingie..
												var assetReferences = me.getState('tempAssetReferencesToDelete');
												Comms.request("assets.updateHandler.removeProjectMainModuleAssetReferences", {assetReferences: assetReferences}, "whatever dude...");
											}
											else
											{
												Display.error('Remove Asset error!');
												Logic.getEntityByName('Editor Output').setState('text','Error Removing Asset :(');
											}
										}
									}
									else if (Comms.getRequestData("updatedClassAsset")!=null)
									{
										if (me.getState('tempUploading')) //if it's me who's uploading this..
										{
											var data = Comms.getRequestData("updatedClassAsset");
											
											if (data.code=="success")
											{
												Display.error('Updated Class Asset fucking success!');
												Logic.getEntityByName('Editor Output').setState('text','Almost done!');
												
												//Ok here's the thing.. If I were to override flambe Asset system a bit I could directly update the Class File (you change the asset._content String)
												//But i don't wanna do that just yet.. so I'll do the dump thing and RELOAD the asset back from the server...
												//Initiate Load
												var loader = Assets.initiateBatch();
												
												var asset = parent.getState('asset');
												var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
												var assetUrl = '/assets/' + connectedUserName + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
												var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
												
												
												//Add file to Flambe Loader
												loader.addFile(assetUrl, assetId);
												
												var oldMe = me;
												
												//Event Listener
												loader.successSignal.connect(function () {
													oldMe.setState('tempUploading',false);
													Logic.getEntityByName('Editor Output').setState('text','All done!');
													
													//Update Inheritance
													Logic.getEntityByName('Project Editor').getAction('RegisterInheritance').setState('asset',asset);
													Logic.getEntityByName('Project Editor').startAction('RegisterInheritance');
													
												}).once();
												
												//Load
												loader.start();
											}
											else
											{
												Display.error('Updated Class Asset error!');
												Logic.getEntityByName('Editor Output').setState('text','Error Updating Entity :(');
											}
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<!-- Update Class Object Asset-->
						<Trigger>
							<Event>FileTransferRequest</Event>
							<Target>TargetNone</Target>
							<Scripts>
								<Script>
									if (Comms.file_getSendFileRequestData("updatedClassAsset")!=null)
									{
										if (me.getState('tempUploading')) //if it's me who's uploading this..
										{
											var data = Comms.file_getSendFileRequestData("updatedClassAsset");
											
											Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
											
											if (data.progress==1)
											{
												Display.error("FILE: " + 'File Uploaded!');
												
												var asset = parent.getState('asset');
												Display.error("FILE: " + asset.name);
												//incomingFileName
												var incomingFileName = "updatedClassAsset";
												var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
												Comms.request("assets.uploadHandler.updateAssetFile", {assetUserName: connectedUserName, assetType:asset.type, assetName:asset.name, incomingFileName:incomingFileName}, "updatedClassAsset");
											}
										}
									}
								</Script>
							</Scripts>
						</Trigger>
					</_Triggers>
						
					<_Actions>
						<Action>
							<Id>CreateMStates</Id>
							<Concurrency>Persistent</Concurrency>
							<Scripts>
								<Script>
									//forced
									
									//Get the class object asset
									var asset = parent.getState('asset');
									Display.error("My Asset.name is: " + asset.name);
									
									//Check hash to pick up it's classes
									var MStatesHashByName = Logic.getEntityByName('Project Editor').getState("MStatesHashByName");
									var mstatesMap = MStatesHashByName.get(asset.name);
									Display.error(mstatesMap);
									it.setState('returnMStates',mstatesMap);	//mstatesMap is read only.. don't write to it..
								</Script>
							</Scripts>
							<States>
								<State><Id>returnMStates</Id><Type>Dynamic</Type><Value>null</Value></State>
							</States>
						</Action>
						
						<!-- Callback: MStates Window -->
						<Action>
							<Id>Callback: MStates Window</Id>
							<Concurrency>Persistent</Concurrency>
							<Scripts>
								<Script>
									//forced
									
									var cb_result = it.getState('cb_result');
									var cb_Arg1 = it.getState('cb_Arg1');
									
									if (cb_result=="OK")
									{
										Display.error("Callback: Select AC: OK");
										
										
										var asset = parent.getState('asset');
										
										//Display.error("My Class2 is: " + asset.name + ", and id: " + asset._id);
										
										//Get the ASSET'S XML.. doihh..
										var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
										var asset_xml = Xml.parse(Assets.getFile(assetId).toString()).firstElement();
										
										//Remove All Merge States here
										var statesNode = Logic.xml_getElement(asset_xml, "_States");
										Logic.xml_entity_removeAllNodes(statesNode,"_State");
										
										var objectRenamed = null;
										
										//Add new _States
										for (item of cb_Arg1)
										{
											//Display.error("ADDING: " + "id: " + item.id + ", type: " + item.type + ", value: " + item.value);
											Logic.xml_entity_addMState(asset_xml, item, true);
											
											//Check for rename
											if (item.id=="name")
												if (item.value!=asset.title)
													objectRenamed=item.value;
									
											//Change "Dynamic" MStates on the spot!
											if (item.id=="gravityX" || item.id=="gravityY")
												e('2d Scene Editor').s('target').setState(item.id,item.value); //very very baad
										}
										
										//So.. over here we check if name has changed, cause this needs us to do a lot of stuff.. (renaming an object)
										if (objectRenamed!=null)
										{
											parent.getAction('Rename').setState('newName',objectRenamed);
											parent.forceAction('Rename');
										}
						
										//Display.error("XML OUTPUT: " + Logic.xmlToString(asset_xml));
										
										//Get me ready to upload stuff
										me.setState('tempUploading',true);
										
										//Upload it
										var finalString = Logic.xmlToString(asset_xml);
										var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
										Logic.getEntityByName('Editor Output').setState('text','Please Wait...');
										
										Comms.file_sendFileRequest(finalString, {name: "updatedClassAsset", size: finalString.length, user: connectedUserName} , "updatedClassAsset");
									}
									else
									{
										Display.error("Callback: Select AC: CANCEL");
									}
								</Script>
							</Scripts>
							<States>
								<State><Id>cb_result</Id><Type>Text</Type><Value>Undefined</Value></State>
								<State><Id>cb_Arg1</Id><Type>Dynamic</Type><Value>null</Value></State>
							</States>
						</Action>
				
						<!-- Callback: ProjectItem Context Menu -->
						<Action>
							<Id>Callback: ProjectItem Context Menu</Id>
							<Concurrency>Persistent</Concurrency>
							<Scripts>
								<Script>
									//forced
									
									var cb_result = it.getState('cb_result');
									var cb_Arg1 = it.getState('cb_Arg1');
									
									if (cb_result=="OK")
									{
										Display.error("Callback: Select AC: OK");
										Display.error("Got: " + cb_Arg1.name);
										
										if (cb_Arg1.type=="ExistingStates")
										{
											me.forceAction('CreateMStates');
											var mstates = me.getAction('CreateMStates').getState('returnMStates');
											
											var mousePosX = Input.pointer.currentX;
											var mousePosY = Input.pointer.currentY;
											
											//Open Popup
											var popUpManager = Logic.getEntityByName('PopUp Manager');
											var popUpAction = popUpManager.getAction('Open PopUp');
											popUpAction.setState('popupName',"SparkEditor.entities.popups.items.MStatesPopUp");
											popUpAction.setState('popupPosX',mousePosX);
											popUpAction.setState('popupPosY',mousePosY);
											popUpAction.setState('argA',mstates);
											popUpAction.setState('cb_caller',me);
											popUpAction.setState('cb_actionName','Callback: MStates Window');
											popUpManager.forceAction('Open PopUp');
										}
										else if (cb_Arg1.type=="Remove")
										{
											var asset = parent.getState('asset');
											
											
											//Figure out what we're trying to delete
											if (asset.componentType=="Project")
											{
												Logic.getEntityByName('Editor Output').setState('text','Cannot remove Project');
											}
											else if (asset.componentType=="Object Class")//but then, for the rest Object Classes (classes that have an asset thumb reference, do this)
											{
												me.setState('tempDeleting',true);
												
												var assetIds=[];
												assetIds.push(asset._id);
												
												if (asset.tags[1]=="Text") //|| Sound, || ...
												{
													Display.log("This Object Class has no dependancies");
												}
												else
												{
													//Assume for now it's an Image thing that has one dependancy only, stored on tag[1]
													assetIds.push(asset.tags[1]);
												}
												
												
												//Store this, to remove the references from the main module as well
												me.setState('tempAssetReferencesToDelete',assetIds);
												
												//Do the thing
												Comms.request("assets.uploadHandler.deleteAssets", {assetIds: [asset._id]}, "deleteAssetProject");
											}
											else if (asset.componentType=="Image" || asset.componentType=="Sound")
											{
												Logic.getEntityByName('Editor Output').setState('text','Asset Removed Successfully!');
												parent.parentEntity.removeChild(parent);
												
												//Now, we need to remove them from ModuleThingie..
												Comms.request("assets.updateHandler.removeProjectMainModuleAssetReferences", {assetReferences: [asset._id]}, "whatever dude...");
											}
										}
									}
									else
									{
										Display.error("Callback: Select AC: CANCEL");
									}
								</Script>
							</Scripts>
							<States>
								<State><Id>cb_result</Id><Type>Text</Type><Value>Undefined</Value></State>
								<State><Id>cb_Arg1</Id><Type>Dynamic</Type><Value>null</Value></State>
							</States>
						</Action>
					</_Actions>
				</Entity>
					
				<!-- Caption -->
				<Entity extends="std.display.Text">
					<_States>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="bottom"><Value>0</Value></_State>
						<_State id="textAlign"><Value>center</Value></_State>
						<_State id="fontSize"><Value>12px</Value></_State>
					</_States>
					<_Actions><_Action id="Constructor"><_Scripts><Script>
						me.setState('text',parent.getState('caption'));
						parent.setState('captionObject',me);
					</Script></_Scripts></_Action></_Actions>
				</Entity>
			</Entities>
		</Space>
	</Form>
</Entity>