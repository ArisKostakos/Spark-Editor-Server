<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.HGroup">
	<_States>
		<_State id="name"><Value>Editor Library Collections</Value></_State>
		<_State id="gap"><Value>0</Value></_State>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>100%</Value></_State>
		<State><Id>selectedCategoryObject</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>collectionsHash</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>importTypesHash</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<!-- Constructor -->
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					//Create hash: File extension to Import Type
					var importTypesHash = new StringMap();
					
					importTypesHash.set('png','image');
					importTypesHash.set('jpg','image');
					
					importTypesHash.set('scml','spriter');
					
					importTypesHash.set('plist','spritesheet');
					
					importTypesHash.set('ogg','sound');
					importTypesHash.set('mp3','sound');
					importTypesHash.set('m4a','sound');
					
					importTypesHash.set('mp4','video');
					
					importTypesHash.set('egc','data');//behavior?
					
					//Create hash: Import Type to Asset Type
					//..
					
					me.setState('importTypesHash',importTypesHash);
				</Script>
			</_Scripts>
		</_Action>
		
		<!-- ImportRequest (From a File)-->
		<Action>
			<Id>ImportRequest</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("ImportRequest");
					
					//Get Hashes
					var collectionsHash = me.getState('collectionsHash');
					var importTypesHash = me.getState('importTypesHash');
					
					//Get File
					var file = me.getAction('ImportRequest').getState('file');
					
					var fileName = file.name.substring(0,file.name.lastIndexOf("."));
					var fileExtension = file.name.substring(file.name.lastIndexOf(".") + 1, file.name.length);
					
					//Determine Import Type
					var importType = importTypesHash.get(fileExtension);
					
					//Check which of are collections would be interested in this importType
					if (importType==null)
					{
						Display.error("ERROR: Could not deduce importType from given file extension!");
					}
					else
					{
						Display.error('ImportRequest: ' + fileName + ", of size: " + file.size + ", with extension: " + fileExtension + ", and importType: " + importType);
						
						var collectionsFound = [];
						for (collection in collectionsHash)
						{
							if (collection.getState('importTypes')[0]==importType)
								collectionsFound.push(collection);
						}
						
						if (collectionsFound.length==0)
						{
							Display.error("ERROR: No collection likes this import type!");
						}
						else
						{
							if (collectionsFound.length>1)
							{
								Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
							}
							else
							{
								Display.error("NOTE: Found " + collectionsFound.length + " collections that like this type!");
								
								//NOTE: here's how I'm going to tackle uploading for now..
								//Collections (this entity) is responsible for figuring out ComponentType, Tags, and uploading of the asset
								//It figures these things out with three ways..
								//a) it checks out the library collections currently added to this project
								//b) it pops up a dialog to ask the user
								//c) it makes some hard decisions itself (i will rely mostly on this for now)
								
								//For now, uses (c), if importType is 'image' i will assign componentType 'Image' and tags, none, other than project for first tag ofc..
								
								
								
								var username = Logic.getEntityByName('Spark Editor').getState('username');
								//Upload the file from the file service
								Comms.file_sendFileRequest(file, {name: file.name, size: file.size, user: username} , file.name);
								
								//Send UploadItem to the collection
								collectionsFound[0].getAction('UploadFile').setState('file',file);
								collectionsFound[0].getAction('UploadFile').setState('componentType','Image'); //later, you use a hash to translate importType to componentType
								collectionsFound[0].getAction('UploadFile').setState('assetType','image'); //later, you use a hash to translate importType to assetType
								collectionsFound[0].getAction('UploadFile').setState('tags',''); //later, figure out tags too
								collectionsFound[0].startAction('UploadFile');
							}
						}
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>file</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		<!-- ImportRequestAssetDb-->
		<Action>
			<Id>ImportRequestAssetsDb</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					me.stopAction("ImportRequestAssetsDb");
					//Get Hashes
					var collectionsHash = me.getState('collectionsHash');
					//var importTypesHash = me.getState('importTypesHash');
					
					//So Normally, I find an appropriate Library Collection by checking the library collection filters, against the asset db..
					//But here comes a simplified version.. again..
					
					var assets = me.getAction('ImportRequestAssetsDb').getState('assets');
					
					Display.error("ImportRequestAssetDbImportRequestAssetDb: length: " + assets.length);
					
					
					var imageAssets = [];
					
					//Again, here comes a moronic simplified versin to replace the advanced way of checking every asset against all collection's filtering system..
					for (asset in assets)
					{
						if (asset.type=="image")
						{
							imageAssets.push(asset);
							Display.error("Yeah boyyy: " + asset.name);
						}
					}
					Display.error("imageAssets: length: " + imageAssets.length);
					
					if (imageAssets.length==0) return;
					
					//Determine Import Type
					var importType = 'image'; //find collections that accept image importTypes... later on, do the hash legwork
					
					//Check which of are collections would be interested in this importType
					if (importType==null)
					{
						Display.error("ERROR: Could not deduce importType from given file extension!");
					}
					else
					{
						var collectionsFound = [];
						for (collection in collectionsHash)
						{
							if (collection.getState('importTypes')[0]==importType)
								collectionsFound.push(collection);
						}
						
						if (collectionsFound.length==0)
						{
							Display.error("ERROR: No collection likes this import type!");
						}
						else
						{
							if (collectionsFound.length>1)
							{
								Display.error("ERROR: It becomes a bit tricky when more than one collections want this, because we don't know what tags and what componentType to upload this asset with!");
							}
							else
							{
								//Send asset to the collection
								collectionsFound[0].getAction('AddAssetsDB').setState('assets',imageAssets);
								collectionsFound[0].startAction('AddAssetsDB');
							}
						}
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>assets</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
		
		
		<!-- SelectCategory -->
		<Action>
			<Id>SelectCategory</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					var oldSelected = me.getState('selectedCategoryObject');
					var newSelected = me.getAction('SelectCategory').getState('selectionRequest');
					var collectionsHash = me.getState('collectionsHash');
					
					if (oldSelected!=newSelected)
					{
						if (oldSelected!=null)
						{
							oldSelected.startAction("Unselected");
							collectionsHash.get(oldSelected).setState('display','none');
						}
						
						if (newSelected!=null)
						{
							newSelected.startAction("Selected");
							collectionsHash.get(newSelected).setState('display','inline');
						}
							
						me.setState('selectedCategoryObject', newSelected);
					}
					
					me.stopAction("SelectCategory");
				</Script>
			</Scripts>
			<States>
				<State><Id>selectionRequest</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
	
	<Form>
		<Space>
			<Entities>
				<!-- Categories -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="name"><Value>Editor Library Collections Buttons Container</Value></_State>
						<_State id="gap"><Value>0</Value></_State><!--3-->
						<_State id="width"><Value>85</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
					</_States>
					<Form><Space><Entities>

					</Entities></Space></Form>
				</Entity>
				
				<!-- Sub-Categories -->
				<Entity extends="std.display.Group">
					<_States>
						<_State id="name"><Value>Editor Library Collections Panels Container</Value></_State>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
					</_States>
					<Form><Space><Entities>
					
					</Entities></Space></Form>
				</Entity>
			</Entities>
		</Space>
	</Form>
</Entity>