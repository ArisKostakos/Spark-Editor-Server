<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.EditorIconTextHorizontalButton">
	<_States>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>22</Value></_State>
		<_State id="backgroundColor"><Value>rgb(82,107,125)</Value></_State>
		<_State id="textfontSize"><Value>10</Value></_State>
		<_State id="isAssetItem"><Value>true</Value></_State>
		
		<State><Id>component</Id><Type>Dynamic</Type><Value>null</Value></State>
		
		<!--
		<State><Id>selected</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>selectedColor</Id><Type>Text</Type><Value>white</Value></State>
		-->
		
	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Selected -->
				
			</_Entities>
		</_Space>
	</_Form>
	
	<_Triggers>
		<Trigger>
			<Event>MouseLeftClicked</Event>
			<Scripts>
				<Script>
					//Hacking away...
					var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
					var asset = me.getState('component');
					
					var entityXml = Xml.createElement('Entity');
					entityXml.set('extends' , 'std.display.Image2D');
					
					var statesXml = Xml.createElement('_States');
					var stateXml = Xml.createElement('_State');
					stateXml.set('id', '2DMeshImageForm');
					var stateValueXml = Xml.createElement('Value');
					stateValueXml.addChild(Xml.parse('ImageUrl'));
					
					var formXml = Xml.createElement('_Form');
					var formStatesXml = Xml.createElement('_States');
					var formStateXml = Xml.createElement('State');
					var formStateIdXml = Xml.createElement('Id');
					formStateIdXml.addChild(Xml.parse('ImageUrl'));
					var formStateTypeXml = Xml.createElement('Type');
					formStateTypeXml.addChild(Xml.parse('Text'));
					var formStateValueXml = Xml.createElement('Value');
					formStateValueXml.addChild(Xml.parse('image_' + asset.name));
					
					entityXml.addChild(statesXml);
						statesXml.addChild(stateXml);
							stateXml.addChild(stateValueXml);
					entityXml.addChild(formXml);
						formXml.addChild(formStatesXml);
							formStatesXml.addChild(formStateXml);
								formStateXml.addChild(formStateIdXml);
								formStateXml.addChild(formStateTypeXml);
								formStateXml.addChild(formStateValueXml);
					
					var pureXml = Xml.parse(entityXml.toString());
					Display.error("SPRITE XML: " + pureXml.firstElement());
						
					var childEntity = Logic.gameFactory.createGameEntityByXml(pureXml.firstElement());
					scene.addChild(childEntity);
					/*
					//REPLACE ' temp ' with ' .. '
					var textureUrl = "../assets/" + username + "/images/" + component.libraryName + "/" + component.componentname;
					var egcUrl = "../assets/" + username + "/scripts/" + component.libraryName + "/" + componentNameClean + '.egc';
					
					Assets.initiateBatch();
					//Display.error("Initiate texture load with url: " + textureUrl);
					//Display.error("Initiate egc load with url: " + egcUrl);
					Assets.addFile(textureUrl, "editor");
					Assets.addFile(egcUrl, componentNameClean + ".egc");
					Assets.loadBatch();
					*/
					/*
					var myContainer = parent.parentEntity;
					
					myContainer.possibleActionSet.get('SelectCategory').gameStateSet.get('selectionRequest').value = me;
					myContainer.startAction("SelectCategory");*/
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
	
	<_Actions>
		<!-- Selected -->
		<Action>
			<Id>Selected</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>/*
					me.getState('textObject').setState('fontColor',me.getState('selectedTextColor'));
					me.getState('imageObject').setState('src', me.getState('imageName')+me.getState('selectedImageSuffix'));
					me.stopAction("Selected");*/
				</Script>
			</Scripts>
		</Action>

		<!-- Unselected -->
		<Action>
			<Id>Unselected</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>/*
					me.getState('textObject').setState('fontColor',me.getState('normalTextColor'));
					me.getState('imageObject').setState('src', me.getState('imageName'));
					me.stopAction("Unselected");*/
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>