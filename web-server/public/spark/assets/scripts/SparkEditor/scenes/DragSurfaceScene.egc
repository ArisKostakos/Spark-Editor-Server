<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Scene2D">

	<_States>
		<_State id="name">
			<Value>Drag Surface Scene</Value>
		</_State>
		<State><Id>assetBeingDragged</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>libraryOfAssetBeingDragged</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<Form>
		<Space>
			<Entities>
				<Entity extends="std.display.Div">
					<_States>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
						<_State id="backgroundColor"><Value>white</Value></_State>
						<_State id="opacity"><Value>0.25</Value></_State>
						<_State id="dropTarget"><Value>true</Value></_State>
						<State><Id>temp_newAssetName</Id><Type>Text</Type><Value>Undefined</Value></State>
						<State><Id>temp_newAssetSize</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_dropX</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_dropY</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_newAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
					</_States>
					<_Triggers>
						<Trigger>
							<Event>OnDrop</Event>
							<Scripts>
								<Script>
									function firstElementNamed(p_xmlNode, p_elementName)
									{
										if (p_xmlNode.elementsNamed(p_elementName).hasNext())
										{
											return p_xmlNode.elementsNamed(p_elementName).next();
										}
										else
										{
											return null;
										}
									}
					
									//Figure out X, Y, etc..
									var eventObject = me.getState('eventObject');
									var localX = eventObject.clientX - eventObject.target.getBoundingClientRect().left;
									var localY = eventObject.clientY - eventObject.target.getBoundingClientRect().top;
									Display.error("OnDrop-> X: " + localX + ", Y: " + localY);
									
									//Add Camera Offsets and Scaling
									var camera = Logic.getEntityByName('Editor Scene Edit Camera');
									var scale = camera.getState('scaleX');
									localX = localX / scale + camera.getState('captureAreaX');
									localY = localY / scale + camera.getState('captureAreaY');
									
									me.setState('temp_dropX',Std.int(localX));
									me.setState('temp_dropY',Std.int(localY));
									
									//Get the Asset & stuff
									var asset = parent.getState('assetBeingDragged');
									var assetLibrary = parent.getState('libraryOfAssetBeingDragged');
									//var componentType = assetBeingDragged.componentType;
									
									Display.error('Dropping: ' + asset.name);
									
									
									if (asset.componentType=="Sound")
									{
										Display.error("It's a sound!");
										Comms.request("assets.updateHandler.addProjectMainModuleAssetReferences", {assetReferences: [asset._id]}, "whatever dude...");
										Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyNameHash').set(asset.name,asset);
										Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
										
										//Initiate Load
										Assets.initiateBatch();
										
										//The Dragged Asset (Image, Text.egc, etc)
										var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
										var assetBeingDraggedUrl = '/assets/' + connectedUserName + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
										var assetBeingDraggedId = 'sound_' + asset.name;
										Display.error(assetBeingDraggedUrl);
										Display.error(assetBeingDraggedId);
										Assets.addFile(assetBeingDraggedUrl, assetBeingDraggedId);
										
										Logic.getEntityByName('Editor Output').setState('text',"Please Wait...!");
										
										//Event Listener
										Assets.successSignal.connect(function () {
											Logic.getEntityByName('Editor Output').setState('text',"Sound Loaded!");
											
											//Send it to Project Collections
											var projectCollections = Logic.getEntityByName('Editor Project Collections');
											
											var moduleAssetsToAdd = new StringMap();
											moduleAssetsToAdd.set(asset.name,asset);
											projectCollections.getAction('ImportRequestAssetsDb').setState('assets', moduleAssetsToAdd);
											projectCollections.startAction('ImportRequestAssetsDb');
											
										}).once();
										
										//Load
										Assets.loadBatch();
										
										return;
									}
									
									
									var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
									
									var pureXml;
									
									var displayTypeData;
									
									var gridLock;
									
									
									
									//Ok, here we go
									var classObjectsCount = Logic.getEntityByName('Project Editor').getState('classObjectsCount') + 1;
									
									//let's name it
									//var newClassName = asset.fileName + "_" + Std.random(99); //I guess check the hash, if 1 exist, go to 2, etc, until u find a gap
									
									var newClassName;
									if (asset.componentType=="Class")
										newClassName = asset.tags[1] + "_" + Std.string(classObjectsCount); //I guess check the hash, if 1 exist, go to 2, etc, until u find a gap
									else if (asset.componentType=="Image")
										newClassName = "Sprite_" + Std.string(classObjectsCount); //I guess check the hash, if 1 exist, go to 2, etc, until u find a gap
									
									Logic.getEntityByName('Project Editor').setState('classObjectsCount',classObjectsCount);
									
									//Update Project Tags (not nice to do it here, but... oh well
									var newTags = [];
									var projectAsset = Logic.getEntityByName('Project Editor').getState('asset');
									newTags.push(projectAsset.tags[0]); //0:  project/template
									newTags.push(Std.string(classObjectsCount)); //1: objectsCount
									
									//update assetDb
									Comms.request("lobby.projectHandler.updateProjectEntry", {projectId:projectAsset._id, field:"tags", newValue:newTags}, "whatever...");
									
									//check how i add things now.. plan how i'll do it differently
									
									//create new xml based on library collection
									var newXml = Xml.createDocument();
									
									
									if (asset.componentType=="Class")
									{
										//Get Class egc file
										var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
										var entityXml = Xml.parse(Assets.getFile(assetId).toString()).firstElement();
										newXml.addChild(entityXml);
										
										entityXml.addChild(Logic.xml_createElement("Extends"));
										
										//Add States
										Logic.xml_entity_addMState(entityXml, {id:"name", value: newClassName },true);
									}
									else if (asset.componentType=="Image")
									{
										//Create entityXml
										var entityXml = Logic.xml_createElementAttr('Entity','extends', assetLibrary.baseClass );
										newXml.addChild(entityXml);
										
										entityXml.addChild(Logic.xml_createElement("Extends"));
										
										//Add States
										Logic.xml_entity_addMState(entityXml, {id:"name", value: newClassName },true);
										Logic.xml_entity_addMState(entityXml, {id:"touchable", value: 'true' },true);
										
										if (assetLibrary.baseClass=="std.display.Image2D")
										{
											Logic.xml_entity_addMState(entityXml, {id:"2DMeshImageForm", value: 'ImageUrl' },true);
											Logic.xml_entity_addFormState(entityXml, {id: 'ImageUrl', type: 'Text', value: 'image_' + asset.name}, true, true);
										}
									}
									
									
									var finalString = Logic.xmlToString(newXml);
									Display.error("newXml: " + finalString);
									
									var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
									Logic.getEntityByName('Editor Output').setState('text','Please Wait...');

									me.setState('temp_newAssetName',newClassName);
									me.setState('temp_newAssetSize',finalString.length);
									
									Comms.file_sendFileRequest(finalString, {name: newClassName+'.egc', size: finalString.length, user: connectedUserName} , "DragSurface Creating Asset Step 1");
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>FileTransferRequest</Event>
							<Target>TargetNone</Target>
							<Scripts>
								<Script>
									if (Comms.file_getSendFileRequestData("DragSurface Creating Asset Step 1")!=null)
									{
										var data = Comms.file_getSendFileRequestData("DragSurface Creating Asset Step 1");
										
										Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
										
										//Logic.getEntityByName('AU_output').getState('value').setState('text','Uploading ' + data.progressPercent+'%');
						
										if (data.progress==1)
										{
											Logic.getEntityByName('Editor Output').setState('text','File Uploaded!');
											
											var libraryAsset = parent.getState('assetBeingDragged');
											var newAssetName = me.getState('temp_newAssetName');
											var newAssetSize = me.getState('temp_newAssetSize');
											
											//fileName
											var fileName = newAssetName+'.egc';
											
											//fileSize
											var fileSize = newAssetSize;
											
											//assetTitle.. not being used currently
											var assetTitle=newAssetName;
											
											//Dir
											var dir = "entities";
											
											//type
											var type = "script";
											
											//componentType
											var componentType = "Object Class"; //This should be determined by Library Collection stuff!!!!
											
											//tags
											//(second tag of Object Class is the asset used to display ThumbNail. added option to use lib_name for thumb too. This should be determined by Library Collection stuff!!!!
											if (libraryAsset.componentType=="Class")
												var tags = libraryAsset.tags[1];
											else if (libraryAsset.componentType=="Image")
												var tags =  libraryAsset._id;
											else
											{
												var tags = ""; //Should not really go there, ever!
												Display.error("ERROR!!!!! UNKNOWN COMPONENT TYPE: " + asset.componentType);
											}
											
											
											Comms.request("assets.uploadHandler.rawUpload", {fileName: fileName, fileSize: fileSize, assetTitle: assetTitle, dir: dir, type: type, componentType: componentType, tags: tags}, "DragSurface Creating Asset Step 2");
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>NetworkRequest</Event>
							<Target>TargetNone</Target>
							<Scripts>
								<Script>
									if (Comms.getRequestData("DragSurface Creating Asset Step 2")!=null)
									{
										var data = Comms.getRequestData("DragSurface Creating Asset Step 2");
										
										if (data.code=="success")
										{
											Logic.getEntityByName('Editor Output').setState('text','Asset Created: ' + data.assetName);
											
											//Step 3
											//Flambe Load the egc and if it's an image, flambe load the texture (and any other dependancies it has, later)
											
											var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
											
											//Initiate Load
											Assets.initiateBatch();
											
											var assetReferences = [];
											
											var assetBeingDragged = parent.getState('assetBeingDragged');
											
											
											//Flambe Load Object Class egc
											var asset = data.asset;
											var assetUrl = '/assets/' + connectedUserName + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
											var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
											Assets.addFile(assetUrl, assetId);
											me.setState('temp_newAsset',asset);
											
											assetReferences.push(asset._id);
											
											
											
											//Flambe Load Image Asset
											//maybe, don't always load the texture, if it's already loaded..
											if (assetBeingDragged.componentType=="Image")
											{
												//The Dragged Asset (Image, Text.egc, etc)
												var assetBeingDraggedUrl = '/assets/' + connectedUserName + '/' + assetBeingDragged.type + '/' + assetBeingDragged.dir + '/' + assetBeingDragged.fileName + '.' + assetBeingDragged.fileExtension;
												var assetBeingDraggedId = 'image_' + assetBeingDragged.name;
												Assets.addFile(assetBeingDraggedUrl, assetBeingDraggedId);
												
												assetReferences.push(assetBeingDragged._id);
											}
											
											
											
											
											
											Comms.request("assets.updateHandler.addProjectMainModuleAssetReferences", {assetReferences: assetReferences}, "whatever dude...");
											
											//Hash the newly created Asset
											//These may fit better inside the 'whatever dude' callback...
											Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyAssetIdHash').set(asset._id,asset);
											Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyNameHash').set(asset.name,asset);
											Logic.getEntityByName('Project Editor').getState('ClassObjectsDBbyNameHash').set(asset.name,asset);
											Logic.getEntityByName('Project Editor').getState('ClassObjectsDBbyFilenameHash').set(asset.fileName,asset);
											
											if (assetBeingDragged.componentType=="Image")
											{
												Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyNameHash').set(assetBeingDragged.name,assetBeingDragged);
												Logic.getEntityByName('Project Editor').getState('ModuleAssetsDBbyAssetIdHash').set(assetBeingDragged._id,assetBeingDragged);
											}
											//Display.error("**************************YOYOYOYOYO*****************");
											
											var oldMe = me;
											
											//Event Listener
											Assets.successSignal.connect(function () {
												Logic.getEntityByName('Editor Output').setState('text',"Everything Flambe Loaded!");
												
												
												//Step 4
												//Create the instance XML
												var entityXml = Logic.xml_createElementAttr('Entity','extends', asset.name );
												
												//Add States
												Logic.xml_entity_addMState(entityXml, {id:"id", value: Std.string(0) },true); //incremental, like class, or unique for every class, or...?
												Logic.xml_entity_addMState(entityXml, {id:"spaceX", value: Std.string(oldMe.getState('temp_dropX')) },true);
												Logic.xml_entity_addMState(entityXml, {id:"spaceY", value: Std.string(oldMe.getState('temp_dropY')) },true);
												
												
												//Step 5
												//Create the GameObject, import it's xml data, add it to scene
												var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
												
												var tempEntityChildXml = Logic.xml_clone(entityXml);
												Logic.xml_entity_addExtend(tempEntityChildXml, {ext: 'SparkEditor.entities.editors.behaviors.Sprite2DEdit'});
												
												var editChild = Logic.gameFactory.createGameEntityByXml(tempEntityChildXml);
												
												
												//Do some more hashing (needs asset to be flambe loaded to work, this one...)
												Logic.getEntityByName('Project Editor').getAction('RegisterInheritance').setState('asset',asset);
												Logic.getEntityByName('Project Editor').startAction('RegisterInheritance');
												
												
												//Send them to Project Collections
												var projectCollections = Logic.getEntityByName('Editor Project Collections');
												
												var moduleAssetsToAdd = new StringMap();
												moduleAssetsToAdd.set(asset.name,asset); //Object Class
												
												//Maybe don't add the image if already exists
												if (assetBeingDragged.componentType=="Image")
													moduleAssetsToAdd.set(assetBeingDragged.name,assetBeingDragged); //The Image Asset
													
												projectCollections.getAction('ImportRequestAssetsDb').setState('assets', moduleAssetsToAdd);
												projectCollections.startAction('ImportRequestAssetsDb');
												
												//add it as child
												scene.addChild(editChild);
												editChild.getAction('Import Xml').setState('importXml',entityXml);
												editChild.forceAction('Import Xml');
												Display.error("created and added!!!");
											}).once();
											
											//Load
											Assets.loadBatch();
											
										}
										else if (data.code=="dMissing")
										{
											Logic.getEntityByName('Editor Output').setState('text','Missing: ' + data.dependancyName);
										}
										else if (data.code=="exists")
										{
											Logic.getEntityByName('Editor Output').setState('text','Already exists: ' + data.assetName);
										}
										else
										{
											Logic.getEntityByName('Editor Output').setState('text','Error Creating Asset.');
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<!--<Trigger> OLD ONE
							<Event>OnDrop</Event>
							<Scripts>
								<Script>
									function firstElementNamed(p_xmlNode, p_elementName)
									{
										if (p_xmlNode.elementsNamed(p_elementName).hasNext())
										{
											return p_xmlNode.elementsNamed(p_elementName).next();
										}
										else
										{
											return null;
										}
									}
					
									var eventObject = me.getState('eventObject');
									var localX = eventObject.clientX - eventObject.target.getBoundingClientRect().left;
									var localY = eventObject.clientY - eventObject.target.getBoundingClientRect().top;
									Display.error("OnDrop-> X: " + localX + ", Y: " + localY);
									
									//Add Camera Offsets and Scaling
									var camera = Logic.getEntityByName('Editor Scene Edit Camera');
									var scale = camera.getState('scaleX');
									localX = localX / scale + camera.getState('captureAreaX');
									localY = localY / scale + camera.getState('captureAreaY');
									
									var assetBeingDragged = parent.getState('assetBeingDragged');
									var componentType = assetBeingDragged.componentType;
									
									Display.error('Dropping: ' + assetBeingDragged.name);
									
									var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
									
									var pureXml;
									
									var displayTypeData;
									
									var gridLock;
									
									if (componentType=='Tile')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/tile/Tile.egc').toString()).firstElement();
										
										//Gridlock localX and localY
										gridLock = 64; //64;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
										
										displayTypeData = "Image";
									}
									else if (componentType=='Prop')
									{
										//Get appropriate class (as an xml)
										if (assetBeingDragged.tags[1]=="Background")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropBackground.egc').toString()).firstElement();
										else if (assetBeingDragged.tags[1]=="Static")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropStatic.egc').toString()).firstElement();
										else if (assetBeingDragged.tags[1]=="Dynamic")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropDynamic.egc').toString()).firstElement();
										
										//Gridlock localX and localY
										gridLock = 8 ; //64; //8;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
										
										displayTypeData = "Image";
									}
									else if (componentType=='Collectible')
									{
										//Get appropriate class (as an xml)
										if (assetBeingDragged.tags[2]=="Coin")
										{
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/collectible/Coin.egc').toString()).firstElement();
											displayTypeData = "Spritesheet";
										}
										else if (assetBeingDragged.tags[2]=="Jewel")
										{
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/collectible/Jewel.egc').toString()).firstElement();
											displayTypeData = "Image";
										}
										
										//Gridlock localX and localY
										gridLock = 8 ; //64; //8;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
									}
									else if (componentType=='Actor')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/actor/player/PlayerPlatform.egc').toString()).firstElement();
										displayTypeData = "Spriter";
										
										gridLock = 1 ;
									}
									else if (componentType=='Background')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/background/PlatformBackground.egc').toString()).firstElement();
										//Display.error('Dropping,boundsX: ' + scene.getState('boundsX'));
										//Display.error('Dropping,boundsY: ' + scene.getState('boundsY'));
										
										//Hack to re-adjust position if it's a background
										var imageWidth = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'width');
										var imageHeight = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'height');
										//Display.error('Dropping,background width: ' + imageWidth);
										//Display.error('Dropping,background height: ' + imageHeight);
										
										localX=scene.getState('boundsX') + imageWidth/2;
										localY=scene.getState('boundsY') + imageHeight/2;
										displayTypeData = "Image";
										
										gridLock = 1 ;
									}
									
									//adjust spaceX and spaceY
									var states = firstElementNamed(pureXml,'_States');
									
									for (state of states.elementsNamed('_State'))
									{
										if (state.get('id')=='spaceX')
										{
											firstElementNamed(state,'Value').firstChild().nodeValue = Std.string(localX);
										}
										else if (state.get('id')=='spaceY')
										{
											firstElementNamed(state,'Value').firstChild().nodeValue = Std.string(localY);
										}
									}
									
									
									//insert the correct images
									var formStates = firstElementNamed(firstElementNamed(pureXml,'_Form'),'_States');
									
									if (displayTypeData == "Image")
									{
										for (state of formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='ImageUrl')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									else if (displayTypeData=='Spriter')
									{
										for (state of formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='SpriterMain')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									else if (displayTypeData=='Spritesheet')
									{
										for (state of formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='SpritesheetMain')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									
									//Display.error('pureXml: ' + pureXml.toString());
									var realXml = Xml.parse(pureXml.toString()).firstElement(); //clone it
									
									//attach the sprite2dEdit behavior
									var extendsNode = firstElementNamed(realXml,'Extends');
									
									//Clean Extends
									for (entity of extendsNode.elementsNamed('Entity'))
									{
										extendsNode.removeChild(entity);
									}
									
									//Add Edit Behavior
									var spriteEditXml = Xml.createElement('Entity');
									spriteEditXml.set('extends','SparkEditor.entities.editors.behaviors.Sprite2DEdit');
									extendsNode.addChild(spriteEditXml);
									
									
									Display.error('realXml: ' + realXml.toString());
									//Create the entity from the uploaded lib asssets
									//var isSpriter = (realXml.get('extends').substr(realXml.get('extends').lastIndexOf('.')+1)=="Spriter2D");
									var tileGameEntity = Logic.gameFactory.createGameEntityByXml(realXml);
									
									//Grid Lock
									//if (isSpriter) 
										tileGameEntity.setState('spriteGridLock',gridLock); //1
									
									//give it snapshot xml
									tileGameEntity.setState('xmlData',pureXml);
									
									//If it's a background put it to background layer, otherwise put it to the main layer ( I wish.. too hard to do layers right now..)
									if (componentType=='Background')
									{
										//add to SceneBoundsDisplay edit object
										Logic.getEntityByName('SceneBoundsDisplay').addChild(tileGameEntity);
										
										//Store the reference
										scene.setState('backgroundEntity',tileGameEntity);
										
										//Untouchable
										tileGameEntity.setState('touchable',false);
										
										//Create a couple more backgrounds to fill the white bounds rect
										var backgroundWidth = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'width')-2; //-2 is to prevent some white gaps betweeen backgrounds
										
										var multipleBackgroundsCount = Math.ceil(scene.getState('boundsWidth')/backgroundWidth);
										var backgroundsCreated = 1;
										
										while (multipleBackgroundsCount>backgroundsCreated)
										{
											var extraBackground = Logic.gameFactory.createGameEntityByXml(realXml);
											extraBackground.setState('spaceX',extraBackground.getState('spaceX')+backgroundWidth*backgroundsCreated);
											Logic.getEntityByName('SceneBoundsDisplay').addChild(extraBackground);
											
											//Untouchable
											extraBackground.setState('touchable',false);
											
											backgroundsCreated+=1;
										}
									}
									else //
									{
										//add to scene
										scene.addChild(tileGameEntity);
									}
								</Script>
							</Scripts>
						</Trigger>-->
					</_Triggers>
				</Entity>
			</Entities>
		</Space>
	</Form>
</Entity>