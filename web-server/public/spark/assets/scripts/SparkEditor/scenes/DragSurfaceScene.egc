<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.display.Scene2D">

	<_States>
		<_State id="name">
			<Value>Drag Surface Scene</Value>
		</_State>
		<State><Id>assetBeingDragged</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<Form>
		<Space>
			<Entities>
				<Entity extends="std.display.Div">
					<_States>
						<_State id="width"><Value>100%</Value></_State>
						<_State id="height"><Value>100%</Value></_State>
						<_State id="backgroundColor"><Value>white</Value></_State>
						<_State id="opacity"><Value>0.25</Value></_State>
						<_State id="dropTarget"><Value>true</Value></_State>
						<State><Id>temp_newAssetName</Id><Type>Text</Type><Value>Undefined</Value></State>
						<State><Id>temp_newAssetSize</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_dropX</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_dropY</Id><Type>Integer</Type><Value>0</Value></State>
						<State><Id>temp_newAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
					</_States>
					<_Triggers>
						<Trigger>
							<Event>OnDrop</Event>
							<Scripts>
								<Script>
									function firstElementNamed(p_xmlNode, p_elementName)
									{
										if (p_xmlNode.elementsNamed(p_elementName).hasNext())
										{
											return p_xmlNode.elementsNamed(p_elementName).next();
										}
										else
										{
											return null;
										}
									}
					
									//Figure out X, Y, etc..
									var eventObject = me.getState('eventObject');
									var localX = eventObject.clientX - eventObject.target.getBoundingClientRect().left;
									var localY = eventObject.clientY - eventObject.target.getBoundingClientRect().top;
									Display.error("OnDrop-> X: " + localX + ", Y: " + localY);
									
									//Add Camera Offsets and Scaling
									var camera = Logic.getEntityByName('Editor Scene Edit Camera');
									var scale = camera.getState('scaleX');
									localX = localX / scale + camera.getState('captureAreaX');
									localY = localY / scale + camera.getState('captureAreaY');
									
									me.setState('temp_dropX',Std.int(localX));
									me.setState('temp_dropY',Std.int(localY));
									
									//Get the Asset & stuff
									var asset = parent.getState('assetBeingDragged');
									//var componentType = assetBeingDragged.componentType;
									
									Display.error('Dropping: ' + asset.name);
									
									var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
									
									var pureXml;
									
									var displayTypeData;
									
									var gridLock;
									
									
									
									//Ok, here we go
									
									//let's name it
									var newClassName = asset.fileName + "_" + Std.random(99); //I guess check the hash, if 1 exist, go to 2, etc, until u find a gap
									
									//check how i add things now.. plan how i'll do it differently
									
									//create new xml based on library collection
									var newXml = Xml.createDocument();
									
									var entityXml = Xml.createElement('Entity');
									entityXml.set('extends' , 'std.display.Image2D'); //this should be replaced by the base class of the library collection used to drag the item
									
									var extendsXml = Xml.createElement('Extends');
									
									var statesXml = Xml.createElement('_States');
									
									//State Name
									var stateName_Xml = Xml.createElement('_State');
									stateName_Xml.set('id', 'name');
									var stateName_ValueXml = Xml.createElement('Value');
									stateName_ValueXml.addChild(Xml.createPCData(newClassName));
									
									//2d mesh image form
									var stateMesh_Xml = Xml.createElement('_State');
									stateMesh_Xml.set('id', '2DMeshImageForm');
									var stateMesh_ValueXml = Xml.createElement('Value');
									stateMesh_ValueXml.addChild(Xml.createPCData("ImageUrl"));
									
									var formXml = Xml.createElement('_Form');
									var formStatesXml = Xml.createElement('_States');
									var formStateXml = Xml.createElement('State');
									var formStateIdXml = Xml.createElement('Id');
									formStateIdXml.addChild(Xml.createPCData('ImageUrl'));
									var formStateTypeXml = Xml.createElement('Type');
									formStateTypeXml.addChild(Xml.createPCData('Text'));
									var formStateValueXml = Xml.createElement('Value');
									formStateValueXml.addChild(Xml.createPCData('image_' + asset.name));
									
									newXml.addChild(entityXml);
									entityXml.addChild(extendsXml);
									entityXml.addChild(statesXml);
										statesXml.addChild(stateName_Xml);
											stateName_Xml.addChild(stateName_ValueXml);
										statesXml.addChild(stateMesh_Xml);
											stateMesh_Xml.addChild(stateMesh_ValueXml);
											
									entityXml.addChild(formXml);
										formXml.addChild(formStatesXml);
											formStatesXml.addChild(formStateXml);
												formStateXml.addChild(formStateIdXml);
												formStateXml.addChild(formStateTypeXml);
												formStateXml.addChild(formStateValueXml);
									
									
									
									var finalString = Logic.xmlToString(newXml);
									Display.error("newXml: " + finalString);
									
									var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
									Logic.getEntityByName('Editor Output').setState('text','Please Wait...');

									me.setState('temp_newAssetName',newClassName);
									me.setState('temp_newAssetSize',finalString.length);
									
									Comms.file_sendFileRequest(finalString, {name: newClassName+'.egc', size: finalString.length, user: connectedUserName} , "DragSurface Creating Asset Step 1");
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>FileTransferRequest</Event>
							<Scripts>
								<Script>
									if (Comms.file_getSendFileRequestData("DragSurface Creating Asset Step 1")!=null)
									{
										var data = Comms.file_getSendFileRequestData("DragSurface Creating Asset Step 1");
										
										Display.error("FILE: " + 'Uploading ' + data.progressPercent+'%');
										
										//Logic.getEntityByName('AU_output').getState('value').setState('text','Uploading ' + data.progressPercent+'%');
						
										if (data.progress==1)
										{
											Logic.getEntityByName('Editor Output').setState('text','File Uploaded!');
											
											var libraryAsset = parent.getState('assetBeingDragged');
											var newAssetName = me.getState('temp_newAssetName');
											var newAssetSize = me.getState('temp_newAssetSize');
											
											//fileName
											var fileName = newAssetName+'.egc';
											
											//fileSize
											var fileSize = newAssetSize;
											
											//assetTitle.. not being used currently
											var assetTitle=newAssetName;
											
											//Dir
											var dir = "entities";
											
											//type
											var type = "script";
											
											//componentType
											var componentType = "Object Class"; //This should be determined by Library Collection stuff!!!!
											
											//tags
											var tags =  ""; //This should be determined by Library Collection stuff!!!!
											
											Comms.request("assets.uploadHandler.rawUpload", {fileName: fileName, fileSize: fileSize, assetTitle: assetTitle, dir: dir, type: type, componentType: componentType, tags: tags}, "DragSurface Creating Asset Step 2");
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<Trigger>
							<Event>NetworkRequest</Event>
							<Scripts>
								<Script>
									if (Comms.getRequestData("DragSurface Creating Asset Step 2")!=null)
									{
										var data = Comms.getRequestData("DragSurface Creating Asset Step 2");
										
										if (data.code=="success")
										{
											Logic.getEntityByName('Editor Output').setState('text','Asset Created: ' + data.assetName);
											
											//Step 3
											//Flambe Load the egc and if it's an image, flambe load the texture (and any other dependancies it has, later)
											
											var connectedUserName = Logic.getEntityByName('Spark Editor').getState('username');
											
											//Initiate Load
											Assets.initiateBatch();
											
											
											//Flambe Load Image Asset
											////this should be determined by the base class of the library collection used to drag the item
											//for now it always assumes Image
											//maybe, don't always load the texture, if it's already loaded..
											
											//Flambe Load Object Class egc
											var asset = data.asset;
											var assetUrl = '/assets/' + connectedUserName + '/' + asset.type + '/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
											var assetId = asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
											Assets.addFile(assetUrl, assetId);
											me.setState('temp_newAsset',asset);
											//Display.error("**" + assetUrl);
											//Display.error("**" + assetId);
											
											
											
											var asset2 = parent.getState('assetBeingDragged');
											var assetUrl2 = '/assets/' + connectedUserName + '/' + asset2.type + '/' + asset2.dir + '/' + asset2.fileName + '.' + asset2.fileExtension;
											var assetId2 = 'image_' + asset2.name;
											Assets.addFile(assetUrl2, assetId2);
											
											Comms.request("assets.updateHandler.addProjectMainModuleAssetReferences", {assetReferences: [asset._id, asset._id, asset2._id]}, "whatever dude...");
											Display.error("**************************YOYOYOYOYO*****************");
											
											var oldMe = me;
											
											//Event Listener
											Assets.successSignal.connect(function () {
												Logic.getEntityByName('Editor Output').setState('text',"Everything Flambe Loaded!");
												Display.error("**************************LOADED*****************");
												//oldMe.startAction('AddNewAsset');
												
												//Step 4
												//Create the instance XML
												var entityXml = Xml.createElement('Entity');
												entityXml.set('extends' , asset.name);
												
												
												var statesXml = Xml.createElement('_States');
												
												//State Id
												var stateId_Xml = Xml.createElement('_State');
												stateId_Xml.set('id', 'id');
												var stateId_ValueXml = Xml.createElement('Value');
												stateId_ValueXml.addChild(Xml.createPCData('0')); //incremental, like class, or unique for every class, or...?
												
												//State spaceX
												var stateSpaceX_Xml = Xml.createElement('_State');
												stateSpaceX_Xml.set('id', 'spaceX');
												var stateSpaceX_ValueXml = Xml.createElement('Value');
												stateSpaceX_ValueXml.addChild(Xml.createPCData(Std.string(oldMe.getState('temp_dropX'))));
												
												//State spaceY
												var stateSpaceY_Xml = Xml.createElement('_State');
												stateSpaceY_Xml.set('id', 'spaceY');
												var stateSpaceY_ValueXml = Xml.createElement('Value');
												stateSpaceY_ValueXml.addChild(Xml.createPCData(Std.string(oldMe.getState('temp_dropY'))));
												
												entityXml.addChild(statesXml);
													statesXml.addChild(stateId_Xml);
														stateId_Xml.addChild(stateId_ValueXml);
													statesXml.addChild(stateSpaceX_Xml);
														stateSpaceX_Xml.addChild(stateSpaceX_ValueXml);
													statesXml.addChild(stateSpaceY_Xml);
														stateSpaceY_Xml.addChild(stateSpaceY_ValueXml);
												
												
												
												var finalString = Logic.xmlToString(entityXml);
												
												//Step 5
												//Create the GameObject, set up it's xml data, add it to scene
												var pureXml = Xml.parse(finalString).firstElement(); //clone
												
												Display.error("SPRITE XML: " + pureXml);
												
												
												var childExtendsXml = Xml.createElement('Extends');
												entityXml.insertChild(childExtendsXml,0);
												
												//add [entity] Sprite2DEdit in [extends]
												var sceneEditXml = Xml.createElement('Entity');
												sceneEditXml.set('extends','SparkEditor.entities.editors.behaviors.Sprite2DEdit');
												childExtendsXml.addChild(sceneEditXml);
												Display.error("creatiinnggggg");
												//instantiate, add to scene
												var childEntity = Logic.gameFactory.createGameEntityByXml(entityXml);
												var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
												scene.addChild(childEntity);
												Display.error("created and added!!!");
												//give it snapshot xml
												childEntity.setState('xmlData',pureXml);
											}).once();
											
											//Load
											Assets.loadBatch();
											
										}
										else if (data.code=="dMissing")
										{
											Logic.getEntityByName('Editor Output').setState('text','Missing: ' + data.dependancyName);
										}
										else if (data.code=="exists")
										{
											Logic.getEntityByName('Editor Output').setState('text','Already exists: ' + data.assetName);
										}
										else
										{
											Logic.getEntityByName('Editor Output').setState('text','Error Creating Asset.');
										}
									}
								</Script>
							</Scripts>
						</Trigger>
						
						<!--<Trigger> OLD ONE
							<Event>OnDrop</Event>
							<Scripts>
								<Script>
									function firstElementNamed(p_xmlNode, p_elementName)
									{
										if (p_xmlNode.elementsNamed(p_elementName).hasNext())
										{
											return p_xmlNode.elementsNamed(p_elementName).next();
										}
										else
										{
											return null;
										}
									}
					
									var eventObject = me.getState('eventObject');
									var localX = eventObject.clientX - eventObject.target.getBoundingClientRect().left;
									var localY = eventObject.clientY - eventObject.target.getBoundingClientRect().top;
									Display.error("OnDrop-> X: " + localX + ", Y: " + localY);
									
									//Add Camera Offsets and Scaling
									var camera = Logic.getEntityByName('Editor Scene Edit Camera');
									var scale = camera.getState('scaleX');
									localX = localX / scale + camera.getState('captureAreaX');
									localY = localY / scale + camera.getState('captureAreaY');
									
									var assetBeingDragged = parent.getState('assetBeingDragged');
									var componentType = assetBeingDragged.componentType;
									
									Display.error('Dropping: ' + assetBeingDragged.name);
									
									var scene = Logic.getEntityByName('2d Scene Editor').getState('target');
									
									var pureXml;
									
									var displayTypeData;
									
									var gridLock;
									
									if (componentType=='Tile')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/tile/Tile.egc').toString()).firstElement();
										
										//Gridlock localX and localY
										gridLock = 64; //64;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
										
										displayTypeData = "Image";
									}
									else if (componentType=='Prop')
									{
										//Get appropriate class (as an xml)
										if (assetBeingDragged.tags[1]=="Background")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropBackground.egc').toString()).firstElement();
										else if (assetBeingDragged.tags[1]=="Static")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropStatic.egc').toString()).firstElement();
										else if (assetBeingDragged.tags[1]=="Dynamic")
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/prop/PropDynamic.egc').toString()).firstElement();
										
										//Gridlock localX and localY
										gridLock = 8 ; //64; //8;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
										
										displayTypeData = "Image";
									}
									else if (componentType=='Collectible')
									{
										//Get appropriate class (as an xml)
										if (assetBeingDragged.tags[2]=="Coin")
										{
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/collectible/Coin.egc').toString()).firstElement();
											displayTypeData = "Spritesheet";
										}
										else if (assetBeingDragged.tags[2]=="Jewel")
										{
											pureXml = Xml.parse(Assets.getFile('lib/2d/platform/collectible/Jewel.egc').toString()).firstElement();
											displayTypeData = "Image";
										}
										
										//Gridlock localX and localY
										gridLock = 8 ; //64; //8;
										
										localX = Math.round(localX/gridLock)*gridLock;
										localY = Math.round(localY/gridLock)*gridLock;
									}
									else if (componentType=='Actor')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/actor/player/PlayerPlatform.egc').toString()).firstElement();
										displayTypeData = "Spriter";
										
										gridLock = 1 ;
									}
									else if (componentType=='Background')
									{
										//Get appropriate class (as an xml)
										pureXml = Xml.parse(Assets.getFile('lib/2d/platform/background/PlatformBackground.egc').toString()).firstElement();
										//Display.error('Dropping,boundsX: ' + scene.getState('boundsX'));
										//Display.error('Dropping,boundsY: ' + scene.getState('boundsY'));
										
										//Hack to re-adjust position if it's a background
										var imageWidth = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'width');
										var imageHeight = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'height');
										//Display.error('Dropping,background width: ' + imageWidth);
										//Display.error('Dropping,background height: ' + imageHeight);
										
										localX=scene.getState('boundsX') + imageWidth/2;
										localY=scene.getState('boundsY') + imageHeight/2;
										displayTypeData = "Image";
										
										gridLock = 1 ;
									}
									
									//adjust spaceX and spaceY
									var states = firstElementNamed(pureXml,'_States');
									
									for (state in states.elementsNamed('_State'))
									{
										if (state.get('id')=='spaceX')
										{
											firstElementNamed(state,'Value').firstChild().nodeValue = Std.string(localX);
										}
										else if (state.get('id')=='spaceY')
										{
											firstElementNamed(state,'Value').firstChild().nodeValue = Std.string(localY);
										}
									}
									
									
									//insert the correct images
									var formStates = firstElementNamed(firstElementNamed(pureXml,'_Form'),'_States');
									
									if (displayTypeData == "Image")
									{
										for (state in formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='ImageUrl')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									else if (displayTypeData=='Spriter')
									{
										for (state in formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='SpriterMain')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									else if (displayTypeData=='Spritesheet')
									{
										for (state in formStates.elementsNamed('State'))
										{
											if (firstElementNamed(state,'Id').firstChild().nodeValue=='SpritesheetMain')
											{
												firstElementNamed(state,'Value').firstChild().nodeValue = 'image_' + assetBeingDragged.name;
											}
										}
									}
									
									//Display.error('pureXml: ' + pureXml.toString());
									var realXml = Xml.parse(pureXml.toString()).firstElement(); //clone it
									
									//attach the sprite2dEdit behavior
									var extendsNode = firstElementNamed(realXml,'Extends');
									
									//Clean Extends
									for (entity in extendsNode.elementsNamed('Entity'))
									{
										extendsNode.removeChild(entity);
									}
									
									//Add Edit Behavior
									var spriteEditXml = Xml.createElement('Entity');
									spriteEditXml.set('extends','SparkEditor.entities.editors.behaviors.Sprite2DEdit');
									extendsNode.addChild(spriteEditXml);
									
									
									Display.error('realXml: ' + realXml.toString());
									//Create the entity from the uploaded lib asssets
									//var isSpriter = (realXml.get('extends').substr(realXml.get('extends').lastIndexOf('.')+1)=="Spriter2D");
									var tileGameEntity = Logic.gameFactory.createGameEntityByXml(realXml);
									
									//Grid Lock
									//if (isSpriter) 
										tileGameEntity.setState('spriteGridLock',gridLock); //1
									
									//give it snapshot xml
									tileGameEntity.setState('xmlData',pureXml);
									
									//If it's a background put it to background layer, otherwise put it to the main layer ( I wish.. too hard to do layers right now..)
									if (componentType=='Background')
									{
										//add to SceneBoundsDisplay edit object
										Logic.getEntityByName('SceneBoundsDisplay').addChild(tileGameEntity);
										
										//Store the reference
										scene.setState('backgroundEntity',tileGameEntity);
										
										//Untouchable
										tileGameEntity.setState('touchable',false);
										
										//Create a couple more backgrounds to fill the white bounds rect
										var backgroundWidth = Logic.reflectField(Assets.getTexture('image_' + assetBeingDragged.name), 'width')-2; //-2 is to prevent some white gaps betweeen backgrounds
										
										var multipleBackgroundsCount = Math.ceil(scene.getState('boundsWidth')/backgroundWidth);
										var backgroundsCreated = 1;
										
										while (multipleBackgroundsCount>backgroundsCreated)
										{
											var extraBackground = Logic.gameFactory.createGameEntityByXml(realXml);
											extraBackground.setState('spaceX',extraBackground.getState('spaceX')+backgroundWidth*backgroundsCreated);
											Logic.getEntityByName('SceneBoundsDisplay').addChild(extraBackground);
											
											//Untouchable
											extraBackground.setState('touchable',false);
											
											backgroundsCreated+=1;
										}
									}
									else //
									{
										//add to scene
										scene.addChild(tileGameEntity);
									}
								</Script>
							</Scripts>
						</Trigger>-->
					</_Triggers>
				</Entity>
			</Entities>
		</Space>
	</Form>
</Entity>