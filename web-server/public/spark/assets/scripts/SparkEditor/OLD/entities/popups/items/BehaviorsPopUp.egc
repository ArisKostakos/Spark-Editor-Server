<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.popups.PopUpBaseWithArrow">
	<_States>
		<_State id="targetLayerName"><Value>PopUp Layer 1 Scene</Value></_State>
		<State><Id>behaviorsContainerObj</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>

	<_Form>
		<_Space>
			<_Entities>
				<!-- List -->
				<Entity extends="std.display.VGroup">
					<_States>
						<_State id="paddingLeft"><Value>6</Value></_State>
						<_State id="paddingRight"><Value>6</Value></_State>
						<_State id="paddingTop"><Value>6</Value></_State>
						<_State id="paddingBottom"><Value>10</Value></_State>
						<_State id="horizontalAlign"><Value>left</Value></_State>
						<!--<_State id="overflow"><Value>scroll</Value></_State>-->
					</_States>
						
					<_Form>
						<_Space>
							<_Entities>
								<!-- Behaviors Container Title -->
								<Entity extends="std.display.Text"><_States>
									<_State id="width"><Value>150</Value></_State>
									<_State id="height"><Value>17</Value></_State>
									<_State id="fontWeight"><Value>300</Value></_State>
									<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
									<_State id="fontSize"><Value>15px</Value></_State>
									<_State id="fontColor"><Value>white</Value></_State>
									<_State id="textAlign"><Value>left</Value></_State>
									<_State id="text"><Value>Behaviors:</Value></_State>
									</_States>
								</Entity>
					
								<!-- Behaviors Container -->
								<Entity extends="std.display.VGroup">
									<_States>
										<_State id="gap"><Value>1</Value></_State>
									</_States>
									<_Actions>
										<_Action id="Constructor">
											<_Scripts>
												<Script>
													parent.parentEntity.setState('behaviorsContainerObj',me);
												
													var behaviorNames = parent.parentEntity.getState('argA');
												
													for (behaviorName of behaviorNames)
													{
														//Display.error("Name: " + param.name + ", Type: " + param.type);
														var newItemParam = Logic.gameFactory.createGameEntity('SparkEditor.entities.components.popupListItems.BehaviorEdit');
														newItemParam.setState('parObj',behaviorName);
														me.addChild(newItemParam);
													}
													
													Display.invalidateLayout();
													
												</Script>
											</_Scripts>
										</_Action>
										
										<!-- Add Item -->
										<Action>
											<Id>Add Item</Id>
											<Concurrency>Persistent</Concurrency>
											<Scripts>
												<Script>
													var counter = it.getState('counter');
													if (counter==0)
													{
														var item = it.getState('item');
														
														var newItemParam = Logic.gameFactory.createGameEntity('SparkEditor.entities.components.popupListItems.BehaviorEdit');
														newItemParam.setState('parObj',item.name);
														me.addChild(newItemParam);
														counter+=1;
													}
													else if (counter==1) //Apparently, for this to work we need to do two invalidations, otherwise the Done Button gets left behind
													{
														me.stopAction('Add Item');
														counter=0;
													}
													
													Display.invalidateLayout();
													it.setState('counter',counter);
												</Script>
											</Scripts>
											<States>
												<State><Id>item</Id><Type>Dynamic</Type><Value>null</Value></State>
												<State><Id>counter</Id><Type>Integer</Type><Value>0</Value></State>
											</States>
										</Action>
												
										<!-- Remove Item -->
										<Action>
											<Id>Remove Item</Id>
											<Concurrency>Persistent</Concurrency>
											<Scripts>
												<Script>
													var counter = it.getState('counter');
													if (counter==0)
													{
														var item = it.getState('item');
														
														me.removeChild(item);
														counter+=1;
													}
													else if (counter==1) //Apparently, for this to work we need to do two invalidations, otherwise the Done Button gets left behind
													{
														me.stopAction('Remove Item');
														counter=0;
													}
													
													Display.invalidateLayout();
													it.setState('counter',counter);
												</Script>
											</Scripts>
											<States>
												<State><Id>item</Id><Type>Dynamic</Type><Value>null</Value></State>
												<State><Id>counter</Id><Type>Integer</Type><Value>0</Value></State>
											</States>
										</Action>
									</_Actions>
								</Entity>
								
								<!-- Add New Button -->
								<Entity extends="SparkEditor.entities.buttons.eventsheet.AddButtonBig">
								<_States>
									<!--<_State id="backgroundColor"><Value>rgb(87,92,102)</Value></_State>-->
									<_State id="buttonText"><Value>Add Behavior</Value></_State>
								</_States>
									<_Triggers><Trigger><Event>MouseLeftClick</Event><Scripts>
										<Script>
											function getListChild(node,childName)
											{
												for (child of node.children)
												{
													if (child.name==childName)
														return child;
												}
												
												return null;
											}
											/*
											function createContextNode(nodeName,nodeType,parentNode)
											{
												var node = {};
												node.name=nodeName;
												node.children = [];
												node.type=nodeType;
												parentNode.children.push(node);
												
												return node;
											}*/
											
											//Hash Current Behaviors
											var behaviors = new StringMap();
											var behaviorsContainerObj = parent.parentEntity.getState('behaviorsContainerObj');
											for (behaviorEdit of behaviorsContainerObj.getChildren())
											{
												behaviors.set(behaviorEdit.getState('parObj'),true);
											}
											
											var cb_caller = parent.parentEntity.getState('cb_caller');
											
											//Support Only 1 level of grouping for now. and all ACE MUST have exactly 1 group (no zero groups either)
											var mainList = {};
											mainList.children = [];
											
											//createContextNode("Rename","Rename",mainList);
					
											var acHash = Logic.getEntityByName('Project Editor').getState('BehaviorAssetsDBbyTargets');
											
											//Get the class object asset
											var asset = cb_caller.getState('ClassAsset');
											Display.error("My Asset.name is: " + asset.name);
											
											//Check hash to pick up it's classes
											var InheritanceHashByName = Logic.getEntityByName('Project Editor').getState("InheritanceHashByName");
											var inheritanceMap = InheritanceHashByName.get(asset.name);
											
											var typesFound = [];
											
											var keys = inheritanceMap.keys();
											while (keys.hasNext())
											{
												var classType = keys.next();
												Display.error("FOUND TYPE!!!!: " + classType);
												typesFound.push(classType);
											}
											
											
											
											for (type of typesFound)
											{
												if (acHash.exists(type))
												{
													for (asset of acHash.get(type))
													{
														Display.error("FOUND AC: " + asset.name);
														if (behaviors.exists(asset.name)==false)
														{
															var group = getListChild(mainList,asset.tags[1]);
															
															//If null, create it
															if (group==null)
															{
																group = {};
																group.name=asset.tags[1];
																group.children = [];
																mainList.children.push(group);
															}
															
															//Create listObject and add it to group
															var childAsset = {};
															childAsset.name=asset.title;
															childAsset.asset=asset;
															//childAsset.type="Behavior";
															childAsset.children = [];
															
															group.children.push(childAsset);
														}
													}
												}
											}
											
											
											var globalPos = Logic.queryGameEntity(me, "globalPosition");
					
											//Open Popup [CHOOSE AC]
											var popUpManager = Logic.getEntityByName('PopUp Manager');
											var popUpAction = popUpManager.getAction('Open PopUp');
											popUpAction.setState('popupName',"SparkEditor.entities.popups.items.EventSheetContextMenuPopUp");
											popUpAction.setState('popupPosX',globalPos.x+14);
											popUpAction.setState('popupPosY',globalPos.y+25);
											popUpAction.setState('argA',mainList);
											popUpAction.setState('cb_caller',me);
											popUpAction.setState('cb_actionName','Callback: Add A New Item');
											popUpManager.forceAction('Open PopUp');
											
											//Display.invalidateLayout();
										</Script>
									</Scripts></Trigger></_Triggers>
										
									<_Actions>
										<Action>
											<Id>Callback: Add A New Item</Id>
											<Concurrency>Persistent</Concurrency>
											<Scripts>
												<Script>
													//forced
													
													var cb_result = it.getState('cb_result');
													var cb_Arg1 = it.getState('cb_Arg1');
													
													if (cb_result=="OK")
													{
														Display.error("Callback: Select AC: OK");
														Display.error("Got: " + cb_Arg1.name);
														
														var behaviorsContainerObj = parent.parentEntity.getState('behaviorsContainerObj');
														behaviorsContainerObj.getAction('Add Item').setState('item',cb_Arg1.asset);
														behaviorsContainerObj.startAction('Add Item');
													}
													else
													{
														Display.error("Callback: Select AC: CANCEL");
													}
												</Script>
											</Scripts>
											<States>
												<State><Id>cb_result</Id><Type>Text</Type><Value>Undefined</Value></State>
												<State><Id>cb_Arg1</Id><Type>Dynamic</Type><Value>null</Value></State>
											</States>
										</Action>
									</_Actions>
								</Entity>
								
								<Entity extends="std.display.Group">
									<_States>
										<_State id="width"><Value>100%</Value></_State>
									</_States>
									<Form><Space><Entities>
										<Entity extends="std.display.Button">
											<_States>
												<_State id="right"><Value>0</Value></_State>
												<_State id="width"><Value>60</Value></_State>
												<_State id="height"><Value>18</Value></_State>
												<_State id="backgroundColor"><Value>rgb(123,168,25)</Value></_State>
												<_State id="layout"><Value>Horizontal</Value></_State>
												<_State id="verticalAlign"><Value>middle</Value></_State>
												<State><Id>buttonText</Id><Type>Text</Type><Value>Done</Value></State>
											</_States>
											
											<Form>
												<Space>
													<Entities>
														<!-- Text -->
														<Entity extends="std.display.Text"><_States>
															<_State id="width"><Value>100%</Value></_State>
															<_State id="height"><Value>16</Value></_State>
															<_State id="fontWeight"><Value>300</Value></_State>
															<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
															<_State id="fontSize"><Value>14px</Value></_State>
															<_State id="fontColor"><Value>white</Value></_State>
															<_State id="textAlign"><Value>center</Value></_State>
															</_States><_Actions><_Action id="Constructor"><_Scripts><Script>
															me.setState('text',parent.getState('buttonText'));
														</Script></_Scripts></_Action></_Actions></Entity>
													</Entities>
												</Space>
											</Form>
											
											<_Triggers>
												<Trigger>
													<Event>MouseLeftClick</Event>
													<Scripts>
														<Script>
															//Close PopUp
															parent.parentEntity.parentEntity.startAction('Close');
															
															//Hash Current Behaviors
															var returnItems = [];
															var behaviorsContainerObj = parent.parentEntity.parentEntity.getState('behaviorsContainerObj');
															for (behaviorEdit of behaviorsContainerObj.getChildren())
															{
																returnItems.push(behaviorEdit.getState('parObj'));
															}
											
															//Run Callback with OK
															var cb_caller = parent.parentEntity.parentEntity.getState('cb_caller');
															var cb_action = cb_caller.getAction(parent.parentEntity.parentEntity.getState('cb_actionName'));
															cb_action.setState('cb_result',"OK");
															cb_action.setState('cb_Arg1',returnItems);
															
															cb_caller.forceAction(parent.parentEntity.parentEntity.getState('cb_actionName'));
														</Script>
													</Scripts>
												</Trigger>
											</_Triggers>
										</Entity>
									</Entities></Space></Form>
								</Entity>
							</_Entities>
						</_Space>
					</_Form>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
</Entity>