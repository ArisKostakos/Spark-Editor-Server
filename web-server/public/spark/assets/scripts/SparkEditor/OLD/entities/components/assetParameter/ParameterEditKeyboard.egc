<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.components.assetParameter.ParameterEditBase">
	<_States>

	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Button -->
				<Entity extends="std.display.Button"><_States>
					<_State id="width"><Value>200</Value></_State>
					<_State id="height"><Value>80%</Value></_State>
					<_State id="backgroundColor"><Value>rgb(83, 98, 115)</Value></_State>
					<_State id="layout"><Value>Horizontal</Value></_State>
					<_State id="verticalAlign"><Value>middle</Value></_State>
					<State><Id>btnTextObj</Id><Type>Dynamic</Type><Value>null</Value></State>
					<State><Id>listensForKey</Id><Type>Boolean</Type><Value>false</Value></State>
					<_State id="acceptsKeyboardInput"><Value>true</Value></_State>
					<_State id="preventDefaultEvents"><Value>true</Value></_State>
					</_States>
					<_Triggers>
						<Trigger>
							<Event>MouseLeftClick</Event>
							<Scripts>
								<Script>
									me.getState('btnTextObj').setState('text',"Press a Key!");
									me.setState('listensForKey',true);
								</Script>
							</Scripts>
						</Trigger>
					
						<Trigger>
							<Event>KeyDownLocal</Event><Scripts>
								<Script>
								 function displayKeyCode(evt)
								 {
									 var charCode = (evt.which) ? evt.which : evt.keyCode;
									 
									 if (charCode == 8) return "Backspace"; //  backspace
									 if (charCode == 9) return "Tab"; //  tab
									 if (charCode == 13) return "Enter"; //  enter
									 if (charCode == 16) return "Shift"; //  shift
									 if (charCode == 17) return "Control"; //  ctrl
									 if (charCode == 18) return "Alt"; //  alt
									 //if (charCode == 19) return "pause/breakffffffff"; //  pause/break
									 if (charCode == 20) return "CapsLock"; //  caps lock
									 if (charCode == 27) return "Escape"; //  escape
									 if (charCode == 32) return "Space";
									 if (charCode == 33) return "PageUp"; // page up, to avoid displaying alternate character and confusing people	         
									 if (charCode == 34) return "PageDown"; // page down
									 if (charCode == 35) return "End"; // end
									 if (charCode == 36) return "Home"; // home
									 if (charCode == 37) return "Left"; // left arrow
									 if (charCode == 38) return "Up"; // up arrow
									 if (charCode == 39) return "Right"; // right arrow
									 if (charCode == 40) return "Down"; // down arrow
									 if (charCode == 45) return "Insert"; // insert
									 if (charCode == 46) return "Delete"; // delete
									 //if (charCode == 91) return "left window"; // left window
									 //if (charCode == 92) return "right window"; // right window
									 //if (charCode == 93) return "select key"; // select key
									 if (charCode == 96) return "Numpad0"; // numpad 0
									 if (charCode == 97) return "Numpad1"; // numpad 1
									 if (charCode == 98) return "Numpad2"; // numpad 2
									 if (charCode == 99) return "Numpad3"; // numpad 3
									 if (charCode == 100) return "Numpad4"; // numpad 4
									 if (charCode == 101) return "Numpad5"; // numpad 5
									 if (charCode == 102) return "Numpad6"; // numpad 6
									 if (charCode == 103) return "Numpad7"; // numpad 7
									 if (charCode == 104) return "Numpad8"; // numpad 8
									 if (charCode == 105) return "Numpad9"; // numpad 9
									 if (charCode == 106) return "NumpadMultiply"; // multiply
									 if (charCode == 107) return "NumpadAdd"; // add
									 if (charCode == 109) return "NumpadSubtract"; // subtract
									 if (charCode == 110) return "NumpadDecimal"; // decimal point
									 if (charCode == 111) return "NumpadDivide"; // divide
									 if (charCode == 112) return "F1"; // F1
									 if (charCode == 113) return "F2"; // F2
									 if (charCode == 114) return "F3"; // F3
									 if (charCode == 115) return "F4"; // F4
									 if (charCode == 116) return "F5"; // F5
									 if (charCode == 117) return "F6"; // F6
									 if (charCode == 118) return "F7"; // F7
									 if (charCode == 119) return "F8"; // F8
									 if (charCode == 120) return "F9"; // F9
									 if (charCode == 121) return "F10"; // F10
									 if (charCode == 122) return "F11"; // F11
									 if (charCode == 123) return "F12"; // F12
									 //if (charCode == 144) return "num lock"; // num lock
									 //if (charCode == 145) return "scroll lock"; // scroll lock
									 if (charCode == 186) return "Semicolon"; // semi-colon
									 if (charCode == 187) return "Equals"; // equal-sign
									 if (charCode == 188) return "Comma"; // comma
									 if (charCode == 189) return "Minus"; // dash
									 if (charCode == 190) return "Period"; // period
									 if (charCode == 191) return "Slash"; // forward slash
									 if (charCode == 192) return "Backquote"; // grave accent
									 if (charCode == 219) return "LeftBracket"; // open bracket
									 if (charCode == 220) return "Backslash"; // back slash
									 if (charCode == 221) return "RightBracket"; // close bracket
									 if (charCode == 222) return "Quote"; // single quote
									 
									 if (charCode>=48 && 57>=charCode)
										return "Number" + String.fromCharCode(charCode);
									
									 return String.fromCharCode(charCode);
								 }
								
								
								if (me.getState('listensForKey'))
								{
									var eventObjectKeyPress = me.getState('eventObjectKeyDown');
									
									var keyPressed = eventObjectKeyPress;
									
									var keyString = displayKeyCode(keyPressed);
									me.getState('btnTextObj').setState('text',keyString);
									
									me.setState('listensForKey',false);
									
									parent.getState('parObj').object=keyString;
								}
							</Script></Scripts>
						</Trigger>
					</_Triggers>
		
					<_Form>
						<_Space>
							<_Entities>
								<!-- Button Text -->
								<Entity extends="std.display.Text"><_States>
									<_State id="width"><Value>100%</Value></_State>
									<_State id="height"><Value>15</Value></_State>
									<_State id="fontWeight"><Value>300</Value></_State>
									<_State id="fontFamily"><Value>'Ubuntu', sans-serif</Value></_State>
									<_State id="fontSize"><Value>13px</Value></_State>
									<_State id="fontColor"><Value>white</Value></_State>
									<_State id="textAlign"><Value>center</Value></_State>
									</_States>
									<_Actions><_Action id="Constructor"><_Scripts><Script>
										me.setState("text","Click to choose");
										parent.setState('btnTextObj',me);
									</Script></_Scripts></_Action></_Actions>
								</Entity>
							</_Entities>
						</_Space>
					</_Form>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>
</Entity>