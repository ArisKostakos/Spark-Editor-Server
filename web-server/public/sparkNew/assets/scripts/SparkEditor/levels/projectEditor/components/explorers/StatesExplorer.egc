<Entity extends="std.display.HGroup">
	<_States>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>100%</Value></_State>
		<State><Id>parentTab</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>stateExplorers</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>

	<Form><Space><Entities>

	</Entities></Space></Form>

	<_Triggers>

	</_Triggers>

	<_Actions>
		<Action>
			<Id>Construct States</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_stateExplorers = me.set('stateExplorers', new StringMap());
					
					var l_createDivider=false;
					
					if (it.s('states')!=null)
					{
						//Get The States Explorer Editor
						var l_editor = me.s('parentTab').s('editor');
					
						var iterator = it.s('states').iterator();
						while (iterator.hasNext())
						{
							var state = iterator.next();
							
							//Don't add state if it's a behaviorExtend State, and we are a class Tab Explorer
							if (l_editor.s('editorType')=="Behavior" || state.behaviorName==null) 
							{
								//Don't add state, if it has a notVisible meta
								if (state.visibleOnEditor!="false")
								{
									var l_stateExplorer = Logic.create("SparkEditor.levels.projectEditor.components.explorers.StateExplorer");
									l_stateExplorer.set('statesExplorer', me);
									
									//So we just force an action now to create the thing
									l_stateExplorer.fa("Construct State", {stateObject:state, createDivider:l_createDivider});
									
									me.addChild(l_stateExplorer);
									l_stateExplorers.set(state.id, l_stateExplorer);
									
									l_createDivider=true;
								}
							}
						}
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>states</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>Update States</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced

					var l_stateExplorers = me.s('stateExplorers');
					var l_statesFirstPass = it.s('statesFirstPass');
					var l_statesSecondPass = it.s('statesSecondPass');
					
					var keys = l_stateExplorers.keys();
					while (keys.hasNext())
					{
						var w_stateId = keys.next();
						
						//First Pass (behavior or class)
						var w_state = l_statesFirstPass.get(w_stateId);
						
						//Second Pass (class overrides)
						if (l_statesSecondPass!=null)
							if (l_statesSecondPass.exists(w_stateId))
								w_state=l_statesSecondPass.get(w_stateId);
						
						//Third Pass (object overrides)
						//..
						
						//Update State Explorer for this state
						l_stateExplorers.get(w_stateId).fa('Update State', {state: w_state});
					}
				</Script>
			</Scripts>
			<States>
				<State><Id>statesFirstPass</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>statesSecondPass</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>