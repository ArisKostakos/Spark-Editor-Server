<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.levels.projectEditor.tabs.TabBase">
	<_States>
		<!--<_State id="backgroundColor"><Value>cyan</Value></_State>-->
		<_State id="pointerEvents"><Value>none</Value></_State>
		<_State id="layout"><Value>Vertical</Value></_State>
		<_State id="gap"><Value>0</Value></_State>
		<State><Id>statesExplorer</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>openedFromEditor</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<Form>
		<Space>
			<Entities>
				
			</Entities>
		</Space>
	</Form>
	
	
	<_Actions>
		<_Action id="Created Event">
			<_Scripts>
				<Script>
					//Get Tab Parameters
					var l_parameters = me.s('parameters');
					
					//Get Editor (This will be either a Class Editor or a Behavior Editor.. We don't care, we are agnostic
					var l_editor = l_parameters.editor;
					
					//Store My Editor (this is my pure editor)
					me.set('editor', l_editor);
					
					//Create Explorer for this Class
					var l_explorer = Logic.create("SparkEditor.levels.projectEditor.components.explorers.StatesExplorer");
					
					//Set Parent Tab
					l_explorer.set('parentTab', me);
					
					//So we just force an action now to create the thing
					l_explorer.fa("Construct States", {states: l_editor.s('states')});
					
					//Store it..
					me.set('statesExplorer', l_explorer);
					
					//Add it (this will always be a child of it's tab.. IT's the Tab that's going to move around from tabManager's Container to tabManager's Container..)
					me.addChild(l_explorer);
				</Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Update States</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_editor = me.s('editor');
					var l_openedFromEditor = me.s('openedFromEditor');
					
					if (l_editor==l_openedFromEditor)
						me.s('statesExplorer').fa("Update States", {statesFirstPass: l_editor.s('states'), statesSecondPass:null});
					else 
						me.s('statesExplorer').fa("Update States", {statesFirstPass: l_editor.s('states'), statesSecondPass:l_openedFromEditor.s('states')});
				</Script>
			</Scripts>
		</Action>
			
		<_Action id="Show Event">
			<_Scripts>
				<Script>
					//extending..?
					
				</Script>
			</_Scripts>
		</_Action>
			
		<_Action id="Hide Event">
			<_Scripts>
				<Script>
					//extending..?
					
				</Script>
			</_Scripts>
		</_Action>
			
		<_Action id="Export XML">
			<_Scripts>
				<Script>
					//extending..?
					
				</Script>
			</_Scripts>
		</_Action>
	</_Actions>
</Entity>