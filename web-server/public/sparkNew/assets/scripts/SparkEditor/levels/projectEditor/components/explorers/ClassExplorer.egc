<Entity extends="std.display.HGroup">
	<_States>
		<_State id="width"><Value>100%</Value></_State>
		<_State id="height"><Value>100%</Value></_State>
		<_State id="gap"><Value>0</Value></_State>
		<State><Id>parentEditor</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>descriptor</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>tabManager</Id><Type>Dynamic</Type><Value>null</Value></State>
		<_State id="dropTarget"><Value>true</Value></_State>
	</_States>

	<Form><Space><Entities>

	</Entities></Space></Form>

	<_Triggers>
		<Trigger>
			<Event>OnDrop</Event>
			<Scripts>
				<Script>
					var l_dragEvent = e('Drag And Drop Manager').s('drag event');
					
					if (l_dragEvent==null)
					{
						Display.log('drag event null, quitting onDrop');
						return;
					}
					
					//Get Drop Event Data
					var l_asset = l_dragEvent.DBA;
					var l_assetLibrary = l_dragEvent.LibraryDBA;
					
					
					//Decide what to tell the Class Editor
					if (l_asset.componentType=="Behavior")
						me.s('parentEditor').fa('Add Behavior Complete', { behavior_asset_DBA:l_asset} );
					else
						Display.warn("Dropped an unknown type: " + l_asset.componentType);
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>

	<_Actions>
		<Action>
			<Id>Forced Constructor</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//Create Descriptor
					var l_descriptor = Logic.create("SparkEditor.levels.projectEditor.components.explorers.ClassExplorerDescriptor");
					l_descriptor.set('parentClassExplorer', me);
					me.set('descriptor', l_descriptor);
					me.addChild(l_descriptor);
					
					//Initialize
					l_descriptor.fa('Forced Constructor');
					
					
					//Create Tab Manager
					var l_tabManager = Logic.create("SparkEditor.levels.projectEditor.components.explorers.ClassExplorerTabManager");
					l_tabManager.set('parentClassExplorer', me);
					me.set('tabManager', l_tabManager);
					me.addChild(l_tabManager);
					
					//Initialize
					l_tabManager.fa('Initialize');
					
					//So.. hey mr tab manager..  I'm your class explorer... use my editor to create your tabs.. and when you are updated, or its time to export/save, we'll talk again
					l_tabManager.fa('Construct States Explorers');
				</Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Show</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_tabManager = me.s('tabManager');
					
					l_tabManager.fa('Update Current Explorer Tab');
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<!-- Make sure tabs and behaviors match and do changes if they don't -->
			<Id>Refresh Class Explorer</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_tabManager = me.s('tabManager');
					
					l_tabManager.fa('Refresh Explorers');
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>