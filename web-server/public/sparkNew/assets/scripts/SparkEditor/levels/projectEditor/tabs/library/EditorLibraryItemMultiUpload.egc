<?xml version="1.0" encoding="utf-8"?>
<Entity>
	<_States>
		<State><Id>progressBar</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>componentType</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>assetType</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>tags</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>uploadId</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>files</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>masterFile</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>masterAsset</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>masterName</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>filesUploaded</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>dependancyIds</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Form>
		<_Space>
			<_Entities>
				<!-- Progress Bar -->
				<Entity extends="std.display.Div"><_States>
					<_State id="width"><Value>100%</Value></_State>
					<_State id="height"><Value>0%</Value></_State>
					<_State id="opacity"><Value>0.2</Value></_State>
					<_State id="bottom"><Value>0</Value></_State>
					<_State id="backgroundColor"><Value>rgb(0,255,0)</Value></_State>
					</_States><_Actions><_Action id="Constructor"><_Scripts><Script>
						parent.setState('progressBar',me);
				</Script></_Scripts></_Action></_Actions></Entity>
			</_Entities>
		</_Space>
	</_Form>
		
	<_Actions>
		<Action>
			<Id>Create Next Asset</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//I will actually be doing changes to this array.. which is fine, we dont need it anymore
					var l_files = me.s('files');
					var l_masterFile = me.s('masterFile');
					var l_masterName = me.s('masterName');
					
					//More files to create
					if (l_files.length>0)
					{
						console.log('l_files',l_files);
						//This makes sure that masterFile will be selected last
						var l_file = l_files.pop(); //take from the end of the array
						if (l_file==l_masterFile && l_files.length>0)
						{
							l_files.unshift(l_file); //insert back to the beginning of the array
							l_file = l_files.pop(); //take from the end of the array
						}
						
						
						//fileName
						var fileName = l_file.name;
						
						//fileSize
						var fileSize = l_file.size;
						
						
						if (l_file==l_masterFile)
						{
							//componentType
							var componentType = me.s('componentType');
							
							//assetType
							var assetType = me.s('assetType');
							
							//tags
							var tags = l_masterName; //fuck tags..me.s('tags');
							
							//dependancies
							var dependancies = me.s('dependancyIds');
							
							console.log('dependancies',dependancies);
						}
						else
						{
							//componentType
							var componentType = me.s('componentType')+"_Slave";
							
							//assetType
							var assetType = "image";
							
							//tags
							var tags = l_masterName;
							
							//dependancies
							var dependancies = null;
						}
						
						var assetTitle = l_masterName;
						Display.de("Creating asset: " + fileName);
						Comms.request("assets.uploadHandler.uploadAsset", {fileName: fileName, fileSize: fileSize, assetTitle: assetTitle, dir: l_masterName, type: assetType, componentType: componentType, tags: tags, dependancies: dependancies}, me.getState('uploadId'));
					}
					else
					{
						//All Files(assets) created!
						//for now, just change the icon here
						var username = Logic.getEntityByName('Spark Editor').getState('username');
					
						//Thumbnail
						var imageObject = me.getState('imageObject');
						
						var l_masterAsset = me.s('masterAsset');
						
						//If Asset is Image
						if (l_masterAsset.type=="image")
						{
							imageObject.setState('src','/assets/' + username + '/thumbnail/' + l_masterAsset.dir + '/' + l_masterAsset.fileName + '.' + l_masterAsset.fileExtension);
						}
						//Else
						else
						{
							imageObject.setState('src',"thumb_" + l_masterAsset.componentType);
						}
						
						//Text //ONLY IF ITEM IS captionType enabled...
						//var objText = me.getState('obj_text');
						//objText.setState('opacity','1');
					
						//Remove Progress Bar
						var objProgressBar = me.getState('progressBar');
						me.removeChild(objProgressBar);
						//objProgressBar.setState('opacity','0');
						
						//Clear Border
						me.setState('border','0px');
						
						//Store asset db object
						me.setState('asset',l_masterAsset);
						
						//Rename me?
						//me.setState('name',"libraryAsset." + asset.title); //whatever.. never using this anyway.. jsut for fun..
					}
				</Script>
			</Scripts>
		</Action>
	</_Actions>
		
	<_Triggers>
		<Trigger>
			<Event>FileTransferRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.file_getSendFileRequestData(me.getState('uploadId'))!=null)
					{
						//Display.error("File Request Received Identified: " + me.getState('uploadId'));
						var data = Comms.file_getSendFileRequestData(me.getState('uploadId')).shift();
						
						Display.error("File Transfer Progress: " + data.progress + ", percent: " + data.progressPercent);
						
						me.getState('progressBar').setState('height',data.progressPercent+'%');
						
						if (data.progress==1)
						{
							var l_filesUploaded = me.addToState('filesUploaded',1);
						
							if (l_filesUploaded==me.s('files').length)
								me.fa('Create Next Asset');
						}
					}
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkRequest</Event>
			<Target>TargetNone</Target>
			<Scripts>
				<Script>
					if (Comms.getRequestData(me.getState('uploadId'))!=null)
					{
						Display.error("Request Received Identified: " + me.getState('uploadId'));
						var data = Comms.getRequestData(me.getState('uploadId'));
						
						if (data.code=="success")
						{
							var asset = data.asset;
							
							Display.error("Success creating asset: " + asset.name);
							
							//Add to our local DB
							asset._inModules=[];
							e('Project Editor').fa('Insert Asset', {asset: asset} );
							
							if (me.s('dependancyIds')==null)
								me.set('dependancyIds', []);
								
							me.s('dependancyIds').push(asset._id);
							
							me.set('masterAsset', asset); //overrides until last one (which is master).. (i know.. :( )
							
							me.fa('Create Next Asset');
						}
						else
						{
							Display.error("Error uploading asset. Code: " + data.code);
							//remove uploading item here (me) or something..
						}
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>