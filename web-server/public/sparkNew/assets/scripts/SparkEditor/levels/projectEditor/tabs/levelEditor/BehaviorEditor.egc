<?xml version="1.0" encoding="utf-8"?>
<Entity extends="std.core.Base">
	<Extends>
		<Entity extends="SparkEditor.levels.projectEditor.behaviors.Editor"/>
	</Extends>
	
	<_States>
		<State><Id>behaviorExplorer</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>type</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>editorType</Id><Type>Text</Type><Value>Behavior</Value></State>
		<State><Id>createdWith</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>projectChild</Id><Type>Dynamic</Type><Value>null</Value></State> <!-- This should actually be a map (1 editor to many projectChild) -->
		<State><Id>enabledInEditor</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>editTab</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>states</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	
	<_Actions>
		<_Action id="Import From DBA">
			<_Scripts>
				<Script>
					//Check if this behavior should be enabled (run) in the editor..
					if (me.s('target_XML').get("meta_enabledInEditor")=="true")
						me.set('enabledInEditor', true);
					else
						me.set('enabledInEditor', false);
						
						
					//Find Meta Type
					me.set('type', me.s('target_DBA').meta.type);
					me.set('createdWith', me.s('target_DBA').meta.createdWith);
					
					//Get Every State (both States and mStates)
					me.set('states', Logic.xml_getEveryState(me.s('target_XML'), true));
					
					//Create the Explorer
					
					//Create Explorer for this Behavior
					var l_behaviorExplorer = Logic.create("SparkEditor.levels.projectEditor.components.explorers.BehaviorExplorer");
					l_behaviorExplorer.set('parentEditor',me);
					
					//Forced Constructor
					l_behaviorExplorer.fa('Forced Constructor');
					
					//Store it..
					me.set('behaviorExplorer', l_behaviorExplorer);
				</Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Open Edit Tab</Id> <!-- This Action should exist on all trio-Editors (Class/Behavior/Instance) -->
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//You know something... I want to have an OPTION whether to cache the Tab or not.. for the RunTab for example, I dont need it
					//and maybe I don't need it anyway.. although it will be a little slow to recreate complex tabs all the time...
					//but don't worry about the export problem anymore.. this will work either way..
					
					//Get Tab
					var l_editTab = me.s('editTab');
					
					//If Tab already exists
					if (l_editTab!=null)
					{
						//If Tab does not exist in Tab Manager, sneak it back in
						if ( !e('Main Tab Manager').s('tabs').exists( l_editTab.s('tabName') ) )
							e('Main Tab Manager').fa('Add Tab',{name:l_editTab.s('tabName'), title:l_editTab.s('tabTitle'), type:l_editTab.s('tabType'), premadeTab: l_editTab });
						
						//Now Show it
						e('Main Tab Manager').startAction('Show Tab',{name: l_editTab.s('tabName') });
					}
					else
					{
						//Create Tab, if possible
						
						if (me.s('createdWith')=="Raw SML")
						{
							//Add SML Editor Tab
							e('Main Tab Manager').fa('Add Tab',{name: me.s('target_DBA').name , title: me.s('target_DBA').title , type:"rawSmlEditor", parameters:{ editor:me }  });
							
							//Store The Tab We Just Created
							me.set('editTab', e('Main Tab Manager').s('tabs').get( me.s('target_DBA').name ) );
							
							//Show SML Editor Tab
							e('Main Tab Manager').startAction('Show Tab',{name:me.s('target_DBA').name});
						}
						else
						{
							Display.warn("Unknown createdWith: " + me.s('createdWith') + ". Cannot Open Edit Tab");
						}
					}
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Open Explorer Tab</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_explorerContainer = it.s('explorerContainer');
					
					//Remove All Children
					l_explorerContainer.removeChildren(); //export opportunity here.. but whatevs..
					
					l_explorerContainer.addChild( me.s('behaviorExplorer') );
					
					me.s('behaviorExplorer').fa('Show');
				</Script>
			</Scripts>
			<States>
				<State><Id>explorerContainer</Id><Type>Dynamic</Type><Value>null</Value></State>
			</States>
		</Action>
				
		<_Action id="Export XML">
			<_Scripts>
				<Script>
					if (me.s('needsToExport'))
					{
						//Exporting Children
						
						//No Children to Export...
						
						//Then, If This Editor must do any changes to it's own Class EGC, do it here
						if (me.s('exportThis')==true)
						{
							//So we have identified that this class Needs to export THIS.. so we are now modifying our xml.. (states)
							
							//Our current Xml
							var l_target_XML = me.s('target_XML');
							
							//Redo States
							Logic.xml_entity_removeNode(l_target_XML, "_States");
							
							var iterator = me.s('states').iterator();
							while (iterator.hasNext())
							{
								var f_state = iterator.next();
								
								if (f_state.kind=="Merge")
									Logic.xml_entity_addMState(l_target_XML, f_state, true);
								else
									Logic.xml_entity_addState(l_target_XML, f_state, true);
							}
							
							//Ready.. Cache it (save command happens in here as well)
							e('Project Editor').fa('Update Asset Content', { DBA:me.s('target_DBA'), content:Logic.xmlToString(l_target_XML)} );
							
							
							//Reset Flag
							me.set('exportThis', false);
						}
						
						//Reset Flag
						me.set('needsToExport', false);
					}
				</Script>
			</_Scripts>
		</_Action>
	</_Actions>
</Entity>