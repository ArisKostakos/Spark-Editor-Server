<?xml version="1.0" encoding="utf-8"?>
<Entity extends="SparkEditor.entities.popups.PopUpBaseWithArrow">
	<_States>
		<_State id="targetLayerName"><Value>PopUp Layer 2 Scene</Value></_State>
	</_States>

	<_Form>
		<_Space>
			<_Entities>
				<!-- List -->
				<Entity extends="std.display.Group">
					<_States>
						<_State id="layout"><Value>Tile</Value></_State>
						<_State id="horizontalAlign"><Value>justify</Value></_State>
						<_State id="verticalAlign"><Value>justify</Value></_State>
							
						<_State id="horizontalGap"><Value>14</Value></_State>
						<_State id="verticalGap"><Value>14</Value></_State>
							
						<_State id="paddingLeft"><Value>20</Value></_State>
						<_State id="paddingRight"><Value>20</Value></_State>
						<_State id="paddingTop"><Value>20</Value></_State>
						<_State id="paddingBottom"><Value>20</Value></_State>
						<!--<_State id="overflow"><Value>scroll</Value></_State>-->
					</_States>
					<_Actions>
						<_Action id="Constructor">
							<_Scripts>
								<Script>
									//me.removeChildren();
									
									var ModuleAssetsDBbyAssetIdHash = Logic.getEntityByName('Project Editor').getState("ModuleAssetsDBbyAssetIdHash");
									
									var username = Logic.getEntityByName('Spark Editor').getState('username'); //assume we own this asset.. later, deep search the assets we get from the includes
									
									var assets = parent.getState('argA');
									
									for (asset of assets)
									{
										var newItem = Logic.gameFactory.createGameEntity('SparkEditor.entities.components.eventsheet.ChooseTargetThumb');
										
										//Figure out Thumbnail
										var thumbUrl="NotFound";
										
										if (asset.componentType=="Image")
										{
											thumbUrl = '/assets/' + username + '/thumbnail/' + asset.dir + '/' + asset.fileName + '.' + asset.fileExtension;
										}
										else if (asset.componentType=="Class")
										{
											thumbUrl = "thumb_" + asset.tags[1];
										}
										else if (asset.componentType=="Object Class")//but then, for the rest Object Classes (classes that have an asset thumb reference, do this)
										{
											if (asset.tags[1]=="Text") //|| Sound, || ...
											{
												thumbUrl = "thumb_" + asset.tags[1];
											}
											else
											{
												var thumbnailAsset = ModuleAssetsDBbyAssetIdHash.get(asset.tags[1]);
												thumbUrl = '/assets/' + username + '/thumbnail/' + thumbnailAsset.dir + '/' + thumbnailAsset.fileName + '.' + thumbnailAsset.fileExtension;
											}
										}
										else //Sound,Project,Scene,Camera,...
										{
											thumbUrl = "thumb_" + asset.componentType;
										}
										
										if (assets.length>35)
										{
											newItem.setState('width',Std.string(32));
											newItem.setState('height',Std.string(32));
										}
										else
										{
											newItem.setState('width',Std.string(64));
											newItem.setState('height',Std.string(64));
										}
										
										newItem.setState('imageName',thumbUrl);
										newItem.setState('asset',asset);
										//newItem.setState('name',asset.name);
										me.addChild(newItem);
									}
									
									Display.invalidateLayout(); //This is mostly to prevent glitches when panel show up..
								</Script>
							</_Scripts>
						</_Action>
							
						<Action>
							<Id>Selected</Id>
							<Concurrency>Persistent</Concurrency>
							<Scripts>
								<Script>
									//forced
									
									//Close PopUp
									parent.startAction('Close');
									
									//Run Callback with OK
									var cb_caller = parent.getState('cb_caller');
									var cb_action = cb_caller.getAction(parent.getState('cb_actionName'));
									cb_action.setState('cb_result',"OK");
									cb_action.setState('cb_Arg1',it.getState('asset'));
									
									cb_caller.forceAction(parent.getState('cb_actionName'));
								</Script>
							</Scripts>
							<States>
								<State><Id>asset</Id><Type>Dynamic</Type><Value>null</Value></State>
							</States>
						</Action>
					</_Actions>
				</Entity>
			</_Entities>
		</_Space>
	</_Form>

	<_Triggers>

	</_Triggers>

	<_Actions>

	</_Actions>
</Entity>