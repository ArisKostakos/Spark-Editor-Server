<Entity extends="std.display.Scene2D">
	<_States>
		<_State id="name"><Value>Networking</Value></_State>
		<State><Id>nickname</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>color</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>isMaster</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>players</Id><Type>Dynamic</Type><Value>[]</Value></State>
		<State><Id>turn</Id><Type>Integer</Type><Value>0</Value></State>
		<State><Id>diceMessage</Id><Type>Dynamic</Type><Value>null</Value></State>
	</_States>
	<Form><Space><Entities>
		<Entity extends="MultiplayerDemo.levels.level1.Area"/>
		<Entity extends="MultiplayerDemo.levels.level1.Area2"/>
	</Entities></Space></Form>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					Comms.connectTo("130.211.172.86","3024", "multiplayerServer", me);
					//Display.de("Connecting...");
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Initiate Next Turn</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var playersTurn = me.s('players')[me.s('turn')];
					
					//tell player to play
					Comms.notify('multiplayer.multiplayerHandler.say', {id:e('Networking').s('nickname'), type:"newTurn", message: playersTurn.s('nickname') });
					
					me.addToState('turn',1);
					if (me.s('turn')>=me.s('players').length)
						me.setState('turn',0);
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Transient</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    me.stopAction('WaitFor');
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	
	</_Actions>
		
	<_Triggers>
		<Trigger>
			<Event>NetworkConnected</Event>
			<Parameter>multiplayerServer</Parameter>
			<Scripts>
				<Script>
					//Display.de("Connected!");
					Comms.request('multiplayer.multiplayerHandler.enter', { uid: Std.random(999999), username:"Player" }, "Entered Channel", me);
					//Display.de("Entering Default Channel...");
				</Script>
			</Scripts>
		</Trigger>
				
		<Trigger>
			<Event>NetworkRequest</Event>
			<Parameter>Entered Channel</Parameter>
			<Scripts>
				<Script>
					var data = Comms.getRequestData("Entered Channel");
					Display.log("Received data from server (Entered Channel): " + data.code);
					
					//Add Listeners
					Comms.addServerEvent('onSay');
				</Script>
			</Scripts>
		</Trigger>
		
		<Trigger>
			<Event>NetworkServerEvent</Event>
			<Parameter>onSay</Parameter>
			<Target>TargetNone</Target>
			<Scripts>
				<Script><![CDATA[
					var data = Comms.getServerEventData("onSay").shift();
					
					
					var firstX=434;
					var firstY=227;
					
					var calcX=2280/2-1024*2.2/2+firstX*2.2;
					var calcY=1440/2-582*2.2/2+firstY*2.2;
					
					
					//Display.error("onSay: "+data.message);
					//console.log(data);
					Display.de("onSAY triggered!");
					
					//for (data of dataArray)
						if (data.type=="greet" && data.id!=e('Networking').s('nickname'))
							e('lobbyLog').addToState('text','<br>'+data.message);
						else if (data.type=="start")
						{
							Display.de("Game Started!");
							e('Area 2').setState('display','none');
							Comms.notify('multiplayer.multiplayerHandler.say', {id:e('Networking').s('nickname'), type:"broadcast", message: e('Networking').s('color') });
						}
						else if (data.type=="broadcast")
						{
							Display.de("Creating Player: " + data.id + " ("+data.message+")");
							var player = Logic.create('MultiplayerDemo.levels.level1.Player');
							player.setState('2DMeshImageForm',"pawn_"+data.message);
							player.setState('name','Player:'+data.id);
							player.setState('nickname',data.id);
							player.setState('color',data.message);
							player.setState('spaceX',calcX+Logic.random(-40,40));
							player.setState('spaceY',calcY+Logic.random(-40,40));
							Logic.registerEntityByName(player);
							e('mainScene').addChild(player);
							
							me.s('players').push(player);
							
							if (me.s('isMaster'))
								me.sa('WaitFor',{delay:2, cbEntity:me, cbAction:"Initiate Next Turn"});
								
							e('Game Output Text').setState('visible',true);
							e('Game Output Text').setState('text',"Get Ready...");
						}
						else if (data.type=="newTurn")
						{
							e('Game Output Text').setState('visible',true);
							
							//Hide Previous Dice
							if (me.s('diceMessage')!=null)
								e('Dice '+Std.string(me.s('diceMessage').message)).setState('visible',false);
						
							if (data.message==e('Networking').s('nickname'))
							{
								e('Game Output Text').setState('text',"It's your turn!");
								e('Dice Button').setState('visible',true);
							}
							else
							{
								e('Game Output Text').setState('text',"It's " + data.message+"'s turn.");
							}
						}
						else if (data.type=="rolledDice")
						{
							e('Game Output Text').setState('visible',true);
							
							Sound.playSound("diceroll");
							me.setState('diceMessage',data);
							
							if (data.id==e('Networking').s('nickname'))
							{
								e('Game Output Text').setState('text',"You roll...");
							}
							else
							{
								e('Game Output Text').setState('text',data.id+" rolls...");
							}
							
							e('mainScene').sa('WaitFor',{delay:1, cbEntity:e('mainScene'), cbAction:"Dice Rolled"});
						}
				]]></Script>
			</Scripts>
		</Trigger>
	</_Triggers>
</Entity>